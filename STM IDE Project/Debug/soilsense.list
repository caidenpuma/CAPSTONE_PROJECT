
soilsense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006004  08006004  00007004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800618c  0800618c  00008108  2**0
                  CONTENTS
  4 .ARM          00000008  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006194  08006194  00008108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00007194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006198  08006198  00007198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  0800619c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000108  080062a4  00008108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080062a4  000083f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012059  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea5  00000000  00000000  0001a191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cae  00000000  00000000  0001e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d0  00000000  00000000  0001edb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014143  00000000  00000000  00043686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ca9  00000000  00000000  000577c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  0013b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fec 	.word	0x08005fec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	08005fec 	.word	0x08005fec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_channel_conv>:
 * Parameters:
 * - chan: channel number
 * - adc: initialized ADC
 * Returns: raw ADC reading from selected channel (0-4)
 */
uint16_t adc_channel_conv(uint8_t chan, ADC_HandleTypeDef adc){
 8000280:	b084      	sub	sp, #16
 8000282:	b590      	push	{r4, r7, lr}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	4604      	mov	r4, r0
 800028a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800028e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000292:	4623      	mov	r3, r4
 8000294:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_raw;
	ADC_CH_Cfg.Rank =  1;
 8000296:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <adc_channel_conv+0x70>)
 8000298:	2201      	movs	r2, #1
 800029a:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800029c:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <adc_channel_conv+0x70>)
 800029e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80002a2:	609a      	str	r2, [r3, #8]
	ADC_CH_Cfg.Channel = ADC_Channels[chan];        // select ADC channel
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4a13      	ldr	r2, [pc, #76]	@ (80002f4 <adc_channel_conv+0x74>)
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <adc_channel_conv+0x70>)
 80002ae:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&adc, &ADC_CH_Cfg);   	// configure selected channel
 80002b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b4:	490e      	ldr	r1, [pc, #56]	@ (80002f0 <adc_channel_conv+0x70>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 ffca 	bl	8002250 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&adc);                        	// start ADC conversion
 80002bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fec5 	bl	8002050 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adc, 1);         	// poll ADC channel with 1ms timeout
 80002c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ca:	2101      	movs	r1, #1
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff22 	bl	8002116 <HAL_ADC_PollForConversion>
	adc_raw = HAL_ADC_GetValue(&adc);
 80002d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 ffac 	bl	8002234 <HAL_ADC_GetValue>
 80002dc:	4603      	mov	r3, r0
 80002de:	81fb      	strh	r3, [r7, #14]
	return adc_raw;
 80002e0:	89fb      	ldrh	r3, [r7, #14]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr
 80002f0:	20000124 	.word	0x20000124
 80002f4:	20000000 	.word	0x20000000

080002f8 <HD44780_Init>:
        0b00000,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000302:	4a3a      	ldr	r2, [pc, #232]	@ (80003ec <HD44780_Init+0xf4>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	7013      	strb	r3, [r2, #0]
  dpBacklight = LCD_BACKLIGHT;
 8000308:	4b39      	ldr	r3, [pc, #228]	@ (80003f0 <HD44780_Init+0xf8>)
 800030a:	2208      	movs	r2, #8
 800030c:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800030e:	4b39      	ldr	r3, [pc, #228]	@ (80003f4 <HD44780_Init+0xfc>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000314:	4b35      	ldr	r3, [pc, #212]	@ (80003ec <HD44780_Init+0xf4>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d907      	bls.n	800032c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800031c:	4b35      	ldr	r3, [pc, #212]	@ (80003f4 <HD44780_Init+0xfc>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <HD44780_Init+0xfc>)
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e006      	b.n	800033a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800032c:	4b31      	ldr	r3, [pc, #196]	@ (80003f4 <HD44780_Init+0xfc>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b2f      	ldr	r3, [pc, #188]	@ (80003f4 <HD44780_Init+0xfc>)
 8000338:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800033a:	f000 f997 	bl	800066c <DelayInit>
  HAL_Delay(50);
 800033e:	2032      	movs	r0, #50	@ 0x32
 8000340:	f001 fb42 	bl	80019c8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000344:	4b2a      	ldr	r3, [pc, #168]	@ (80003f0 <HD44780_Init+0xf8>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f955 	bl	80005f8 <ExpanderWrite>
  HAL_Delay(1000);
 800034e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000352:	f001 fb39 	bl	80019c8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000356:	2030      	movs	r0, #48	@ 0x30
 8000358:	f000 f93d 	bl	80005d6 <Write4Bits>
  DelayUS(4500);
 800035c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000360:	f000 f9ae 	bl	80006c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000364:	2030      	movs	r0, #48	@ 0x30
 8000366:	f000 f936 	bl	80005d6 <Write4Bits>
  DelayUS(4500);
 800036a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800036e:	f000 f9a7 	bl	80006c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000372:	2030      	movs	r0, #48	@ 0x30
 8000374:	f000 f92f 	bl	80005d6 <Write4Bits>
  DelayUS(4500);
 8000378:	f241 1094 	movw	r0, #4500	@ 0x1194
 800037c:	f000 f9a0 	bl	80006c0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000380:	2020      	movs	r0, #32
 8000382:	f000 f928 	bl	80005d6 <Write4Bits>
  DelayUS(100);
 8000386:	2064      	movs	r0, #100	@ 0x64
 8000388:	f000 f99a 	bl	80006c0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800038c:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <HD44780_Init+0xfc>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	b2db      	uxtb	r3, r3
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f8e0 	bl	800055c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800039c:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <HD44780_Init+0x100>)
 800039e:	2204      	movs	r2, #4
 80003a0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80003a2:	f000 f87b 	bl	800049c <HD44780_Display>
  HD44780_Clear();
 80003a6:	f000 f831 	bl	800040c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <HD44780_Init+0x104>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HD44780_Init+0x104>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f8ce 	bl	800055c <SendCommand>
  DelayUS(4500);
 80003c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80003c4:	f000 f97c 	bl	80006c0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80003c8:	490d      	ldr	r1, [pc, #52]	@ (8000400 <HD44780_Init+0x108>)
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 f87c 	bl	80004c8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80003d0:	490c      	ldr	r1, [pc, #48]	@ (8000404 <HD44780_Init+0x10c>)
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 f878 	bl	80004c8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, special3);
 80003d8:	490b      	ldr	r1, [pc, #44]	@ (8000408 <HD44780_Init+0x110>)
 80003da:	2002      	movs	r0, #2
 80003dc:	f000 f874 	bl	80004c8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80003e0:	f000 f81f 	bl	8000422 <HD44780_Home>
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	2000013f 	.word	0x2000013f
 80003f0:	20000140 	.word	0x20000140
 80003f4:	2000013c 	.word	0x2000013c
 80003f8:	2000013d 	.word	0x2000013d
 80003fc:	2000013e 	.word	0x2000013e
 8000400:	20000014 	.word	0x20000014
 8000404:	2000001c 	.word	0x2000001c
 8000408:	20000024 	.word	0x20000024

0800040c <HD44780_Clear>:

void HD44780_Clear()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 f8a3 	bl	800055c <SendCommand>
  DelayUS(2000);
 8000416:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800041a:	f000 f951 	bl	80006c0 <DelayUS>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <HD44780_Home>:



void HD44780_Home()
{
 8000422:	b580      	push	{r7, lr}
 8000424:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000426:	2002      	movs	r0, #2
 8000428:	f000 f898 	bl	800055c <SendCommand>
  DelayUS(2000);
 800042c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000430:	f000 f946 	bl	80006c0 <DelayUS>
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <HD44780_SetCursor>:



void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b087      	sub	sp, #28
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	460a      	mov	r2, r1
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HD44780_SetCursor+0x5c>)
 800044a:	f107 0408 	add.w	r4, r7, #8
 800044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000454:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <HD44780_SetCursor+0x60>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	429a      	cmp	r2, r3
 800045c:	d303      	bcc.n	8000466 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <HD44780_SetCursor+0x60>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	3318      	adds	r3, #24
 800046c:	443b      	add	r3, r7
 800046e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4413      	add	r3, r2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	b25b      	sxtb	r3, r3
 800047c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000480:	b25b      	sxtb	r3, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f869 	bl	800055c <SendCommand>
}
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd90      	pop	{r4, r7, pc}
 8000492:	bf00      	nop
 8000494:	08006004 	.word	0x08006004
 8000498:	2000013f 	.word	0x2000013f

0800049c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <HD44780_Display+0x28>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HD44780_Display+0x28>)
 80004ac:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80004ae:	4b05      	ldr	r3, [pc, #20]	@ (80004c4 <HD44780_Display+0x28>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f84f 	bl	800055c <SendCommand>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000013d 	.word	0x2000013d

080004c8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f836 	bl	800055c <SendCommand>
  for (int i=0; i<8; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e009      	b.n	800050a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f83a 	bl	8000578 <SendChar>
  for (int i=0; i<8; i++)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b07      	cmp	r3, #7
 800050e:	ddf2      	ble.n	80004f6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000522:	e006      	b.n	8000532 <HD44780_PrintStr+0x18>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	607a      	str	r2, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f823 	bl	8000578 <SendChar>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f4      	bne.n	8000524 <HD44780_PrintStr+0xa>
}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <HD44780_Backlight+0x14>)
 800054a:	2208      	movs	r2, #8
 800054c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f852 	bl	80005f8 <ExpanderWrite>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000140 	.word	0x20000140

0800055c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f812 	bl	8000594 <Send>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2101      	movs	r1, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f804 	bl	8000594 <Send>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f023 030f 	bic.w	r3, r3, #15
 80005aa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80005b2:	7bfa      	ldrb	r2, [r7, #15]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f80b 	bl	80005d6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80005c0:	7bba      	ldrb	r2, [r7, #14]
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f804 	bl	80005d6 <Write4Bits>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f808 	bl	80005f8 <ExpanderWrite>
  PulseEnable(value);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f820 	bl	8000630 <PulseEnable>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <ExpanderWrite+0x30>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4313      	orrs	r3, r2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800060e:	f107 020f 	add.w	r2, r7, #15
 8000612:	230a      	movs	r3, #10
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	214e      	movs	r1, #78	@ 0x4e
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <ExpanderWrite+0x34>)
 800061c:	f002 fdf2 	bl	8003204 <HAL_I2C_Master_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000140 	.word	0x20000140
 800062c:	200001ac 	.word	0x200001ac

08000630 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffd8 	bl	80005f8 <ExpanderWrite>
  DelayUS(20);
 8000648:	2014      	movs	r0, #20
 800064a:	f000 f839 	bl	80006c0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f023 0304 	bic.w	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffce 	bl	80005f8 <ExpanderWrite>
  DelayUS(20);
 800065c:	2014      	movs	r0, #20
 800065e:	f000 f82f 	bl	80006c0 <DelayUS>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <DelayInit>:

static void DelayInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <DelayInit+0x4c>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <DelayInit+0x4c>)
 8000676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800067a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <DelayInit+0x4c>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <DelayInit+0x4c>)
 8000682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000686:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <DelayInit+0x50>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <DelayInit+0x50>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <DelayInit+0x50>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <DelayInit+0x50>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <DelayInit+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80006a6:	bf00      	nop
  __ASM volatile ("NOP");
 80006a8:	bf00      	nop
  __ASM volatile ("NOP");
 80006aa:	bf00      	nop
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <DelayUS>:



static void DelayUS(uint32_t us) {
 80006c0:	b480      	push	{r7}
 80006c2:	b087      	sub	sp, #28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <DelayUS+0x44>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <DelayUS+0x48>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	0c9a      	lsrs	r2, r3, #18
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <DelayUS+0x4c>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <DelayUS+0x4c>)
 80006e4:	685a      	ldr	r2, [r3, #4]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f6      	bhi.n	80006e2 <DelayUS+0x22>
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	200000ac 	.word	0x200000ac
 8000708:	431bde83 	.word	0x431bde83
 800070c:	e0001000 	.word	0xe0001000

08000710 <display_message_left>:

void display_message_left(const char *string1, const char *string2)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  HD44780_Clear();
 800071a:	f7ff fe77 	bl	800040c <HD44780_Clear>
  HD44780_Backlight();
 800071e:	f7ff ff11 	bl	8000544 <HD44780_Backlight>
  HD44780_SetCursor(0,0);
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fe87 	bl	8000438 <HD44780_SetCursor>
  HD44780_PrintStr(string1);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fef5 	bl	800051a <HD44780_PrintStr>
  HD44780_SetCursor(0,1);
 8000730:	2101      	movs	r1, #1
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fe80 	bl	8000438 <HD44780_SetCursor>
  HD44780_PrintStr(string2);
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f7ff feee 	bl	800051a <HD44780_PrintStr>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b097      	sub	sp, #92	@ 0x5c
 800074c:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f001 f8c6 	bl	80018de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f853 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 fa19 	bl	8000b8c <MX_GPIO_Init>
  MX_RTC_Init();
 800075a:	f000 f987 	bl	8000a6c <MX_RTC_Init>
  MX_ADC1_Init();
 800075e:	f000 f8a1 	bl	80008a4 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000762:	f000 f903 	bl	800096c <MX_I2C3_Init>
  MX_I2C4_Init();
 8000766:	f000 f941 	bl	80009ec <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff fdc4 	bl	80002f8 <HD44780_Init>
  veml7700_init(&veml, &hi2c4, VEML7700_I2C_ADDRESS);
 8000770:	2210      	movs	r2, #16
 8000772:	491b      	ldr	r1, [pc, #108]	@ (80007e0 <main+0x98>)
 8000774:	481b      	ldr	r0, [pc, #108]	@ (80007e4 <main+0x9c>)
 8000776:	f001 f867 	bl	8001848 <veml7700_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // ----- DEMO VERSION ------- *see f4_debug version for full operation
	  // CHECK SETUP
	  if (user_selected_plant.high_temp==0)  // check if plant has been selected
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <main+0xa0>)
 800077c:	7c5b      	ldrb	r3, [r3, #17]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <main+0x3e>
	  {
		  select_plant();
 8000782:	f000 fc63 	bl	800104c <select_plant>
	  }
	  if (calibrated_wet_level==0) // check if moisture level calibrated
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <main+0xa4>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10b      	bne.n	80007a6 <main+0x5e>
	  {
		  calibrate_moisture(hadc1);
 800078e:	4c18      	ldr	r4, [pc, #96]	@ (80007f0 <main+0xa8>)
 8000790:	4668      	mov	r0, sp
 8000792:	f104 0310 	add.w	r3, r4, #16
 8000796:	2258      	movs	r2, #88	@ 0x58
 8000798:	4619      	mov	r1, r3
 800079a:	f004 ffdb 	bl	8005754 <memcpy>
 800079e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007a2:	f000 fc8b 	bl	80010bc <calibrate_moisture>
	  }
	  if (pot_depth==0) // check if pot depth has been selected
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <main+0xac>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <main+0x6a>
	  {
		  select_pot_depth();
 80007ae:	f000 fd3f 	bl	8001230 <select_pot_depth>
	  }
	  if(*flags[1]==1) // user-initiated recalibration
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <main+0xb0>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10d      	bne.n	80007d8 <main+0x90>
	  {
		  clear_flags();
 80007bc:	f000 fbd6 	bl	8000f6c <clear_flags>
		  change_setup(hadc1);
 80007c0:	4c0b      	ldr	r4, [pc, #44]	@ (80007f0 <main+0xa8>)
 80007c2:	4668      	mov	r0, sp
 80007c4:	f104 0310 	add.w	r3, r4, #16
 80007c8:	2258      	movs	r2, #88	@ 0x58
 80007ca:	4619      	mov	r1, r3
 80007cc:	f004 ffc2 	bl	8005754 <memcpy>
 80007d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007d4:	f000 fd66 	bl	80012a4 <change_setup>
	  }

	  // OPERATION
	  if (*flags[0])  // if RTC IRQ set
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <main+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
	  if (user_selected_plant.high_temp==0)  // check if plant has been selected
 80007de:	e7cc      	b.n	800077a <main+0x32>
 80007e0:	20000200 	.word	0x20000200
 80007e4:	20000278 	.word	0x20000278
 80007e8:	20000080 	.word	0x20000080
 80007ec:	20000288 	.word	0x20000288
 80007f0:	20000144 	.word	0x20000144
 80007f4:	2000028a 	.word	0x2000028a
 80007f8:	20000098 	.word	0x20000098

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b096      	sub	sp, #88	@ 0x58
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2244      	movs	r2, #68	@ 0x44
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 ff6e 	bl	80056ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800081e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000822:	f003 f8c7 	bl	80039b4 <HAL_PWREx_ControlVoltageScaling>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800082c:	f000 fb14 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000830:	2318      	movs	r3, #24
 8000832:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000840:	2360      	movs	r3, #96	@ 0x60
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000848:	2301      	movs	r3, #1
 800084a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000850:	2328      	movs	r3, #40	@ 0x28
 8000852:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000854:	2307      	movs	r3, #7
 8000856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4618      	mov	r0, r3
 8000866:	f003 f8fb 	bl	8003a60 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000870:	f000 faf2 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2104      	movs	r1, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fcfb 	bl	8004288 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000898:	f000 fade 	bl	8000e58 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3758      	adds	r7, #88	@ 0x58
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008bc:	4a29      	ldr	r2, [pc, #164]	@ (8000964 <MX_ADC1_Init+0xc0>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008da:	2204      	movs	r2, #4
 80008dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_ADC1_Init+0xbc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_ADC1_Init+0xbc>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_ADC1_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_ADC1_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_ADC1_Init+0xbc>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_ADC1_Init+0xbc>)
 800091c:	f001 fa52 	bl	8001dc4 <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000926:	f000 fa97 	bl	8000e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_ADC1_Init+0xc4>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000936:	237f      	movs	r3, #127	@ 0x7f
 8000938:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093a:	2304      	movs	r3, #4
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_ADC1_Init+0xbc>)
 8000948:	f001 fc82 	bl	8002250 <HAL_ADC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000952:	f000 fa81 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000144 	.word	0x20000144
 8000964:	50040000 	.word	0x50040000
 8000968:	04300002 	.word	0x04300002

0800096c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C3_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <MX_I2C3_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009a8:	f002 fb90 	bl	80030cc <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 fa51 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009ba:	f002 ff55 	bl	8003868 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 fa48 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009cc:	f002 ff97 	bl	80038fe <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 fa3f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001ac 	.word	0x200001ac
 80009e4:	40005c00 	.word	0x40005c00
 80009e8:	10d19ce4 	.word	0x10d19ce4

080009ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_I2C4_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <MX_I2C4_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10D19CE4;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_I2C4_Init+0x74>)
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <MX_I2C4_Init+0x7c>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_I2C4_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a26:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a28:	f002 fb50 	bl	80030cc <HAL_I2C_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f000 fa11 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a3a:	f002 ff15 	bl	8003868 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 fa08 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_I2C4_Init+0x74>)
 8000a4c:	f002 ff57 	bl	80038fe <HAL_I2CEx_ConfigDigitalFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f9ff 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000200 	.word	0x20000200
 8000a64:	40008400 	.word	0x40008400
 8000a68:	10d19ce4 	.word	0x10d19ce4

08000a6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b092      	sub	sp, #72	@ 0x48
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	222c      	movs	r2, #44	@ 0x2c
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fe2d 	bl	80056ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000a94:	4a3c      	ldr	r2, [pc, #240]	@ (8000b88 <MX_RTC_Init+0x11c>)
 8000a96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000aa0:	227f      	movs	r2, #127	@ 0x7f
 8000aa2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aa4:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000aa6:	22ff      	movs	r2, #255	@ 0xff
 8000aa8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aaa:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ab6:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000abc:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ac2:	4830      	ldr	r0, [pc, #192]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000ac4:	f004 f92a 	bl	8004d1c <HAL_RTC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ace:	f000 f9c3 	bl	8000e58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000aec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000af6:	f004 f999 	bl	8004e2c <HAL_RTC_SetTime>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000b00:	f000 f9aa 	bl	8000e58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	4817      	ldr	r0, [pc, #92]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000b26:	f004 fa1e 	bl	8004f66 <HAL_RTC_SetDate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000b30:	f000 f992 	bl	8000e58 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x10;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_RTC_Init+0x118>)
 8000b6c:	f004 fa82 	bl	8005074 <HAL_RTC_SetAlarm_IT>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000b76:	f000 f96f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3748      	adds	r7, #72	@ 0x48
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000254 	.word	0x20000254
 8000b88:	40002800 	.word	0x40002800

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a79      	ldr	r2, [pc, #484]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b77      	ldr	r3, [pc, #476]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b74      	ldr	r3, [pc, #464]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a73      	ldr	r2, [pc, #460]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b71      	ldr	r3, [pc, #452]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a6d      	ldr	r2, [pc, #436]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b6b      	ldr	r3, [pc, #428]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	4b68      	ldr	r3, [pc, #416]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a67      	ldr	r2, [pc, #412]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b65      	ldr	r3, [pc, #404]	@ (8000d8c <MX_GPIO_Init+0x200>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8000c08:	4861      	ldr	r0, [pc, #388]	@ (8000d90 <MX_GPIO_Init+0x204>)
 8000c0a:	f002 fa2f 	bl	800306c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f24f 0141 	movw	r1, #61505	@ 0xf041
 8000c14:	485f      	ldr	r0, [pc, #380]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c16:	f002 fa29 	bl	800306c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c24:	f002 fa22 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC8
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8000c28:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000c2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4853      	ldr	r0, [pc, #332]	@ (8000d90 <MX_GPIO_Init+0x204>)
 8000c42:	f002 f899 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c46:	2303      	movs	r3, #3
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c56:	2308      	movs	r3, #8
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f002 f888 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000c68:	231c      	movs	r3, #28
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7e:	f002 f87b 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000c82:	f24f 0341 	movw	r3, #61505	@ 0xf041
 8000c86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483e      	ldr	r0, [pc, #248]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c9c:	f002 f86c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4837      	ldr	r0, [pc, #220]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000cb6:	f002 f85f 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4830      	ldr	r0, [pc, #192]	@ (8000d90 <MX_GPIO_Init+0x204>)
 8000cd0:	f002 f852 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd4:	2380      	movs	r3, #128	@ 0x80
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482a      	ldr	r0, [pc, #168]	@ (8000d90 <MX_GPIO_Init+0x204>)
 8000ce8:	f002 f846 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000cec:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 f836 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d26:	f002 f827 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4816      	ldr	r0, [pc, #88]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000d3e:	f002 f81b 	bl	8002d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2007      	movs	r0, #7
 8000d48:	f001 ffdf 	bl	8002d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d4c:	2007      	movs	r0, #7
 8000d4e:	f001 fff8 	bl	8002d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2008      	movs	r0, #8
 8000d58:	f001 ffd7 	bl	8002d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d5c:	2008      	movs	r0, #8
 8000d5e:	f001 fff0 	bl	8002d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2017      	movs	r0, #23
 8000d68:	f001 ffcf 	bl	8002d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f001 ffe8 	bl	8002d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2028      	movs	r0, #40	@ 0x28
 8000d78:	f001 ffc7 	bl	8002d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d7c:	2028      	movs	r0, #40	@ 0x28
 8000d7e:	f001 ffe0 	bl	8002d42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48000800 	.word	0x48000800
 8000d94:	48000400 	.word	0x48000400
 8000d98:	48001c00 	.word	0x48001c00

08000d9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;
	uint32_t current_time = HAL_GetTick();
 8000da6:	f000 fe03 	bl	80019b0 <HAL_GetTick>
 8000daa:	60f8      	str	r0, [r7, #12]
	if (current_time - last_interrupt_time < 200)
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_GPIO_EXTI_Callback+0x68>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2bc7      	cmp	r3, #199	@ 0xc7
 8000db6:	d920      	bls.n	8000dfa <HAL_GPIO_EXTI_Callback+0x5e>
	{
		return;
	}
	last_interrupt_time = current_time;
 8000db8:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <HAL_GPIO_EXTI_Callback+0x68>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6013      	str	r3, [r2, #0]

	if(GPIO_Pin == GPIO_PIN_8)
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc4:	d103      	bne.n	8000dce <HAL_GPIO_EXTI_Callback+0x32>
	{
		toggle_flag(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 f8a8 	bl	8000f1c <toggle_flag>
 8000dcc:	e016      	b.n	8000dfc <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin == GPIO_PIN_10)
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd4:	d103      	bne.n	8000dde <HAL_GPIO_EXTI_Callback+0x42>
	{
		toggle_flag(2);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f000 f8a0 	bl	8000f1c <toggle_flag>
 8000ddc:	e00e      	b.n	8000dfc <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin == GPIO_PIN_4)
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d103      	bne.n	8000dec <HAL_GPIO_EXTI_Callback+0x50>
	{
		toggle_flag(3);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f899 	bl	8000f1c <toggle_flag>
 8000dea:	e007      	b.n	8000dfc <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin == GPIO_PIN_5)
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2b20      	cmp	r3, #32
 8000df0:	d104      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x60>
	{
		toggle_flag(4);
 8000df2:	2004      	movs	r0, #4
 8000df4:	f000 f892 	bl	8000f1c <toggle_flag>
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_EXTI_Callback+0x60>
		return;
 8000dfa:	bf00      	nop
	}
}
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000280 	.word	0x20000280

08000e08 <HAL_RTC_AlarmAEventCallback>:

// TODO: update this with correct timing for demo
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000e10:	f107 010c 	add.w	r1, r7, #12
 8000e14:	2300      	movs	r3, #0
 8000e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f004 fa66 	bl	80052ec <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e24:	d902      	bls.n	8000e2c <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Seconds=0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]
 8000e2a:	e003      	b.n	8000e34 <HAL_RTC_AlarmAEventCallback+0x2c>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	73bb      	strb	r3, [r7, #14]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000e34:	bf00      	nop
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f004 f918 	bl	8005074 <HAL_RTC_SetAlarm_IT>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f5      	bne.n	8000e36 <HAL_RTC_AlarmAEventCallback+0x2e>
    toggle_flag(0);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f866 	bl	8000f1c <toggle_flag>
}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	@ 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <Error_Handler+0x8>

08000e64 <get_moisture_value>:
 * Parameters:
 * - adc: initialized ADC
 * Returns: averaged raw ADC value for higher moisture sensor
 * TODO: update return value (extra parameter to chose which? don't return anything?)
 */
uint16_t get_moisture_value(ADC_HandleTypeDef adc){
 8000e64:	b084      	sub	sp, #16
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b09e      	sub	sp, #120	@ 0x78
 8000e6a:	af18      	add	r7, sp, #96	@ 0x60
 8000e6c:	f107 0c20 	add.w	ip, r7, #32
 8000e70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t sum1, sum2;
    uint16_t s1, s2, avg1, avg2;
    sum1 = 0; sum2 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
    for(int i=0; i<5; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e02b      	b.n	8000eda <get_moisture_value+0x76>
    	s1 = adc_channel_conv(1, adc);
 8000e82:	4668      	mov	r0, sp
 8000e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e88:	225c      	movs	r2, #92	@ 0x5c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f004 fc62 	bl	8005754 <memcpy>
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff f9f2 	bl	8000280 <adc_channel_conv>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
        sum1 += s1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
        s2 = adc_channel_conv(3, adc);
 8000ea8:	4668      	mov	r0, sp
 8000eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eae:	225c      	movs	r2, #92	@ 0x5c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f004 fc4f 	bl	8005754 <memcpy>
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f7ff f9df 	bl	8000280 <adc_channel_conv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
        sum2 += s2;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4413      	add	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        HAL_Delay(200);
 8000ece:	20c8      	movs	r0, #200	@ 0xc8
 8000ed0:	f000 fd7a 	bl	80019c8 <HAL_Delay>
    for(int i=0; i<5; i++) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	ddd0      	ble.n	8000e82 <get_moisture_value+0x1e>
    }
    avg1 = sum1/5;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <get_moisture_value+0xb0>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	817b      	strh	r3, [r7, #10]
    avg2 = sum2/5;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <get_moisture_value+0xb0>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	813b      	strh	r3, [r7, #8]

    moisture_sensor_readings[0] = avg1;
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <get_moisture_value+0xb4>)
 8000efa:	897b      	ldrh	r3, [r7, #10]
 8000efc:	8013      	strh	r3, [r2, #0]
    moisture_sensor_readings[1] = avg2;
 8000efe:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <get_moisture_value+0xb4>)
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	8053      	strh	r3, [r2, #2]

    return avg1;
 8000f04:	897b      	ldrh	r3, [r7, #10]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	20000284 	.word	0x20000284

08000f1c <toggle_flag>:
 * Button 4: next, toggle alert
 */
volatile int *flags[5] = {&rtc_flag, &flag_1, &flag_2, &flag_3, &flag_4};


void toggle_flag(int button){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(*flags[button] == 0){*flags[button]=1;}
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <toggle_flag+0x4c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d106      	bne.n	8000f40 <toggle_flag+0x24>
 8000f32:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <toggle_flag+0x4c>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
	else if (*flags[button] == 1){*flags[button]=0;}
}
 8000f3e:	e00c      	b.n	8000f5a <toggle_flag+0x3e>
	else if (*flags[button] == 1){*flags[button]=0;}
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <toggle_flag+0x4c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d105      	bne.n	8000f5a <toggle_flag+0x3e>
 8000f4e:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <toggle_flag+0x4c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000098 	.word	0x20000098

08000f6c <clear_flags>:

void set_flag(int button){
	*flags[button] = 1;
}

void clear_flags(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	*flags[0] = 0;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <clear_flags+0x38>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	*flags[1] = 0;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <clear_flags+0x38>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	*flags[2] = 0;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <clear_flags+0x38>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
	*flags[3] = 0;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <clear_flags+0x38>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	*flags[4] = 0;
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <clear_flags+0x38>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000098 	.word	0x20000098

08000fa8 <scroll_plant>:

/* Helper function for select_plant
 * controls display of plant list
 * NOTE: need to update wrapping index when size of plant_list changed
 */
static Plant scroll_plant(){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  while(1){
    display_message_left(plant_list[i]->plant_name,"");
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <scroll_plant+0x98>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	4921      	ldr	r1, [pc, #132]	@ (8001044 <scroll_plant+0x9c>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fba6 	bl	8000710 <display_message_left>
    if(*flags[2]){ // if "select" is pressed
 8000fc4:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <scroll_plant+0xa0>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <scroll_plant+0x4e>
    	clear_flags();
 8000fce:	f7ff ffcd 	bl	8000f6c <clear_flags>
        return *plant_list[i];
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <scroll_plant+0x98>)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6810      	ldr	r0, [r2, #0]
 8000fde:	6851      	ldr	r1, [r2, #4]
 8000fe0:	6895      	ldr	r5, [r2, #8]
 8000fe2:	68d4      	ldr	r4, [r2, #12]
 8000fe4:	6018      	str	r0, [r3, #0]
 8000fe6:	6059      	str	r1, [r3, #4]
 8000fe8:	609d      	str	r5, [r3, #8]
 8000fea:	60dc      	str	r4, [r3, #12]
 8000fec:	6910      	ldr	r0, [r2, #16]
 8000fee:	6951      	ldr	r1, [r2, #20]
 8000ff0:	6118      	str	r0, [r3, #16]
 8000ff2:	6159      	str	r1, [r3, #20]
 8000ff4:	e020      	b.n	8001038 <scroll_plant+0x90>
    }
    if(*flags[4]){ // if "next" pressed
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <scroll_plant+0xa0>)
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <scroll_plant+0x6e>
        clear_flags();
 8001000:	f7ff ffb4 	bl	8000f6c <clear_flags>
        if(i==2){i=0;} // wrap to first index
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d102      	bne.n	8001010 <scroll_plant+0x68>
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e002      	b.n	8001016 <scroll_plant+0x6e>
        else {i++;}
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
    }
    if(*flags[3]){ // if "back" pressed
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <scroll_plant+0xa0>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0c9      	beq.n	8000fb4 <scroll_plant+0xc>
    	clear_flags();
 8001020:	f7ff ffa4 	bl	8000f6c <clear_flags>
        if(i==0) {i=2;}  // wrap to last index
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <scroll_plant+0x88>
 800102a:	2302      	movs	r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e7c1      	b.n	8000fb4 <scroll_plant+0xc>
        else {i--;}
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3b01      	subs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
    display_message_left(plant_list[i]->plant_name,"");
 8001036:	e7bd      	b.n	8000fb4 <scroll_plant+0xc>
    }
  }
}
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bdb0      	pop	{r4, r5, r7, pc}
 8001040:	20000074 	.word	0x20000074
 8001044:	08006018 	.word	0x08006018
 8001048:	20000098 	.word	0x20000098

0800104c <select_plant>:

/* User plant selection
 * Displays plant options and sets user_selected_plant
 */
uint32_t select_plant(){
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
    display_message_left("to select plant", "press next");
 8001052:	4916      	ldr	r1, [pc, #88]	@ (80010ac <select_plant+0x60>)
 8001054:	4816      	ldr	r0, [pc, #88]	@ (80010b0 <select_plant+0x64>)
 8001056:	f7ff fb5b 	bl	8000710 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 800105a:	e00c      	b.n	8001076 <select_plant+0x2a>
        if(*flags[3] && user_selected_plant.high_humidity!=0){ // exit if "back" pressed and already plant selected
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <select_plant+0x68>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <select_plant+0x2a>
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <select_plant+0x6c>)
 8001068:	7cdb      	ldrb	r3, [r3, #19]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <select_plant+0x2a>
        	clear_flags();
 800106e:	f7ff ff7d 	bl	8000f6c <clear_flags>
            return 0;
 8001072:	2300      	movs	r3, #0
 8001074:	e015      	b.n	80010a2 <select_plant+0x56>
    while(!*flags[4]){ // wait for "next" press
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <select_plant+0x68>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0ed      	beq.n	800105c <select_plant+0x10>
        }
    };
    clear_flags();
 8001080:	f7ff ff74 	bl	8000f6c <clear_flags>
    user_selected_plant = scroll_plant();
 8001084:	4c0c      	ldr	r4, [pc, #48]	@ (80010b8 <select_plant+0x6c>)
 8001086:	463b      	mov	r3, r7
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff8d 	bl	8000fa8 <scroll_plant>
 800108e:	463d      	mov	r5, r7
 8001090:	6828      	ldr	r0, [r5, #0]
 8001092:	6869      	ldr	r1, [r5, #4]
 8001094:	68aa      	ldr	r2, [r5, #8]
 8001096:	68eb      	ldr	r3, [r5, #12]
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	6928      	ldr	r0, [r5, #16]
 800109c:	6969      	ldr	r1, [r5, #20]
 800109e:	c403      	stmia	r4!, {r0, r1}
    return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0800601c 	.word	0x0800601c
 80010b0:	08006028 	.word	0x08006028
 80010b4:	20000098 	.word	0x20000098
 80010b8:	20000080 	.word	0x20000080

080010bc <calibrate_moisture>:
/* User calibration of moisture sensor reading for wet soil
 * Want wet level to be higher sensor, run 5 mins after watering
 * Parameters:
 * - adc: initialized ADC
 */
uint32_t calibrate_moisture(ADC_HandleTypeDef adc){
 80010bc:	b084      	sub	sp, #16
 80010be:	b580      	push	{r7, lr}
 80010c0:	b096      	sub	sp, #88	@ 0x58
 80010c2:	af16      	add	r7, sp, #88	@ 0x58
 80010c4:	f107 0c08 	add.w	ip, r7, #8
 80010c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    display_message_left("water plant then", "press calibrate");
 80010cc:	4923      	ldr	r1, [pc, #140]	@ (800115c <calibrate_moisture+0xa0>)
 80010ce:	4824      	ldr	r0, [pc, #144]	@ (8001160 <calibrate_moisture+0xa4>)
 80010d0:	f7ff fb1e 	bl	8000710 <display_message_left>
    while(!*flags[1]){ // wait for "calibrate" press
 80010d4:	e016      	b.n	8001104 <calibrate_moisture+0x48>
        if(*flags[3] && calibrated_wet_level!=0){ // exit if "back" pressed and already calibrated
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <calibrate_moisture+0xa8>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d011      	beq.n	8001104 <calibrate_moisture+0x48>
 80010e0:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <calibrate_moisture+0xac>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00d      	beq.n	8001104 <calibrate_moisture+0x48>
        	display_message_left("exiting", "calibration");
 80010e8:	4920      	ldr	r1, [pc, #128]	@ (800116c <calibrate_moisture+0xb0>)
 80010ea:	4821      	ldr	r0, [pc, #132]	@ (8001170 <calibrate_moisture+0xb4>)
 80010ec:	f7ff fb10 	bl	8000710 <display_message_left>
        	HAL_Delay(2000);
 80010f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010f4:	f000 fc68 	bl	80019c8 <HAL_Delay>
        	HD44780_Clear();
 80010f8:	f7ff f988 	bl	800040c <HD44780_Clear>
        	clear_flags();
 80010fc:	f7ff ff36 	bl	8000f6c <clear_flags>
            return 0;
 8001100:	2300      	movs	r3, #0
 8001102:	e025      	b.n	8001150 <calibrate_moisture+0x94>
    while(!*flags[1]){ // wait for "calibrate" press
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <calibrate_moisture+0xa8>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0e3      	beq.n	80010d6 <calibrate_moisture+0x1a>
        }
    };
    clear_flags();
 800110e:	f7ff ff2d 	bl	8000f6c <clear_flags>
    display_message_left("calibrating", "");
 8001112:	4918      	ldr	r1, [pc, #96]	@ (8001174 <calibrate_moisture+0xb8>)
 8001114:	4818      	ldr	r0, [pc, #96]	@ (8001178 <calibrate_moisture+0xbc>)
 8001116:	f7ff fafb 	bl	8000710 <display_message_left>
    calibrated_wet_level = get_moisture_value(adc);
 800111a:	4668      	mov	r0, sp
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	2258      	movs	r2, #88	@ 0x58
 8001122:	4619      	mov	r1, r3
 8001124:	f004 fb16 	bl	8005754 <memcpy>
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112e:	f7ff fe99 	bl	8000e64 <get_moisture_value>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <calibrate_moisture+0xac>)
 8001138:	801a      	strh	r2, [r3, #0]
    display_message_left("calibration", "saved");
 800113a:	4910      	ldr	r1, [pc, #64]	@ (800117c <calibrate_moisture+0xc0>)
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <calibrate_moisture+0xb0>)
 800113e:	f7ff fae7 	bl	8000710 <display_message_left>
    HAL_Delay(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001146:	f000 fc3f 	bl	80019c8 <HAL_Delay>
    HD44780_Clear();
 800114a:	f7ff f95f 	bl	800040c <HD44780_Clear>
    return 0;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001158:	b004      	add	sp, #16
 800115a:	4770      	bx	lr
 800115c:	08006038 	.word	0x08006038
 8001160:	08006048 	.word	0x08006048
 8001164:	20000098 	.word	0x20000098
 8001168:	20000288 	.word	0x20000288
 800116c:	0800605c 	.word	0x0800605c
 8001170:	08006068 	.word	0x08006068
 8001174:	08006018 	.word	0x08006018
 8001178:	08006070 	.word	0x08006070
 800117c:	0800607c 	.word	0x0800607c

08001180 <scroll_depth>:

/* Helper function for select_pot_depth
 * Controls display of depth options
 */
static uint16_t scroll_depth(){
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
	uint32_t min_depth = 4;
 8001186:	2304      	movs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
	uint32_t max_depth = 24;
 800118a:	2318      	movs	r3, #24
 800118c:	617b      	str	r3, [r7, #20]
	uint16_t depth = min_depth;
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	83fb      	strh	r3, [r7, #30]
	char buf[16];
    while(1){
    	sprintf(buf, "%d in",depth);
 8001192:	8bfa      	ldrh	r2, [r7, #30]
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4921      	ldr	r1, [pc, #132]	@ (800121c <scroll_depth+0x9c>)
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fa87 	bl	80056ac <siprintf>
    	display_message_left("pot depth:", buf);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	481f      	ldr	r0, [pc, #124]	@ (8001220 <scroll_depth+0xa0>)
 80011a4:	f7ff fab4 	bl	8000710 <display_message_left>
        if(*flags[2]){ // if "select" is pressed
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <scroll_depth+0xa4>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00d      	beq.n	80011ce <scroll_depth+0x4e>
        	clear_flags(); // clear "select" flag
 80011b2:	f7ff fedb 	bl	8000f6c <clear_flags>
        	display_message_left("depth", "selected");
 80011b6:	491c      	ldr	r1, [pc, #112]	@ (8001228 <scroll_depth+0xa8>)
 80011b8:	481c      	ldr	r0, [pc, #112]	@ (800122c <scroll_depth+0xac>)
 80011ba:	f7ff faa9 	bl	8000710 <display_message_left>
        	HAL_Delay(2000);
 80011be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011c2:	f000 fc01 	bl	80019c8 <HAL_Delay>
        	HD44780_Clear();
 80011c6:	f7ff f921 	bl	800040c <HD44780_Clear>
            return depth;
 80011ca:	8bfb      	ldrh	r3, [r7, #30]
 80011cc:	e022      	b.n	8001214 <scroll_depth+0x94>
        }
        if (*flags[4]){ // if "next" pressed
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <scroll_depth+0xa4>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <scroll_depth+0x70>
        	clear_flags(); // clear "next" flag
 80011d8:	f7ff fec8 	bl	8000f6c <clear_flags>
            if(depth==max_depth){depth=min_depth;} // wrap
 80011dc:	8bfb      	ldrh	r3, [r7, #30]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d102      	bne.n	80011ea <scroll_depth+0x6a>
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	83fb      	strh	r3, [r7, #30]
 80011e8:	e002      	b.n	80011f0 <scroll_depth+0x70>
            else {depth++;}
 80011ea:	8bfb      	ldrh	r3, [r7, #30]
 80011ec:	3301      	adds	r3, #1
 80011ee:	83fb      	strh	r3, [r7, #30]
        }
        if(*flags[3]){ // if "back" pressed
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <scroll_depth+0xa4>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0cb      	beq.n	8001192 <scroll_depth+0x12>
        	clear_flags(); // clear "back" flag
 80011fa:	f7ff feb7 	bl	8000f6c <clear_flags>
            if(depth==min_depth) {depth=max_depth;}  // wrap
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	429a      	cmp	r2, r3
 8001204:	d102      	bne.n	800120c <scroll_depth+0x8c>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	83fb      	strh	r3, [r7, #30]
 800120a:	e7c2      	b.n	8001192 <scroll_depth+0x12>
            else {depth--;}
 800120c:	8bfb      	ldrh	r3, [r7, #30]
 800120e:	3b01      	subs	r3, #1
 8001210:	83fb      	strh	r3, [r7, #30]
    	sprintf(buf, "%d in",depth);
 8001212:	e7be      	b.n	8001192 <scroll_depth+0x12>
        }
    }
}
 8001214:	4618      	mov	r0, r3
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08006084 	.word	0x08006084
 8001220:	0800608c 	.word	0x0800608c
 8001224:	20000098 	.word	0x20000098
 8001228:	08006098 	.word	0x08006098
 800122c:	080060a4 	.word	0x080060a4

08001230 <select_pot_depth>:

/* User pot depth selection
 */
uint16_t select_pot_depth(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    display_message_left("to select pot", "depth press next");
 8001234:	4915      	ldr	r1, [pc, #84]	@ (800128c <select_pot_depth+0x5c>)
 8001236:	4816      	ldr	r0, [pc, #88]	@ (8001290 <select_pot_depth+0x60>)
 8001238:	f7ff fa6a 	bl	8000710 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 800123c:	e00c      	b.n	8001258 <select_pot_depth+0x28>
        if(*flags[3] && pot_depth!=0){ // exit if "back" pressed and already set depth
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <select_pot_depth+0x64>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <select_pot_depth+0x28>
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <select_pot_depth+0x68>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <select_pot_depth+0x28>
        	clear_flags(); // clear "next" and "back" flags
 8001250:	f7ff fe8c 	bl	8000f6c <clear_flags>
            return 0;
 8001254:	2300      	movs	r3, #0
 8001256:	e017      	b.n	8001288 <select_pot_depth+0x58>
    while(!*flags[4]){ // wait for "next" press
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <select_pot_depth+0x64>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ed      	beq.n	800123e <select_pot_depth+0xe>
        }
    };
    clear_flags(); // clear "next" flag
 8001262:	f7ff fe83 	bl	8000f6c <clear_flags>
    pot_depth = scroll_depth();
 8001266:	f7ff ff8b 	bl	8001180 <scroll_depth>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <select_pot_depth+0x68>)
 8001270:	801a      	strh	r2, [r3, #0]
    display_message_left("pot depth saved", "");
 8001272:	490a      	ldr	r1, [pc, #40]	@ (800129c <select_pot_depth+0x6c>)
 8001274:	480a      	ldr	r0, [pc, #40]	@ (80012a0 <select_pot_depth+0x70>)
 8001276:	f7ff fa4b 	bl	8000710 <display_message_left>
    HAL_Delay(2000);
 800127a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800127e:	f000 fba3 	bl	80019c8 <HAL_Delay>
    HD44780_Clear();
 8001282:	f7ff f8c3 	bl	800040c <HD44780_Clear>
    return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}
 800128c:	080060ac 	.word	0x080060ac
 8001290:	080060c0 	.word	0x080060c0
 8001294:	20000098 	.word	0x20000098
 8001298:	2000028a 	.word	0x2000028a
 800129c:	08006018 	.word	0x08006018
 80012a0:	080060d0 	.word	0x080060d0

080012a4 <change_setup>:

/* User recalibration (change one of setup values)
 */
uint32_t change_setup(ADC_HandleTypeDef adc){
 80012a4:	b084      	sub	sp, #16
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b098      	sub	sp, #96	@ 0x60
 80012aa:	af16      	add	r7, sp, #88	@ 0x58
 80012ac:	f107 0c10 	add.w	ip, r7, #16
 80012b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int i = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
    while(1){
        if(*flags[2]){ // if "select" is pressed
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <change_setup+0xf0>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d023      	beq.n	800130a <change_setup+0x66>
        	clear_flags(); // clear "select" flag
 80012c2:	f7ff fe53 	bl	8000f6c <clear_flags>
            switch (i) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d019      	beq.n	8001300 <change_setup+0x5c>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	dc19      	bgt.n	8001306 <change_setup+0x62>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <change_setup+0x3c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d003      	beq.n	80012e6 <change_setup+0x42>
 80012de:	e012      	b.n	8001306 <change_setup+0x62>
                case (0):
                    select_plant();
 80012e0:	f7ff feb4 	bl	800104c <select_plant>
                    break;
 80012e4:	e00f      	b.n	8001306 <change_setup+0x62>
                case (1):
                    calibrate_moisture(adc);
 80012e6:	4668      	mov	r0, sp
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2258      	movs	r2, #88	@ 0x58
 80012ee:	4619      	mov	r1, r3
 80012f0:	f004 fa30 	bl	8005754 <memcpy>
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	f7ff fedf 	bl	80010bc <calibrate_moisture>
                    break;
 80012fe:	e002      	b.n	8001306 <change_setup+0x62>
                case (2):
                    select_pot_depth();
 8001300:	f7ff ff96 	bl	8001230 <select_pot_depth>
                    break;
 8001304:	bf00      	nop
            }
            return i;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e03c      	b.n	8001384 <change_setup+0xe0>
        }
        if (*flags[4]){ // if "next" pressed
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <change_setup+0xf0>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00a      	beq.n	800132a <change_setup+0x86>
        	clear_flags(); // clear "next" flag
 8001314:	f7ff fe2a 	bl	8000f6c <clear_flags>
            if(i==2){i=0;} // wrap
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d102      	bne.n	8001324 <change_setup+0x80>
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	e002      	b.n	800132a <change_setup+0x86>
            else {i++;}
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
        }
        if(*flags[3]){ // if "back" pressed
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <change_setup+0xf0>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <change_setup+0xa6>
        	clear_flags(); // clear "back" flag
 8001334:	f7ff fe1a 	bl	8000f6c <clear_flags>
            if(i==0) {i=2;}  // wrap
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <change_setup+0xa0>
 800133e:	2302      	movs	r3, #2
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	e002      	b.n	800134a <change_setup+0xa6>
            else {i--;}
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
        }
        switch (i) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d013      	beq.n	8001378 <change_setup+0xd4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	dcb0      	bgt.n	80012b8 <change_setup+0x14>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <change_setup+0xc0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d005      	beq.n	800136e <change_setup+0xca>
 8001362:	e00e      	b.n	8001382 <change_setup+0xde>
            case (0):
                display_message_left("select new","plant");
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <change_setup+0xf4>)
 8001366:	480d      	ldr	r0, [pc, #52]	@ (800139c <change_setup+0xf8>)
 8001368:	f7ff f9d2 	bl	8000710 <display_message_left>
                break;
 800136c:	e009      	b.n	8001382 <change_setup+0xde>
            case (1):
                display_message_left("recalibrate","moisture");
 800136e:	490c      	ldr	r1, [pc, #48]	@ (80013a0 <change_setup+0xfc>)
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <change_setup+0x100>)
 8001372:	f7ff f9cd 	bl	8000710 <display_message_left>
                break;
 8001376:	e004      	b.n	8001382 <change_setup+0xde>
            case (2):
                display_message_left("reset pot","depth");
 8001378:	490b      	ldr	r1, [pc, #44]	@ (80013a8 <change_setup+0x104>)
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <change_setup+0x108>)
 800137c:	f7ff f9c8 	bl	8000710 <display_message_left>
                break;
 8001380:	bf00      	nop
        if(*flags[2]){ // if "select" is pressed
 8001382:	e799      	b.n	80012b8 <change_setup+0x14>
        }
    }
    return 0;
};
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800138e:	b004      	add	sp, #16
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000098 	.word	0x20000098
 8001398:	080060e0 	.word	0x080060e0
 800139c:	080060e8 	.word	0x080060e8
 80013a0:	080060f4 	.word	0x080060f4
 80013a4:	08006100 	.word	0x08006100
 80013a8:	080060a4 	.word	0x080060a4
 80013ac:	0800610c 	.word	0x0800610c

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0a4      	sub	sp, #144	@ 0x90
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2268      	movs	r2, #104	@ 0x68
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f004 f967 	bl	80056ec <memset>
  if(hadc->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <HAL_ADC_MspInit+0xc4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d144      	bne.n	80014b2 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800142c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800142e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001432:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800143c:	2318      	movs	r3, #24
 800143e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001440:	2307      	movs	r3, #7
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800144c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4618      	mov	r0, r3
 8001458:	f003 f902 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001462:	f7ff fcf9 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 800146c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_ADC_MspInit+0xc8>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001496:	230f      	movs	r3, #15
 8001498:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800149a:	230b      	movs	r3, #11
 800149c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_ADC_MspInit+0xcc>)
 80014ae:	f001 fc63 	bl	8002d78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014b2:	bf00      	nop
 80014b4:	3790      	adds	r7, #144	@ 0x90
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	50040000 	.word	0x50040000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a6      	sub	sp, #152	@ 0x98
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2268      	movs	r2, #104	@ 0x68
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 f8ff 	bl	80056ec <memset>
  if(hi2c->Instance==I2C3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a54      	ldr	r2, [pc, #336]	@ (8001644 <HAL_I2C_MspInit+0x17c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d15e      	bne.n	80015b6 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014fe:	2300      	movs	r3, #0
 8001500:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f8aa 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001512:	f7ff fca1 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b4c      	ldr	r3, [pc, #304]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b49      	ldr	r3, [pc, #292]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a45      	ldr	r2, [pc, #276]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b43      	ldr	r3, [pc, #268]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154c:	2312      	movs	r3, #18
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800155e:	2304      	movs	r3, #4
 8001560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f001 fc03 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001572:	2310      	movs	r3, #16
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800158a:	2304      	movs	r3, #4
 800158c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001594:	4619      	mov	r1, r3
 8001596:	482d      	ldr	r0, [pc, #180]	@ (800164c <HAL_I2C_MspInit+0x184>)
 8001598:	f001 fbee 	bl	8002d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800159c:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 80015a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015b4:	e041      	b.n	800163a <HAL_I2C_MspInit+0x172>
  else if(hi2c->Instance==I2C4)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a25      	ldr	r2, [pc, #148]	@ (8001650 <HAL_I2C_MspInit+0x188>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d13c      	bne.n	800163a <HAL_I2C_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f846 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0x116>
      Error_Handler();
 80015da:	f7ff fc3d 	bl	8000e58 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	@ (800164c <HAL_I2C_MspInit+0x184>)
 800161e:	f001 fbab 	bl	8002d78 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_I2C_MspInit+0x180>)
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
}
 800163a:	bf00      	nop
 800163c:	3798      	adds	r7, #152	@ 0x98
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40005c00 	.word	0x40005c00
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400
 8001650:	40008400 	.word	0x40008400

08001654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09c      	sub	sp, #112	@ 0x70
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2268      	movs	r2, #104	@ 0x68
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f004 f841 	bl	80056ec <memset>
  if(hrtc->Instance==RTC)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <HAL_RTC_MspInit+0x68>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d11f      	bne.n	80016b4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800167a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f002 ffeb 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001690:	f7ff fbe2 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_RTC_MspInit+0x6c>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	4a09      	ldr	r2, [pc, #36]	@ (80016c0 <HAL_RTC_MspInit+0x6c>)
 800169c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 14, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	210e      	movs	r1, #14
 80016a8:	2029      	movs	r0, #41	@ 0x29
 80016aa:	f001 fb2e 	bl	8002d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016ae:	2029      	movs	r0, #41	@ 0x29
 80016b0:	f001 fb47 	bl	8002d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80016b4:	bf00      	nop
 80016b6:	3770      	adds	r7, #112	@ 0x70
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40002800 	.word	0x40002800
 80016c0:	40021000 	.word	0x40021000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f935 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001726:	2002      	movs	r0, #2
 8001728:	f001 fcb8 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001734:	2004      	movs	r0, #4
 8001736:	f001 fcb1 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001742:	2040      	movs	r0, #64	@ 0x40
 8001744:	f001 fcaa 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001750:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001754:	f001 fca2 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <RTC_Alarm_IRQHandler+0x10>)
 8001762:	f003 fe83 	bl	800546c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000254 	.word	0x20000254

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f003 ffac 	bl	80056fc <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200002a0 	.word	0x200002a0
 80017d8:	200003f0 	.word	0x200003f0

080017dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <_write_register>:
#define REG_POWER_SAVING_PSM_2  (0x01 << 1)
#define REG_POWER_SAVING_PSM_3  (0x02 << 1)
#define REG_POWER_SAVING_PSM_4  (0x03 << 1)
#define REG_POWER_SAVING_ENABLE  0x01

static uint32_t _write_register(veml7700 *veml, uint8_t reg, uint16_t value){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	4613      	mov	r3, r2
 800180e:	803b      	strh	r3, [r7, #0]
  uint8_t payload[3] = {reg, value & 0xff, value >> 8};
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	733b      	strb	r3, [r7, #12]
 8001814:	883b      	ldrh	r3, [r7, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	737b      	strb	r3, [r7, #13]
 800181a:	883b      	ldrh	r3, [r7, #0]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	73bb      	strb	r3, [r7, #14]

  return HAL_I2C_Master_Transmit(veml->i2c, veml->write_addr, &payload[0], 3, 500);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	795b      	ldrb	r3, [r3, #5]
 800182c:	4619      	mov	r1, r3
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2303      	movs	r3, #3
 800183a:	f001 fce3 	bl	8003204 <HAL_I2C_Master_Transmit>
 800183e:	4603      	mov	r3, r0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <veml7700_init>:
    return 0;
  }
  return (payload[1] << 8) | payload[0];
}

uint32_t veml7700_init(veml7700 *veml, I2C_HandleTypeDef *i2c, uint8_t addr){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	4613      	mov	r3, r2
 8001854:	71fb      	strb	r3, [r7, #7]
  veml->read_addr  = (addr << 1) | 0x01;
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	b25b      	sxtb	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	711a      	strb	r2, [r3, #4]
  veml->write_addr = (addr << 1);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	715a      	strb	r2, [r3, #5]
  veml->i2c        = i2c;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	601a      	str	r2, [r3, #0]

  // Reset VEML configuration (in order to check device)
  return _write_register(veml, REG_ALS_CONF, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff ffbf 	bl	8001800 <_write_register>
 8001882:	4603      	mov	r3, r0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001890:	f7ff ffa4 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <LoopForever+0xe>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <LoopForever+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f003 ff25 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018be:	f7fe ff43 	bl	8000748 <main>

080018c2 <LoopForever>:

LoopForever:
    b LoopForever
 80018c2:	e7fe      	b.n	80018c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80018d0:	0800619c 	.word	0x0800619c
  ldr r2, =_sbss
 80018d4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80018d8:	200003f0 	.word	0x200003f0

080018dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC1_IRQHandler>

080018de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f001 fa03 	bl	8002cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ee:	200f      	movs	r0, #15
 80018f0:	f000 f80e 	bl	8001910 <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	e001      	b.n	8001904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001900:	f7ff fd56 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001904:	79fb      	ldrb	r3, [r7, #7]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_InitTick+0x6c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001924:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_InitTick+0x70>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_InitTick+0x6c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fa0f 	bl	8002d5e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d809      	bhi.n	8001960 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f001 f9d9 	bl	8002d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001958:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_InitTick+0x74>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e007      	b.n	8001970 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e004      	b.n	8001970 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e001      	b.n	8001970 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200000b4 	.word	0x200000b4
 8001980:	200000ac 	.word	0x200000ac
 8001984:	200000b0 	.word	0x200000b0

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000b4 	.word	0x200000b4
 80019ac:	200002a4 	.word	0x200002a4

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200002a4 	.word	0x200002a4

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000b4 	.word	0x200000b4

08001a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3360      	adds	r3, #96	@ 0x60
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <LL_ADC_SetOffset+0x44>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	03fff000 	.word	0x03fff000

08001ac0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3360      	adds	r3, #96	@ 0x60
 8001ace:	461a      	mov	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3360      	adds	r3, #96	@ 0x60
 8001afc:	461a      	mov	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b16:	bf00      	nop
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	615a      	str	r2, [r3, #20]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b087      	sub	sp, #28
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3330      	adds	r3, #48	@ 0x30
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	211f      	movs	r1, #31
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	f003 011f 	and.w	r1, r3, #31
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b087      	sub	sp, #28
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	0e5b      	lsrs	r3, r3, #25
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0d1b      	lsrs	r3, r3, #20
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2107      	movs	r1, #7
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0d1b      	lsrs	r3, r3, #20
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0318 	and.w	r3, r3, #24
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c40:	40d9      	lsrs	r1, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	400b      	ands	r3, r1
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	0007ffff 	.word	0x0007ffff

08001c64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6093      	str	r3, [r2, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c9c:	d101      	bne.n	8001ca2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cec:	d101      	bne.n	8001cf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_IsEnabled+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_IsEnabled+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d62:	f043 0204 	orr.w	r2, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d101      	bne.n	8001db4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e129      	b.n	8002032 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fb03 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff3f 	bl	8001c88 <LL_ADC_IsDeepPowerDownEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff25 	bl	8001c64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff5a 	bl	8001cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d115      	bne.n	8001e56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff3e 	bl	8001cb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e34:	4b81      	ldr	r3, [pc, #516]	@ (800203c <HAL_ADC_Init+0x278>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	4a81      	ldr	r2, [pc, #516]	@ (8002040 <HAL_ADC_Init+0x27c>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f9      	bne.n	8001e4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff3c 	bl	8001cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff75 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80c2 	bne.w	8002020 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 80be 	bne.w	8002020 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eac:	f043 0202 	orr.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff35 	bl	8001d28 <LL_ADC_IsEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ec4:	485f      	ldr	r0, [pc, #380]	@ (8002044 <HAL_ADC_Init+0x280>)
 8001ec6:	f7ff ff2f 	bl	8001d28 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	485c      	ldr	r0, [pc, #368]	@ (8002048 <HAL_ADC_Init+0x284>)
 8001ed8:	f7ff fd9a 	bl	8001a10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e5b      	ldrb	r3, [r3, #25]
 8001ee0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001eec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ef2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	045b      	lsls	r3, r3, #17
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_ADC_Init+0x288>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff25 	bl	8001d9c <LL_ADC_INJ_IsConversionOngoing>
 8001f52:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d140      	bne.n	8001fdc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13d      	bne.n	8001fdc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7e1b      	ldrb	r3, [r3, #24]
 8001f68:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f82:	f023 0306 	bic.w	r3, r3, #6
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d118      	bne.n	8001fcc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	e007      	b.n	8001fdc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10c      	bne.n	8001ffe <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f023 010f 	bic.w	r1, r3, #15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ffc:	e007      	b.n	800200e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 020f 	bic.w	r2, r2, #15
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	659a      	str	r2, [r3, #88]	@ 0x58
 800201e:	e007      	b.n	8002030 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002030:	7ffb      	ldrb	r3, [r7, #31]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200000ac 	.word	0x200000ac
 8002040:	053e2d63 	.word	0x053e2d63
 8002044:	50040000 	.word	0x50040000
 8002048:	50040300 	.word	0x50040300
 800204c:	fff0c007 	.word	0xfff0c007

08002050 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe8a 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d14f      	bne.n	8002108 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start+0x26>
 8002072:	2302      	movs	r3, #2
 8002074:	e04b      	b.n	800210e <HAL_ADC_Start+0xbe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fce2 	bl	8002a48 <ADC_Enable>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d137      	bne.n	80020fe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ae:	d106      	bne.n	80020be <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	f023 0206 	bic.w	r2, r3, #6
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	221c      	movs	r2, #28
 80020ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe29 	bl	8001d4e <LL_ADC_REG_StartConversion>
 80020fc:	e006      	b.n	800210c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002106:	e001      	b.n	800210c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d102      	bne.n	800212e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002128:	2308      	movs	r3, #8
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e010      	b.n	8002150 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e06f      	b.n	800222c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800214c:	2304      	movs	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002150:	f7ff fc2e 	bl	80019b0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002156:	e021      	b.n	800219c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d01d      	beq.n	800219c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002160:	f7ff fc26 	bl	80019b0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <HAL_ADC_PollForConversion+0x60>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d112      	bne.n	800219c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e047      	b.n	800222c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0d6      	beq.n	8002158 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fcc4 	bl	8001b48 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01c      	beq.n	8002200 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7e5b      	ldrb	r3, [r3, #25]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d111      	bne.n	8002200 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d104      	bne.n	8002218 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e008      	b.n	800222a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0b6      	sub	sp, #216	@ 0xd8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x22>
 800226e:	2302      	movs	r3, #2
 8002270:	e3d5      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x7ce>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fd79 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 83ba 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d824      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	3b02      	subs	r3, #2
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d81b      	bhi.n	80022de <HAL_ADC_ConfigChannel+0x8e>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <HAL_ADC_ConfigChannel+0x5c>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022c5 	.word	0x080022c5
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022d5 	.word	0x080022d5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022bc:	230c      	movs	r3, #12
 80022be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022c2:	e010      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022c4:	2312      	movs	r3, #18
 80022c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022ca:	e00c      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022cc:	2318      	movs	r3, #24
 80022ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022d2:	e008      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022dc:	e003      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022de:	2306      	movs	r3, #6
 80022e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022e4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022f4:	f7ff fc3b 	bl	8001b6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fd3a 	bl	8001d76 <LL_ADC_REG_IsConversionOngoing>
 8002302:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fd46 	bl	8001d9c <LL_ADC_INJ_IsConversionOngoing>
 8002310:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 81bf 	bne.w	800269c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800231e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 81ba 	bne.w	800269c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002330:	d10f      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	f7ff fc42 	bl	8001bc6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fbe9 	bl	8001b22 <LL_ADC_SetSamplingTimeCommonConfig>
 8002350:	e00e      	b.n	8002370 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fc31 	bl	8001bc6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbd9 	bl	8001b22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00a      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a2:	f7ff fb69 	bl	8001a78 <LL_ADC_SetOffset>
 80023a6:	e179      	b.n	800269c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fb86 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x184>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fb7b 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	e01e      	b.n	8002412 <HAL_ADC_ConfigChannel+0x1c2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb70 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_ConfigChannel+0x1da>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	e018      	b.n	800245c <HAL_ADC_ConfigChannel+0x20c>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800243e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e004      	b.n	800245c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800245c:	429a      	cmp	r2, r3
 800245e:	d106      	bne.n	800246e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb3f 	bl	8001aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb23 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_ADC_ConfigChannel+0x24a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb18 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	e01e      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x288>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fb0d 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80024cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2a0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	e018      	b.n	8002522 <HAL_ADC_ConfigChannel+0x2d2>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e004      	b.n	8002522 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fadc 	bl	8001aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2102      	movs	r1, #2
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fac0 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x310>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2102      	movs	r1, #2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fab5 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 021f 	and.w	r2, r3, #31
 800255e:	e01e      	b.n	800259e <HAL_ADC_ConfigChannel+0x34e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff faaa 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800257e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e004      	b.n	800259c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x366>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	e014      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x390>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e004      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80025d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2102      	movs	r1, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fa7d 	bl	8001aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2103      	movs	r1, #3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fa61 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_ADC_ConfigChannel+0x3ce>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2103      	movs	r1, #3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fa56 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	e017      	b.n	800264e <HAL_ADC_ConfigChannel+0x3fe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2103      	movs	r1, #3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fa4b 	bl	8001ac0 <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002638:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800263a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x416>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	e011      	b.n	800268a <HAL_ADC_ConfigChannel+0x43a>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002676:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800268a:	429a      	cmp	r2, r3
 800268c:	d106      	bne.n	800269c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	2103      	movs	r1, #3
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fa28 	bl	8001aec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb41 	bl	8001d28 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 813f 	bne.w	800292c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7ff faae 	bl	8001c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002900 <HAL_ADC_ConfigChannel+0x6b0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f040 8130 	bne.w	800292c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x4a4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e019      	b.n	8002728 <HAL_ADC_ConfigChannel+0x4d8>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e003      	b.n	8002718 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2b09      	cmp	r3, #9
 8002720:	bf94      	ite	ls
 8002722:	2301      	movls	r3, #1
 8002724:	2300      	movhi	r3, #0
 8002726:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002728:	2b00      	cmp	r3, #0
 800272a:	d079      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x4f8>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	3301      	adds	r3, #1
 8002740:	069b      	lsls	r3, r3, #26
 8002742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002746:	e015      	b.n	8002774 <HAL_ADC_ConfigChannel+0x524>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002758:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800275a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e003      	b.n	800276c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	069b      	lsls	r3, r3, #26
 8002770:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x544>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	3301      	adds	r3, #1
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	e017      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x574>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80027b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	ea42 0103 	orr.w	r1, r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x59a>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	051b      	lsls	r3, r3, #20
 80027e8:	e018      	b.n	800281c <HAL_ADC_ConfigChannel+0x5cc>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281c:	430b      	orrs	r3, r1
 800281e:	e080      	b.n	8002922 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x5ec>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	3301      	adds	r3, #1
 8002834:	069b      	lsls	r3, r3, #26
 8002836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283a:	e015      	b.n	8002868 <HAL_ADC_ConfigChannel+0x618>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x638>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	3301      	adds	r3, #1
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	e017      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x668>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	61bb      	str	r3, [r7, #24]
  return result;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x694>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	3301      	adds	r3, #1
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	3b1e      	subs	r3, #30
 80028dc:	051b      	lsls	r3, r3, #20
 80028de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	e01d      	b.n	8002920 <HAL_ADC_ConfigChannel+0x6d0>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	60fb      	str	r3, [r7, #12]
  return result;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e005      	b.n	800290c <HAL_ADC_ConfigChannel+0x6bc>
 8002900:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	3b1e      	subs	r3, #30
 800291a:	051b      	lsls	r3, r3, #20
 800291c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002920:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	4619      	mov	r1, r3
 8002928:	f7ff f94d 	bl	8001bc6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7d8>)
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d06c      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002938:	483c      	ldr	r0, [pc, #240]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7dc>)
 800293a:	f7ff f88f 	bl	8001a5c <LL_ADC_GetCommonPathInternalCh>
 800293e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3a      	ldr	r2, [pc, #232]	@ (8002a30 <HAL_ADC_ConfigChannel+0x7e0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d127      	bne.n	800299c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800294c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d121      	bne.n	800299c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a35      	ldr	r2, [pc, #212]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7e4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d157      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002966:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800296a:	4619      	mov	r1, r3
 800296c:	482f      	ldr	r0, [pc, #188]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7dc>)
 800296e:	f7ff f862 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002972:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <HAL_ADC_ConfigChannel+0x7e8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	4a30      	ldr	r2, [pc, #192]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7ec>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800298c:	e002      	b.n	8002994 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3b01      	subs	r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f9      	bne.n	800298e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800299a:	e03a      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a27      	ldr	r2, [pc, #156]	@ (8002a40 <HAL_ADC_ConfigChannel+0x7f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d113      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d12a      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c4:	4619      	mov	r1, r3
 80029c6:	4819      	ldr	r0, [pc, #100]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7dc>)
 80029c8:	f7ff f835 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029cc:	e021      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11c      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7e4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d111      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7dc>)
 80029fa:	f7ff f81c 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
 80029fe:	e008      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	37d8      	adds	r7, #216	@ 0xd8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	80080000 	.word	0x80080000
 8002a2c:	50040300 	.word	0x50040300
 8002a30:	c7520000 	.word	0xc7520000
 8002a34:	50040000 	.word	0x50040000
 8002a38:	200000ac 	.word	0x200000ac
 8002a3c:	053e2d63 	.word	0x053e2d63
 8002a40:	cb840000 	.word	0xcb840000
 8002a44:	80000001 	.word	0x80000001

08002a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f965 	bl	8001d28 <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d169      	bne.n	8002b38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <ADC_Enable+0xfc>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e055      	b.n	8002b3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f934 	bl	8001d00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a98:	482b      	ldr	r0, [pc, #172]	@ (8002b48 <ADC_Enable+0x100>)
 8002a9a:	f7fe ffdf 	bl	8001a5c <LL_ADC_GetCommonPathInternalCh>
 8002a9e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002aa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa8:	4b28      	ldr	r3, [pc, #160]	@ (8002b4c <ADC_Enable+0x104>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	4a28      	ldr	r2, [pc, #160]	@ (8002b50 <ADC_Enable+0x108>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ac2:	e002      	b.n	8002aca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe ff6e 	bl	80019b0 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad6:	e028      	b.n	8002b2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f923 	bl	8001d28 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f907 	bl	8001d00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af2:	f7fe ff5d 	bl	80019b0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d914      	bls.n	8002b2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d00d      	beq.n	8002b2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e007      	b.n	8002b3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d1cf      	bne.n	8002ad8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	8000003f 	.word	0x8000003f
 8002b48:	50040300 	.word	0x50040300
 8002b4c:	200000ac 	.word	0x200000ac
 8002b50:	053e2d63 	.word	0x053e2d63

08002b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0307 	and.w	r3, r3, #7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db0b      	blt.n	8002be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	4907      	ldr	r1, [pc, #28]	@ (8002bf0 <__NVIC_EnableIRQ+0x38>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2001      	movs	r0, #1
 8002bda:	fa00 f202 	lsl.w	r2, r0, r2
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	@ (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	@ 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc0:	d301      	bcc.n	8002cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00f      	b.n	8002ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <SysTick_Config+0x40>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cce:	210f      	movs	r1, #15
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	f7ff ff8e 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <SysTick_Config+0x40>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cde:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <SysTick_Config+0x40>)
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000e010 	.word	0xe000e010

08002cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff29 	bl	8002b54 <__NVIC_SetPriorityGrouping>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1c:	f7ff ff3e 	bl	8002b9c <__NVIC_GetPriorityGrouping>
 8002d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff ff8e 	bl	8002c48 <NVIC_EncodePriority>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff5d 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff31 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffa2 	bl	8002cb0 <SysTick_Config>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d86:	e154      	b.n	8003032 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8146 	beq.w	800302c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d005      	beq.n	8002db8 <HAL_GPIO_Init+0x40>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d017      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d123      	bne.n	8002eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	6939      	ldr	r1, [r7, #16]
 8002ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a0 	beq.w	800302c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eec:	4b58      	ldr	r3, [pc, #352]	@ (8003050 <HAL_GPIO_Init+0x2d8>)
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	4a57      	ldr	r2, [pc, #348]	@ (8003050 <HAL_GPIO_Init+0x2d8>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ef8:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_GPIO_Init+0x2d8>)
 8002efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f04:	4a53      	ldr	r2, [pc, #332]	@ (8003054 <HAL_GPIO_Init+0x2dc>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f2e:	d019      	beq.n	8002f64 <HAL_GPIO_Init+0x1ec>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a49      	ldr	r2, [pc, #292]	@ (8003058 <HAL_GPIO_Init+0x2e0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_GPIO_Init+0x1e8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a48      	ldr	r2, [pc, #288]	@ (800305c <HAL_GPIO_Init+0x2e4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00d      	beq.n	8002f5c <HAL_GPIO_Init+0x1e4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a47      	ldr	r2, [pc, #284]	@ (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <HAL_GPIO_Init+0x1e0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	@ (8003064 <HAL_GPIO_Init+0x2ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <HAL_GPIO_Init+0x1dc>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e008      	b.n	8002f66 <HAL_GPIO_Init+0x1ee>
 8002f54:	2307      	movs	r3, #7
 8002f56:	e006      	b.n	8002f66 <HAL_GPIO_Init+0x1ee>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e004      	b.n	8002f66 <HAL_GPIO_Init+0x1ee>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e002      	b.n	8002f66 <HAL_GPIO_Init+0x1ee>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_GPIO_Init+0x1ee>
 8002f64:	2300      	movs	r3, #0
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	f002 0203 	and.w	r2, r2, #3
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	4093      	lsls	r3, r2
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f76:	4937      	ldr	r1, [pc, #220]	@ (8003054 <HAL_GPIO_Init+0x2dc>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f84:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fae:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd2:	4a25      	ldr	r2, [pc, #148]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fd8:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003002:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003026:	4a10      	ldr	r2, [pc, #64]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f aea3 	bne.w	8002d88 <HAL_GPIO_Init+0x10>
  }
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	48000400 	.word	0x48000400
 800305c:	48000800 	.word	0x48000800
 8003060:	48000c00 	.word	0x48000c00
 8003064:	48001000 	.word	0x48001000
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	@ (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fe6e 	bl	8000d9c <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e08d      	b.n	80031fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe f9e8 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	@ 0x24
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800311c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800312c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e006      	b.n	8003154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d108      	bne.n	800316e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	e007      	b.n	800317e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800318c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
 8003214:	4613      	mov	r3, r2
 8003216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 80fd 	bne.w	8003420 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x30>
 8003230:	2302      	movs	r3, #2
 8003232:	e0f6      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323c:	f7fe fbb8 	bl	80019b0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f914 	bl	800347c <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e1      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	@ 0x21
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2210      	movs	r2, #16
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	893a      	ldrh	r2, [r7, #8]
 800327e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2bff      	cmp	r3, #255	@ 0xff
 800328e:	d906      	bls.n	800329e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	22ff      	movs	r2, #255	@ 0xff
 8003294:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003296:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e007      	b.n	80032ae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d024      	beq.n	8003300 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	4b4e      	ldr	r3, [pc, #312]	@ (800342c <HAL_I2C_Master_Transmit+0x228>)
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fa83 	bl	8003804 <I2C_TransferConfig>
 80032fe:	e066      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	4b48      	ldr	r3, [pc, #288]	@ (800342c <HAL_I2C_Master_Transmit+0x228>)
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fa78 	bl	8003804 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003314:	e05b      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f907 	bl	800352e <I2C_WaitOnTXISFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e07b      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d034      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x1ca>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d130      	bne.n	80033ce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	@ 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f880 	bl	800347c <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e04d      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2bff      	cmp	r3, #255	@ 0xff
 800338e:	d90e      	bls.n	80033ae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	22ff      	movs	r2, #255	@ 0xff
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	b2da      	uxtb	r2, r3
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa2c 	bl	8003804 <I2C_TransferConfig>
 80033ac:	e00f      	b.n	80033ce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	2300      	movs	r3, #0
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fa1b 	bl	8003804 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d19e      	bne.n	8003316 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	6a39      	ldr	r1, [r7, #32]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f8ed 	bl	80035bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01a      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <HAL_I2C_Master_Transmit+0x22c>)
 8003400:	400b      	ands	r3, r1
 8003402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	80002000 	.word	0x80002000
 8003430:	fe00e800 	.word	0xfe00e800

08003434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d103      	bne.n	8003452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d007      	beq.n	8003470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	619a      	str	r2, [r3, #24]
  }
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348c:	e03b      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	6839      	ldr	r1, [r7, #0]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8d6 	bl	8003644 <I2C_IsErrorOccurred>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e041      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d02d      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fa81 	bl	80019b0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d122      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d113      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0b4      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353a:	e033      	b.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f87f 	bl	8003644 <I2C_IsErrorOccurred>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e031      	b.n	80035b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d025      	beq.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7fe fa2a 	bl	80019b0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11a      	bne.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d013      	beq.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e007      	b.n	80035b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d1c4      	bne.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c8:	e02f      	b.n	800362a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f838 	bl	8003644 <I2C_IsErrorOccurred>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e02d      	b.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fe f9e7 	bl	80019b0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11a      	bne.n	800362a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d013      	beq.n	800362a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e007      	b.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d1c8      	bne.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	@ 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d068      	beq.n	8003742 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2210      	movs	r2, #16
 8003676:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003678:	e049      	b.n	800370e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d045      	beq.n	800370e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe f995 	bl	80019b0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_IsErrorOccurred+0x54>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13a      	bne.n	800370e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ba:	d121      	bne.n	8003700 <I2C_IsErrorOccurred+0xbc>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c2:	d01d      	beq.n	8003700 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d01a      	beq.n	8003700 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036da:	f7fe f969 	bl	80019b0 <HAL_GetTick>
 80036de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e0:	e00e      	b.n	8003700 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036e2:	f7fe f965 	bl	80019b0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b19      	cmp	r3, #25
 80036ee:	d907      	bls.n	8003700 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f043 0320 	orr.w	r3, r3, #32
 80036f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036fe:	e006      	b.n	800370e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d1e9      	bne.n	80036e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d003      	beq.n	8003724 <I2C_IsErrorOccurred+0xe0>
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0aa      	beq.n	800367a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003728:	2b00      	cmp	r3, #0
 800372a:	d103      	bne.n	8003734 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2220      	movs	r2, #32
 8003732:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003764:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003786:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80037b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01c      	beq.n	80037f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fe3b 	bl	8003434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <I2C_IsErrorOccurred+0x1bc>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3728      	adds	r7, #40	@ 0x28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	fe00e800 	.word	0xfe00e800

08003804 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	4613      	mov	r3, r2
 8003814:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800381c:	7a7b      	ldrb	r3, [r7, #9]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003824:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	4313      	orrs	r3, r2
 800382e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003832:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	0d5b      	lsrs	r3, r3, #21
 800383e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003842:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <I2C_TransferConfig+0x60>)
 8003844:	430b      	orrs	r3, r1
 8003846:	43db      	mvns	r3, r3
 8003848:	ea02 0103 	and.w	r1, r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	03ff63ff 	.word	0x03ff63ff

08003868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d138      	bne.n	80038f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003888:	2302      	movs	r3, #2
 800388a:	e032      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	@ 0x24
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	d139      	bne.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800391e:	2302      	movs	r3, #2
 8003920:	e033      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2224      	movs	r2, #36	@ 0x24
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003950:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800399c:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40007000 	.word	0x40007000

080039b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c2:	d130      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c4:	4b23      	ldr	r3, [pc, #140]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d0:	d038      	beq.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d2:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039da:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2232      	movs	r2, #50	@ 0x32
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0c9b      	lsrs	r3, r3, #18
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f8:	e002      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a00:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0c:	d102      	bne.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f2      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a14:	4b0f      	ldr	r3, [pc, #60]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a20:	d110      	bne.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e00f      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a32:	d007      	beq.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a34:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a3c:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40007000 	.word	0x40007000
 8003a58:	200000ac 	.word	0x200000ac
 8003a5c:	431bde83 	.word	0x431bde83

08003a60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f000 bc02 	b.w	8004278 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a74:	4b96      	ldr	r3, [pc, #600]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7e:	4b94      	ldr	r3, [pc, #592]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80e4 	beq.w	8003c5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <HAL_RCC_OscConfig+0x4c>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	f040 808b 	bne.w	8003bba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	f040 8087 	bne.w	8003bba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aac:	4b88      	ldr	r3, [pc, #544]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x64>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e3d9      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	4b81      	ldr	r3, [pc, #516]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_RCC_OscConfig+0x7e>
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003adc:	e005      	b.n	8003aea <HAL_RCC_OscConfig+0x8a>
 8003ade:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d223      	bcs.n	8003b36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fd54 	bl	80045a0 <RCC_SetFlashLatencyFromMSIRange>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e3ba      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b02:	4b73      	ldr	r3, [pc, #460]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a72      	ldr	r2, [pc, #456]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	f043 0308 	orr.w	r3, r3, #8
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b70      	ldr	r3, [pc, #448]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	496d      	ldr	r1, [pc, #436]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b20:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	4968      	ldr	r1, [pc, #416]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
 8003b34:	e025      	b.n	8003b82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b36:	4b66      	ldr	r3, [pc, #408]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a65      	ldr	r2, [pc, #404]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4960      	ldr	r1, [pc, #384]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b54:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	495b      	ldr	r1, [pc, #364]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fd14 	bl	80045a0 <RCC_SetFlashLatencyFromMSIRange>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e37a      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b82:	f000 fc81 	bl	8004488 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	4950      	ldr	r1, [pc, #320]	@ (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8003cd8 <HAL_RCC_OscConfig+0x278>)
 8003ba0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8003cdc <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd feb2 	bl	8001910 <HAL_InitTick>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d052      	beq.n	8003c5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	e35e      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d032      	beq.n	8003c28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a42      	ldr	r2, [pc, #264]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bce:	f7fd feef 	bl	80019b0 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd6:	f7fd feeb 	bl	80019b0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e347      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003be8:	4b39      	ldr	r3, [pc, #228]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	f043 0308 	orr.w	r3, r3, #8
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b33      	ldr	r3, [pc, #204]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4930      	ldr	r1, [pc, #192]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c12:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	492b      	ldr	r1, [pc, #172]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
 8003c26:	e01a      	b.n	8003c5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c28:	4b29      	ldr	r3, [pc, #164]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c34:	f7fd febc 	bl	80019b0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c3c:	f7fd feb8 	bl	80019b0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e314      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1dc>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d073      	beq.n	8003d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_OscConfig+0x21c>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d10e      	bne.n	8003c94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d063      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d15f      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e2f1      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x24c>
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e025      	b.n	8003cf8 <HAL_RCC_OscConfig+0x298>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb4:	d114      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x280>
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a02      	ldr	r2, [pc, #8]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e013      	b.n	8003cf8 <HAL_RCC_OscConfig+0x298>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08006118 	.word	0x08006118
 8003cd8:	200000ac 	.word	0x200000ac
 8003cdc:	200000b0 	.word	0x200000b0
 8003ce0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a9f      	ldr	r2, [pc, #636]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b9d      	ldr	r3, [pc, #628]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a9c      	ldr	r2, [pc, #624]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fe56 	bl	80019b0 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fe52 	bl	80019b0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	@ 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e2ae      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1a:	4b92      	ldr	r3, [pc, #584]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x2a8>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fe42 	bl	80019b0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fe3e 	bl	80019b0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e29a      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d42:	4b88      	ldr	r3, [pc, #544]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x2d0>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d060      	beq.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_OscConfig+0x310>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d119      	bne.n	8003d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d116      	bne.n	8003d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d70:	4b7c      	ldr	r3, [pc, #496]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_OscConfig+0x328>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e277      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	4973      	ldr	r1, [pc, #460]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d9c:	e040      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d023      	beq.n	8003dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da6:	4b6f      	ldr	r3, [pc, #444]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6e      	ldr	r2, [pc, #440]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fd fdfd 	bl	80019b0 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fd fdf9 	bl	80019b0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e255      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dcc:	4b65      	ldr	r3, [pc, #404]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b62      	ldr	r3, [pc, #392]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	495f      	ldr	r1, [pc, #380]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	e018      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fdd9 	bl	80019b0 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fd fdd5 	bl	80019b0 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e231      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e14:	4b53      	ldr	r3, [pc, #332]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01c      	beq.n	8003e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e34:	4b4b      	ldr	r3, [pc, #300]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd fdb4 	bl	80019b0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fd fdb0 	bl	80019b0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e20c      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e5e:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ef      	beq.n	8003e4c <HAL_RCC_OscConfig+0x3ec>
 8003e6c:	e01b      	b.n	8003ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e74:	4a3b      	ldr	r2, [pc, #236]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fd97 	bl	80019b0 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fd fd93 	bl	80019b0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1ef      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e98:	4b32      	ldr	r3, [pc, #200]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ef      	bne.n	8003e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a6 	beq.w	8004000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	4a26      	ldr	r2, [pc, #152]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed0:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003edc:	2301      	movs	r3, #1
 8003ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee0:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <HAL_RCC_OscConfig+0x508>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d118      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eec:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <HAL_RCC_OscConfig+0x508>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_RCC_OscConfig+0x508>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef8:	f7fd fd5a 	bl	80019b0 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f00:	f7fd fd56 	bl	80019b0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1b2      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f12:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <HAL_RCC_OscConfig+0x508>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d108      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4d8>
 8003f26:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f36:	e029      	b.n	8003f8c <HAL_RCC_OscConfig+0x52c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d115      	bne.n	8003f6c <HAL_RCC_OscConfig+0x50c>
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	4a07      	ldr	r2, [pc, #28]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f50:	4b04      	ldr	r3, [pc, #16]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	4a03      	ldr	r2, [pc, #12]	@ (8003f64 <HAL_RCC_OscConfig+0x504>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f60:	e014      	b.n	8003f8c <HAL_RCC_OscConfig+0x52c>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	4a99      	ldr	r2, [pc, #612]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f7c:	4b96      	ldr	r3, [pc, #600]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	4a95      	ldr	r2, [pc, #596]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd fd0c 	bl	80019b0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fd fd08 	bl	80019b0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e162      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b89      	ldr	r3, [pc, #548]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCC_OscConfig+0x53c>
 8003fc0:	e015      	b.n	8003fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fcf5 	bl	80019b0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd fcf1 	bl	80019b0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e14b      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ed      	bne.n	8003fca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b78      	ldr	r3, [pc, #480]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a77      	ldr	r2, [pc, #476]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d03c      	beq.n	8004086 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004014:	4b70      	ldr	r3, [pc, #448]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401a:	4a6f      	ldr	r2, [pc, #444]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd fcc4 	bl	80019b0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402c:	f7fd fcc0 	bl	80019b0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e11c      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403e:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ef      	beq.n	800402c <HAL_RCC_OscConfig+0x5cc>
 800404c:	e01b      	b.n	8004086 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800404e:	4b62      	ldr	r3, [pc, #392]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004054:	4a60      	ldr	r2, [pc, #384]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fd fca7 	bl	80019b0 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004066:	f7fd fca3 	bl	80019b0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0ff      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004078:	4b57      	ldr	r3, [pc, #348]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 800407a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ef      	bne.n	8004066 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80f3 	beq.w	8004276 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	2b02      	cmp	r3, #2
 8004096:	f040 80c9 	bne.w	800422c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800409a:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0203 	and.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d12c      	bne.n	8004108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	3b01      	subs	r3, #1
 80040ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d123      	bne.n	8004108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d11b      	bne.n	8004108 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d113      	bne.n	8004108 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d109      	bne.n	8004108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d06b      	beq.n	80041e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d062      	beq.n	80041d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800410e:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0ac      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800411e:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004128:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800412a:	f7fd fc41 	bl	80019b0 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004132:	f7fd fc3d 	bl	80019b0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e099      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	4b21      	ldr	r3, [pc, #132]	@ (80041dc <HAL_RCC_OscConfig+0x77c>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004160:	3a01      	subs	r2, #1
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800416a:	0212      	lsls	r2, r2, #8
 800416c:	4311      	orrs	r1, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004172:	0852      	lsrs	r2, r2, #1
 8004174:	3a01      	subs	r2, #1
 8004176:	0552      	lsls	r2, r2, #21
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800417e:	0852      	lsrs	r2, r2, #1
 8004180:	3a01      	subs	r2, #1
 8004182:	0652      	lsls	r2, r2, #25
 8004184:	4311      	orrs	r1, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800418a:	06d2      	lsls	r2, r2, #27
 800418c:	430a      	orrs	r2, r1
 800418e:	4912      	ldr	r1, [pc, #72]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004190:	4313      	orrs	r3, r2
 8004192:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0f      	ldr	r2, [pc, #60]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 800419a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a0c      	ldr	r2, [pc, #48]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 80041a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ac:	f7fd fc00 	bl	80019b0 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fbfc 	bl	80019b0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e058      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041d2:	e050      	b.n	8004276 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04f      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
 80041d8:	40021000 	.word	0x40021000
 80041dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e0:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d144      	bne.n	8004276 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041ec:	4b24      	ldr	r3, [pc, #144]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 80041f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f8:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004202:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004204:	f7fd fbd4 	bl	80019b0 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fd fbd0 	bl	80019b0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e02c      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	4b18      	ldr	r3, [pc, #96]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x7ac>
 800422a:	e024      	b.n	8004276 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d01f      	beq.n	8004272 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 8004238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fbb7 	bl	80019b0 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd fbb3 	bl	80019b0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e00f      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	4905      	ldr	r1, [pc, #20]	@ (8004280 <HAL_RCC_OscConfig+0x820>)
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCC_OscConfig+0x824>)
 800426c:	4013      	ands	r3, r2
 800426e:	60cb      	str	r3, [r1, #12]
 8004270:	e001      	b.n	8004276 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	feeefffc 	.word	0xfeeefffc

08004288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0e7      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b75      	ldr	r3, [pc, #468]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b72      	ldr	r3, [pc, #456]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	4970      	ldr	r1, [pc, #448]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0cf      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	4b66      	ldr	r3, [pc, #408]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d908      	bls.n	80042fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4960      	ldr	r1, [pc, #384]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04c      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430e:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d121      	bne.n	800435e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0a6      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	4b54      	ldr	r3, [pc, #336]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d115      	bne.n	800435e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e09a      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800433e:	4b4e      	ldr	r3, [pc, #312]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e08e      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434e:	4b4a      	ldr	r3, [pc, #296]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e086      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800435e:	4b46      	ldr	r3, [pc, #280]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4943      	ldr	r1, [pc, #268]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fd fb1e 	bl	80019b0 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	e00a      	b.n	800438e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004378:	f7fd fb1a 	bl	80019b0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e06e      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b3a      	ldr	r3, [pc, #232]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 020c 	and.w	r2, r3, #12
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429a      	cmp	r2, r3
 800439e:	d1eb      	bne.n	8004378 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d208      	bcs.n	80043ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	492b      	ldr	r1, [pc, #172]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ce:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d210      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043dc:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 0207 	bic.w	r2, r3, #7
 80043e4:	4923      	ldr	r1, [pc, #140]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ec:	4b21      	ldr	r3, [pc, #132]	@ (8004474 <HAL_RCC_ClockConfig+0x1ec>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e036      	b.n	800446c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4918      	ldr	r1, [pc, #96]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004428:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4910      	ldr	r1, [pc, #64]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800443c:	f000 f824 	bl	8004488 <HAL_RCC_GetSysClockFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	490b      	ldr	r1, [pc, #44]	@ (800447c <HAL_RCC_ClockConfig+0x1f4>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800445a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800445c:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <HAL_RCC_ClockConfig+0x1fc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd fa55 	bl	8001910 <HAL_InitTick>
 8004466:	4603      	mov	r3, r0
 8004468:	72fb      	strb	r3, [r7, #11]

  return status;
 800446a:	7afb      	ldrb	r3, [r7, #11]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40022000 	.word	0x40022000
 8004478:	40021000 	.word	0x40021000
 800447c:	08006118 	.word	0x08006118
 8004480:	200000ac 	.word	0x200000ac
 8004484:	200000b0 	.word	0x200000b0

08004488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	@ 0x24
 800448c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004496:	4b3e      	ldr	r3, [pc, #248]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x34>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d121      	bne.n	80044fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d11e      	bne.n	80044fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044bc:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044c8:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e005      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d102      	bne.n	8004506 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x110>)
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	e004      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d101      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800450c:	4b23      	ldr	r3, [pc, #140]	@ (800459c <HAL_RCC_GetSysClockFreq+0x114>)
 800450e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d134      	bne.n	8004580 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004516:	4b1e      	ldr	r3, [pc, #120]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d003      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0xa6>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d003      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0xac>
 800452c:	e005      	b.n	800453a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800452e:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x110>)
 8004530:	617b      	str	r3, [r7, #20]
      break;
 8004532:	e005      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004534:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_RCC_GetSysClockFreq+0x114>)
 8004536:	617b      	str	r3, [r7, #20]
      break;
 8004538:	e002      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	617b      	str	r3, [r7, #20]
      break;
 800453e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	3301      	adds	r3, #1
 800454c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	fb03 f202 	mul.w	r2, r3, r2
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x108>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	0e5b      	lsrs	r3, r3, #25
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	3301      	adds	r3, #1
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004580:	69bb      	ldr	r3, [r7, #24]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	@ 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	08006128 	.word	0x08006128
 8004598:	00f42400 	.word	0x00f42400
 800459c:	007a1200 	.word	0x007a1200

080045a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b8:	f7ff f9ee 	bl	8003998 <HAL_PWREx_GetVoltageRange>
 80045bc:	6178      	str	r0, [r7, #20]
 80045be:	e014      	b.n	80045ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045c0:	4b25      	ldr	r3, [pc, #148]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c4:	4a24      	ldr	r2, [pc, #144]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80045cc:	4b22      	ldr	r3, [pc, #136]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d8:	f7ff f9de 	bl	8003998 <HAL_PWREx_GetVoltageRange>
 80045dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045de:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f0:	d10b      	bne.n	800460a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b80      	cmp	r3, #128	@ 0x80
 80045f6:	d919      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80045fc:	d902      	bls.n	8004604 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045fe:	2302      	movs	r3, #2
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e013      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004604:	2301      	movs	r3, #1
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e010      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b80      	cmp	r3, #128	@ 0x80
 800460e:	d902      	bls.n	8004616 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004610:	2303      	movs	r3, #3
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	e00a      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d102      	bne.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800461c:	2302      	movs	r3, #2
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e004      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b70      	cmp	r3, #112	@ 0x70
 8004626:	d101      	bne.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 0207 	bic.w	r2, r3, #7
 8004634:	4909      	ldr	r1, [pc, #36]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800463c:	4b07      	ldr	r3, [pc, #28]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	40022000 	.word	0x40022000

08004660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004668:	2300      	movs	r3, #0
 800466a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800466c:	2300      	movs	r3, #0
 800466e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004678:	2b00      	cmp	r3, #0
 800467a:	d031      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004680:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004684:	d01a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004686:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800468a:	d814      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004690:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004694:	d10f      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004696:	4b5d      	ldr	r3, [pc, #372]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4a5c      	ldr	r2, [pc, #368]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a2:	e00c      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fa44 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b4:	e003      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	74fb      	strb	r3, [r7, #19]
      break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80046bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c4:	4b51      	ldr	r3, [pc, #324]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d2:	494e      	ldr	r1, [pc, #312]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046da:	e001      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 809e 	beq.w	800482a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046f2:	4b46      	ldr	r3, [pc, #280]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b40      	ldr	r3, [pc, #256]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	4a3f      	ldr	r2, [pc, #252]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004712:	6593      	str	r3, [r2, #88]	@ 0x58
 8004714:	4b3d      	ldr	r3, [pc, #244]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004720:	2301      	movs	r3, #1
 8004722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b3a      	ldr	r3, [pc, #232]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a39      	ldr	r2, [pc, #228]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004730:	f7fd f93e 	bl	80019b0 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004736:	e009      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fd f93a 	bl	80019b0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d902      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	74fb      	strb	r3, [r7, #19]
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474c:	4b30      	ldr	r3, [pc, #192]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d15a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800475e:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01e      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	429a      	cmp	r2, r3
 8004778:	d019      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004784:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004786:	4b21      	ldr	r3, [pc, #132]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478c:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479c:	4a1b      	ldr	r2, [pc, #108]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a6:	4a19      	ldr	r2, [pc, #100]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f8fa 	bl	80019b0 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	e00b      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd f8f6 	bl	80019b0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d902      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	74fb      	strb	r3, [r7, #19]
            break;
 80047d6:	e006      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ec      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047e6:	7cfb      	ldrb	r3, [r7, #19]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047fa:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004802:	e009      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	74bb      	strb	r3, [r7, #18]
 8004808:	e006      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004818:	7c7b      	ldrb	r3, [r7, #17]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481e:	4b9e      	ldr	r3, [pc, #632]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	4a9d      	ldr	r2, [pc, #628]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004828:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004836:	4b98      	ldr	r3, [pc, #608]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f023 0203 	bic.w	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4994      	ldr	r1, [pc, #592]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004858:	4b8f      	ldr	r3, [pc, #572]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f023 020c 	bic.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	498c      	ldr	r1, [pc, #560]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487a:	4b87      	ldr	r3, [pc, #540]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	4983      	ldr	r1, [pc, #524]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800489c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	497b      	ldr	r1, [pc, #492]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048be:	4b76      	ldr	r3, [pc, #472]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	4972      	ldr	r1, [pc, #456]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048e0:	4b6d      	ldr	r3, [pc, #436]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	496a      	ldr	r1, [pc, #424]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004902:	4b65      	ldr	r3, [pc, #404]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004910:	4961      	ldr	r1, [pc, #388]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004924:	4b5c      	ldr	r3, [pc, #368]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004932:	4959      	ldr	r1, [pc, #356]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004946:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	4950      	ldr	r1, [pc, #320]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004968:	4b4b      	ldr	r3, [pc, #300]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004976:	4948      	ldr	r1, [pc, #288]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800498a:	4b43      	ldr	r3, [pc, #268]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800498c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	493f      	ldr	r1, [pc, #252]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d028      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	4937      	ldr	r1, [pc, #220]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ca:	d106      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049cc:	4b32      	ldr	r3, [pc, #200]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a31      	ldr	r2, [pc, #196]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d6:	60d3      	str	r3, [r2, #12]
 80049d8:	e011      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e2:	d10c      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f8a4 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d028      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a0a:	4b23      	ldr	r3, [pc, #140]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	491f      	ldr	r1, [pc, #124]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a34:	60d3      	str	r3, [r2, #12]
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f875 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a76:	4908      	ldr	r1, [pc, #32]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a86:	d109      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a88:	4b03      	ldr	r3, [pc, #12]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a02      	ldr	r2, [pc, #8]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a92:	60d3      	str	r3, [r2, #12]
 8004a94:	e014      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f843 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	4916      	ldr	r1, [pc, #88]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f820 	bl	8004b38 <RCCEx_PLLSAI1_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b12:	4b08      	ldr	r3, [pc, #32]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b20:	4904      	ldr	r1, [pc, #16]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000

08004b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b46:	4b74      	ldr	r3, [pc, #464]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b52:	4b71      	ldr	r3, [pc, #452]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0203 	and.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d10d      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
       ||
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
       ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d047      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
 8004b82:	e044      	b.n	8004c0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d018      	beq.n	8004bbe <RCCEx_PLLSAI1_Config+0x86>
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d825      	bhi.n	8004bdc <RCCEx_PLLSAI1_Config+0xa4>
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d002      	beq.n	8004b9a <RCCEx_PLLSAI1_Config+0x62>
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d009      	beq.n	8004bac <RCCEx_PLLSAI1_Config+0x74>
 8004b98:	e020      	b.n	8004bdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11d      	bne.n	8004be2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004baa:	e01a      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bac:	4b5a      	ldr	r3, [pc, #360]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d116      	bne.n	8004be6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bbc:	e013      	b.n	8004be6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bbe:	4b56      	ldr	r3, [pc, #344]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10f      	bne.n	8004bea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bca:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bda:	e006      	b.n	8004bea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e004      	b.n	8004bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bf2:	4b49      	ldr	r3, [pc, #292]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	430b      	orrs	r3, r1
 8004c08:	4943      	ldr	r1, [pc, #268]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d17c      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c14:	4b40      	ldr	r3, [pc, #256]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a3f      	ldr	r2, [pc, #252]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c20:	f7fc fec6 	bl	80019b0 <HAL_GetTick>
 8004c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c26:	e009      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c28:	f7fc fec2 	bl	80019b0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d902      	bls.n	8004c3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	73fb      	strb	r3, [r7, #15]
        break;
 8004c3a:	e005      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c3c:	4b36      	ldr	r3, [pc, #216]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ef      	bne.n	8004c28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d15f      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d110      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c54:	4b30      	ldr	r3, [pc, #192]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004c5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6892      	ldr	r2, [r2, #8]
 8004c64:	0211      	lsls	r1, r2, #8
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68d2      	ldr	r2, [r2, #12]
 8004c6a:	06d2      	lsls	r2, r2, #27
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	492a      	ldr	r1, [pc, #168]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]
 8004c74:	e027      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d112      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c7c:	4b26      	ldr	r3, [pc, #152]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6892      	ldr	r2, [r2, #8]
 8004c8c:	0211      	lsls	r1, r2, #8
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6912      	ldr	r2, [r2, #16]
 8004c92:	0852      	lsrs	r2, r2, #1
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0552      	lsls	r2, r2, #21
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	491f      	ldr	r1, [pc, #124]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
 8004ca0:	e011      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004caa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	0211      	lsls	r1, r2, #8
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6952      	ldr	r2, [r2, #20]
 8004cb8:	0852      	lsrs	r2, r2, #1
 8004cba:	3a01      	subs	r2, #1
 8004cbc:	0652      	lsls	r2, r2, #25
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	4915      	ldr	r1, [pc, #84]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cc6:	4b14      	ldr	r3, [pc, #80]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fc fe6d 	bl	80019b0 <HAL_GetTick>
 8004cd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cd8:	e009      	b.n	8004cee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cda:	f7fc fe69 	bl	80019b0 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d902      	bls.n	8004cee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	73fb      	strb	r3, [r7, #15]
          break;
 8004cec:	e005      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cee:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ef      	beq.n	8004cda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000

08004d1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d079      	beq.n	8004e22 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fc86 	bl	8001654 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d058      	beq.n	8004e10 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	22ca      	movs	r2, #202	@ 0xca
 8004d64:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2253      	movs	r2, #83	@ 0x53
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fbe6 	bl	8005540 <RTC_EnterInitMode>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d127      	bne.n	8004dce <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d90:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6899      	ldr	r1, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6919      	ldr	r1, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fbea 	bl	80055a8 <RTC_ExitInitMode>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d113      	bne.n	8004e06 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0203 	bic.w	r2, r2, #3
 8004dec:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	22ff      	movs	r2, #255	@ 0xff
 8004e0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e0e:	e001      	b.n	8004e14 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RTC_SetTime+0x1a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e08b      	b.n	8004f5e <HAL_RTC_SetTime+0x132>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	22ca      	movs	r2, #202	@ 0xca
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2253      	movs	r2, #83	@ 0x53
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fb6a 	bl	8005540 <RTC_EnterInitMode>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d163      	bne.n	8004f3e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d126      	bne.n	8004eca <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fbc5 	bl	8005624 <RTC_ByteToBcd2>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fbbe 	bl	8005624 <RTC_ByteToBcd2>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	789b      	ldrb	r3, [r3, #2]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fbb6 	bl	8005624 <RTC_ByteToBcd2>
 8004eb8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e018      	b.n	8004efc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ef0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	78db      	ldrb	r3, [r3, #3]
 8004ef6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6899      	ldr	r1, [r3, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb37 	bl	80055a8 <RTC_ExitInitMode>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	22ff      	movs	r2, #255	@ 0xff
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}

08004f66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f66:	b590      	push	{r4, r7, lr}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_RTC_SetDate+0x1a>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e075      	b.n	800506c <HAL_RTC_SetDate+0x106>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10e      	bne.n	8004fb4 <HAL_RTC_SetDate+0x4e>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	f023 0310 	bic.w	r3, r3, #16
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	330a      	adds	r3, #10
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb30 	bl	8005624 <RTC_ByteToBcd2>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fb29 	bl	8005624 <RTC_ByteToBcd2>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004fd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	789b      	ldrb	r3, [r3, #2]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb21 	bl	8005624 <RTC_ByteToBcd2>
 8004fe2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fe4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e00e      	b.n	8005012 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	78db      	ldrb	r3, [r3, #3]
 8004ff8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005000:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005006:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22ca      	movs	r2, #202	@ 0xca
 8005018:	625a      	str	r2, [r3, #36]	@ 0x24
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2253      	movs	r2, #83	@ 0x53
 8005020:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa8c 	bl	8005540 <RTC_EnterInitMode>
 8005028:	4603      	mov	r3, r0
 800502a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800503c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005040:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fab0 	bl	80055a8 <RTC_ExitInitMode>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	22ff      	movs	r2, #255	@ 0xff
 8005052:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
}
 800506c:	4618      	mov	r0, r3
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}

08005074 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b089      	sub	sp, #36	@ 0x24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_RTC_SetAlarm_IT+0x1a>
 800508a:	2302      	movs	r3, #2
 800508c:	e127      	b.n	80052de <HAL_RTC_SetAlarm_IT+0x26a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2202      	movs	r2, #2
 800509a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d137      	bne.n	8005114 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fab1 	bl	8005624 <RTC_ByteToBcd2>
 80050c2:	4603      	mov	r3, r0
 80050c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 faaa 	bl	8005624 <RTC_ByteToBcd2>
 80050d0:	4603      	mov	r3, r0
 80050d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	789b      	ldrb	r3, [r3, #2]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 faa2 	bl	8005624 <RTC_ByteToBcd2>
 80050e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	78db      	ldrb	r3, [r3, #3]
 80050ea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fa94 	bl	8005624 <RTC_ByteToBcd2>
 80050fc:	4603      	mov	r3, r0
 80050fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005100:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005108:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800510e:	4313      	orrs	r3, r2
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	e023      	b.n	800515c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005134:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800513a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	78db      	ldrb	r3, [r3, #3]
 8005140:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005142:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800514a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800514c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005152:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005158:	4313      	orrs	r3, r2
 800515a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	22ca      	movs	r2, #202	@ 0xca
 800516e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2253      	movs	r2, #83	@ 0x53
 8005176:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005180:	d14a      	bne.n	8005218 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005190:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80051a2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80051a4:	f7fc fc04 	bl	80019b0 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051aa:	e015      	b.n	80051d8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051ac:	f7fc fc00 	bl	80019b0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ba:	d90d      	bls.n	80051d8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	22ff      	movs	r2, #255	@ 0xff
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2203      	movs	r2, #3
 80051c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e082      	b.n	80052de <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0e2      	beq.n	80051ac <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005204:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	e049      	b.n	80052ac <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005226:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005238:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800523a:	f7fc fbb9 	bl	80019b0 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005240:	e015      	b.n	800526e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005242:	f7fc fbb5 	bl	80019b0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005250:	d90d      	bls.n	800526e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	22ff      	movs	r2, #255	@ 0xff
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e037      	b.n	80052de <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0e2      	beq.n	8005242 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0d      	ldr	r2, [pc, #52]	@ (80052e8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	@ (80052e8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052c2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	22ff      	movs	r2, #255	@ 0xff
 80052ca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3724      	adds	r7, #36	@ 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40010400 	.word	0x40010400

080052ec <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005300:	d143      	bne.n	800538a <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005308:	629a      	str	r2, [r3, #40]	@ 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005318:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800531c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	0c1b      	lsrs	r3, r3, #16
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	0d9b      	lsrs	r3, r3, #22
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	615a      	str	r2, [r3, #20]
 8005388:	e042      	b.n	8005410 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80053a4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	0d9b      	lsrs	r3, r3, #22
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d125      	bne.n	8005462 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f922 	bl	8005664 <RTC_Bcd2ToByte>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f919 	bl	8005664 <RTC_Bcd2ToByte>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f910 	bl	8005664 <RTC_Bcd2ToByte>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f906 	bl	8005664 <RTC_Bcd2ToByte>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005474:	4b1f      	ldr	r3, [pc, #124]	@ (80054f4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005476:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800547a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80054a8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb fcac 	bl	8000e08 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80054dc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8da 	bl	8005698 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40010400 	.word	0x40010400

080054f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0d      	ldr	r2, [pc, #52]	@ (800553c <HAL_RTC_WaitForSynchro+0x44>)
 8005506:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005508:	f7fc fa52 	bl	80019b0 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800550e:	e009      	b.n	8005524 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005510:	f7fc fa4e 	bl	80019b0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800551e:	d901      	bls.n	8005524 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e007      	b.n	8005534 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0003ff5f 	.word	0x0003ff5f

08005540 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d120      	bne.n	800559c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005564:	f7fc fa24 	bl	80019b0 <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800556a:	e00d      	b.n	8005588 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800556c:	f7fc fa20 	bl	80019b0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800557a:	d905      	bls.n	8005588 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2203      	movs	r2, #3
 8005584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <RTC_EnterInitMode+0x5c>
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d1e7      	bne.n	800556c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80055b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005620 <RTC_ExitInitMode+0x78>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <RTC_ExitInitMode+0x78>)
 80055ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055be:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80055c0:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <RTC_ExitInitMode+0x78>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10c      	bne.n	80055e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff93 	bl	80054f8 <HAL_RTC_WaitForSynchro>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01e      	beq.n	8005616 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2203      	movs	r2, #3
 80055dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e017      	b.n	8005616 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005620 <RTC_ExitInitMode+0x78>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005620 <RTC_ExitInitMode+0x78>)
 80055ec:	f023 0320 	bic.w	r3, r3, #32
 80055f0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ff80 	bl	80054f8 <HAL_RTC_WaitForSynchro>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800560a:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <RTC_ExitInitMode+0x78>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <RTC_ExitInitMode+0x78>)
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40002800 	.word	0x40002800

08005624 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005636:	e005      	b.n	8005644 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	3b0a      	subs	r3, #10
 8005642:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	2b09      	cmp	r3, #9
 8005648:	d8f6      	bhi.n	8005638 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	b2da      	uxtb	r2, r3
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	4313      	orrs	r3, r2
 8005656:	b2db      	uxtb	r3, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	4413      	add	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	b2da      	uxtb	r2, r3
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	4413      	add	r3, r2
 800568a:	b2db      	uxtb	r3, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <siprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b500      	push	{lr}
 80056b0:	b09c      	sub	sp, #112	@ 0x70
 80056b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	9006      	str	r0, [sp, #24]
 80056b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056bc:	4809      	ldr	r0, [pc, #36]	@ (80056e4 <siprintf+0x38>)
 80056be:	9107      	str	r1, [sp, #28]
 80056c0:	9104      	str	r1, [sp, #16]
 80056c2:	4909      	ldr	r1, [pc, #36]	@ (80056e8 <siprintf+0x3c>)
 80056c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	a902      	add	r1, sp, #8
 80056d0:	f000 f9a2 	bl	8005a18 <_svfiprintf_r>
 80056d4:	9b02      	ldr	r3, [sp, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	b01c      	add	sp, #112	@ 0x70
 80056dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e0:	b003      	add	sp, #12
 80056e2:	4770      	bx	lr
 80056e4:	200000b8 	.word	0x200000b8
 80056e8:	ffff0208 	.word	0xffff0208

080056ec <memset>:
 80056ec:	4402      	add	r2, r0
 80056ee:	4603      	mov	r3, r0
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	f803 1b01 	strb.w	r1, [r3], #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <__errno>:
 80056fc:	4b01      	ldr	r3, [pc, #4]	@ (8005704 <__errno+0x8>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	200000b8 	.word	0x200000b8

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	@ (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	@ (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	@ (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	@ (800574c <__libc_init_array+0x44>)
 800571c:	f000 fc66 	bl	8005fec <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08006194 	.word	0x08006194
 8005744:	08006194 	.word	0x08006194
 8005748:	08006194 	.word	0x08006194
 800574c:	08006198 	.word	0x08006198

08005750 <__retarget_lock_acquire_recursive>:
 8005750:	4770      	bx	lr

08005752 <__retarget_lock_release_recursive>:
 8005752:	4770      	bx	lr

08005754 <memcpy>:
 8005754:	440a      	add	r2, r1
 8005756:	4291      	cmp	r1, r2
 8005758:	f100 33ff 	add.w	r3, r0, #4294967295
 800575c:	d100      	bne.n	8005760 <memcpy+0xc>
 800575e:	4770      	bx	lr
 8005760:	b510      	push	{r4, lr}
 8005762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800576a:	4291      	cmp	r1, r2
 800576c:	d1f9      	bne.n	8005762 <memcpy+0xe>
 800576e:	bd10      	pop	{r4, pc}

08005770 <_free_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4605      	mov	r5, r0
 8005774:	2900      	cmp	r1, #0
 8005776:	d041      	beq.n	80057fc <_free_r+0x8c>
 8005778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577c:	1f0c      	subs	r4, r1, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfb8      	it	lt
 8005782:	18e4      	addlt	r4, r4, r3
 8005784:	f000 f8e0 	bl	8005948 <__malloc_lock>
 8005788:	4a1d      	ldr	r2, [pc, #116]	@ (8005800 <_free_r+0x90>)
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x2c>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	4628      	mov	r0, r5
 8005794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005798:	f000 b8dc 	b.w	8005954 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x42>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1809      	addeq	r1, r1, r0
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x1e>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x4c>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x42>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1850      	adds	r0, r2, r1
 80057c0:	42a0      	cmp	r0, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x6c>
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	4401      	add	r1, r0
 80057c8:	1850      	adds	r0, r2, r1
 80057ca:	4283      	cmp	r3, r0
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x22>
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	4408      	add	r0, r1
 80057d8:	6010      	str	r0, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x22>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x74>
 80057de:	230c      	movs	r3, #12
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x22>
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	1821      	adds	r1, r4, r0
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1809      	addeq	r1, r1, r0
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x22>
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	bf00      	nop
 8005800:	200003ec 	.word	0x200003ec

08005804 <sbrk_aligned>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4e0f      	ldr	r6, [pc, #60]	@ (8005844 <sbrk_aligned+0x40>)
 8005808:	460c      	mov	r4, r1
 800580a:	6831      	ldr	r1, [r6, #0]
 800580c:	4605      	mov	r5, r0
 800580e:	b911      	cbnz	r1, 8005816 <sbrk_aligned+0x12>
 8005810:	f000 fba6 	bl	8005f60 <_sbrk_r>
 8005814:	6030      	str	r0, [r6, #0]
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	f000 fba1 	bl	8005f60 <_sbrk_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d103      	bne.n	800582a <sbrk_aligned+0x26>
 8005822:	f04f 34ff 	mov.w	r4, #4294967295
 8005826:	4620      	mov	r0, r4
 8005828:	bd70      	pop	{r4, r5, r6, pc}
 800582a:	1cc4      	adds	r4, r0, #3
 800582c:	f024 0403 	bic.w	r4, r4, #3
 8005830:	42a0      	cmp	r0, r4
 8005832:	d0f8      	beq.n	8005826 <sbrk_aligned+0x22>
 8005834:	1a21      	subs	r1, r4, r0
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fb92 	bl	8005f60 <_sbrk_r>
 800583c:	3001      	adds	r0, #1
 800583e:	d1f2      	bne.n	8005826 <sbrk_aligned+0x22>
 8005840:	e7ef      	b.n	8005822 <sbrk_aligned+0x1e>
 8005842:	bf00      	nop
 8005844:	200003e8 	.word	0x200003e8

08005848 <_malloc_r>:
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584c:	1ccd      	adds	r5, r1, #3
 800584e:	f025 0503 	bic.w	r5, r5, #3
 8005852:	3508      	adds	r5, #8
 8005854:	2d0c      	cmp	r5, #12
 8005856:	bf38      	it	cc
 8005858:	250c      	movcc	r5, #12
 800585a:	2d00      	cmp	r5, #0
 800585c:	4606      	mov	r6, r0
 800585e:	db01      	blt.n	8005864 <_malloc_r+0x1c>
 8005860:	42a9      	cmp	r1, r5
 8005862:	d904      	bls.n	800586e <_malloc_r+0x26>
 8005864:	230c      	movs	r3, #12
 8005866:	6033      	str	r3, [r6, #0]
 8005868:	2000      	movs	r0, #0
 800586a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800586e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005944 <_malloc_r+0xfc>
 8005872:	f000 f869 	bl	8005948 <__malloc_lock>
 8005876:	f8d8 3000 	ldr.w	r3, [r8]
 800587a:	461c      	mov	r4, r3
 800587c:	bb44      	cbnz	r4, 80058d0 <_malloc_r+0x88>
 800587e:	4629      	mov	r1, r5
 8005880:	4630      	mov	r0, r6
 8005882:	f7ff ffbf 	bl	8005804 <sbrk_aligned>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	4604      	mov	r4, r0
 800588a:	d158      	bne.n	800593e <_malloc_r+0xf6>
 800588c:	f8d8 4000 	ldr.w	r4, [r8]
 8005890:	4627      	mov	r7, r4
 8005892:	2f00      	cmp	r7, #0
 8005894:	d143      	bne.n	800591e <_malloc_r+0xd6>
 8005896:	2c00      	cmp	r4, #0
 8005898:	d04b      	beq.n	8005932 <_malloc_r+0xea>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4639      	mov	r1, r7
 800589e:	4630      	mov	r0, r6
 80058a0:	eb04 0903 	add.w	r9, r4, r3
 80058a4:	f000 fb5c 	bl	8005f60 <_sbrk_r>
 80058a8:	4581      	cmp	r9, r0
 80058aa:	d142      	bne.n	8005932 <_malloc_r+0xea>
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	1a6d      	subs	r5, r5, r1
 80058b0:	4629      	mov	r1, r5
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7ff ffa6 	bl	8005804 <sbrk_aligned>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d03a      	beq.n	8005932 <_malloc_r+0xea>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	442b      	add	r3, r5
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	f8d8 3000 	ldr.w	r3, [r8]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	bb62      	cbnz	r2, 8005924 <_malloc_r+0xdc>
 80058ca:	f8c8 7000 	str.w	r7, [r8]
 80058ce:	e00f      	b.n	80058f0 <_malloc_r+0xa8>
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	1b52      	subs	r2, r2, r5
 80058d4:	d420      	bmi.n	8005918 <_malloc_r+0xd0>
 80058d6:	2a0b      	cmp	r2, #11
 80058d8:	d917      	bls.n	800590a <_malloc_r+0xc2>
 80058da:	1961      	adds	r1, r4, r5
 80058dc:	42a3      	cmp	r3, r4
 80058de:	6025      	str	r5, [r4, #0]
 80058e0:	bf18      	it	ne
 80058e2:	6059      	strne	r1, [r3, #4]
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	bf08      	it	eq
 80058e8:	f8c8 1000 	streq.w	r1, [r8]
 80058ec:	5162      	str	r2, [r4, r5]
 80058ee:	604b      	str	r3, [r1, #4]
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 f82f 	bl	8005954 <__malloc_unlock>
 80058f6:	f104 000b 	add.w	r0, r4, #11
 80058fa:	1d23      	adds	r3, r4, #4
 80058fc:	f020 0007 	bic.w	r0, r0, #7
 8005900:	1ac2      	subs	r2, r0, r3
 8005902:	bf1c      	itt	ne
 8005904:	1a1b      	subne	r3, r3, r0
 8005906:	50a3      	strne	r3, [r4, r2]
 8005908:	e7af      	b.n	800586a <_malloc_r+0x22>
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	42a3      	cmp	r3, r4
 800590e:	bf0c      	ite	eq
 8005910:	f8c8 2000 	streq.w	r2, [r8]
 8005914:	605a      	strne	r2, [r3, #4]
 8005916:	e7eb      	b.n	80058f0 <_malloc_r+0xa8>
 8005918:	4623      	mov	r3, r4
 800591a:	6864      	ldr	r4, [r4, #4]
 800591c:	e7ae      	b.n	800587c <_malloc_r+0x34>
 800591e:	463c      	mov	r4, r7
 8005920:	687f      	ldr	r7, [r7, #4]
 8005922:	e7b6      	b.n	8005892 <_malloc_r+0x4a>
 8005924:	461a      	mov	r2, r3
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	42a3      	cmp	r3, r4
 800592a:	d1fb      	bne.n	8005924 <_malloc_r+0xdc>
 800592c:	2300      	movs	r3, #0
 800592e:	6053      	str	r3, [r2, #4]
 8005930:	e7de      	b.n	80058f0 <_malloc_r+0xa8>
 8005932:	230c      	movs	r3, #12
 8005934:	6033      	str	r3, [r6, #0]
 8005936:	4630      	mov	r0, r6
 8005938:	f000 f80c 	bl	8005954 <__malloc_unlock>
 800593c:	e794      	b.n	8005868 <_malloc_r+0x20>
 800593e:	6005      	str	r5, [r0, #0]
 8005940:	e7d6      	b.n	80058f0 <_malloc_r+0xa8>
 8005942:	bf00      	nop
 8005944:	200003ec 	.word	0x200003ec

08005948 <__malloc_lock>:
 8005948:	4801      	ldr	r0, [pc, #4]	@ (8005950 <__malloc_lock+0x8>)
 800594a:	f7ff bf01 	b.w	8005750 <__retarget_lock_acquire_recursive>
 800594e:	bf00      	nop
 8005950:	200003e4 	.word	0x200003e4

08005954 <__malloc_unlock>:
 8005954:	4801      	ldr	r0, [pc, #4]	@ (800595c <__malloc_unlock+0x8>)
 8005956:	f7ff befc 	b.w	8005752 <__retarget_lock_release_recursive>
 800595a:	bf00      	nop
 800595c:	200003e4 	.word	0x200003e4

08005960 <__ssputs_r>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	688e      	ldr	r6, [r1, #8]
 8005966:	461f      	mov	r7, r3
 8005968:	42be      	cmp	r6, r7
 800596a:	680b      	ldr	r3, [r1, #0]
 800596c:	4682      	mov	sl, r0
 800596e:	460c      	mov	r4, r1
 8005970:	4690      	mov	r8, r2
 8005972:	d82d      	bhi.n	80059d0 <__ssputs_r+0x70>
 8005974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800597c:	d026      	beq.n	80059cc <__ssputs_r+0x6c>
 800597e:	6965      	ldr	r5, [r4, #20]
 8005980:	6909      	ldr	r1, [r1, #16]
 8005982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005986:	eba3 0901 	sub.w	r9, r3, r1
 800598a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800598e:	1c7b      	adds	r3, r7, #1
 8005990:	444b      	add	r3, r9
 8005992:	106d      	asrs	r5, r5, #1
 8005994:	429d      	cmp	r5, r3
 8005996:	bf38      	it	cc
 8005998:	461d      	movcc	r5, r3
 800599a:	0553      	lsls	r3, r2, #21
 800599c:	d527      	bpl.n	80059ee <__ssputs_r+0x8e>
 800599e:	4629      	mov	r1, r5
 80059a0:	f7ff ff52 	bl	8005848 <_malloc_r>
 80059a4:	4606      	mov	r6, r0
 80059a6:	b360      	cbz	r0, 8005a02 <__ssputs_r+0xa2>
 80059a8:	6921      	ldr	r1, [r4, #16]
 80059aa:	464a      	mov	r2, r9
 80059ac:	f7ff fed2 	bl	8005754 <memcpy>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	6126      	str	r6, [r4, #16]
 80059be:	6165      	str	r5, [r4, #20]
 80059c0:	444e      	add	r6, r9
 80059c2:	eba5 0509 	sub.w	r5, r5, r9
 80059c6:	6026      	str	r6, [r4, #0]
 80059c8:	60a5      	str	r5, [r4, #8]
 80059ca:	463e      	mov	r6, r7
 80059cc:	42be      	cmp	r6, r7
 80059ce:	d900      	bls.n	80059d2 <__ssputs_r+0x72>
 80059d0:	463e      	mov	r6, r7
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	4632      	mov	r2, r6
 80059d6:	4641      	mov	r1, r8
 80059d8:	f000 faa8 	bl	8005f2c <memmove>
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	1b9b      	subs	r3, r3, r6
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4433      	add	r3, r6
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	2000      	movs	r0, #0
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	462a      	mov	r2, r5
 80059f0:	f000 fac6 	bl	8005f80 <_realloc_r>
 80059f4:	4606      	mov	r6, r0
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1e0      	bne.n	80059bc <__ssputs_r+0x5c>
 80059fa:	6921      	ldr	r1, [r4, #16]
 80059fc:	4650      	mov	r0, sl
 80059fe:	f7ff feb7 	bl	8005770 <_free_r>
 8005a02:	230c      	movs	r3, #12
 8005a04:	f8ca 3000 	str.w	r3, [sl]
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e7e9      	b.n	80059ea <__ssputs_r+0x8a>
	...

08005a18 <_svfiprintf_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	4698      	mov	r8, r3
 8005a1e:	898b      	ldrh	r3, [r1, #12]
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	b09d      	sub	sp, #116	@ 0x74
 8005a24:	4607      	mov	r7, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	d510      	bpl.n	8005a4e <_svfiprintf_r+0x36>
 8005a2c:	690b      	ldr	r3, [r1, #16]
 8005a2e:	b973      	cbnz	r3, 8005a4e <_svfiprintf_r+0x36>
 8005a30:	2140      	movs	r1, #64	@ 0x40
 8005a32:	f7ff ff09 	bl	8005848 <_malloc_r>
 8005a36:	6028      	str	r0, [r5, #0]
 8005a38:	6128      	str	r0, [r5, #16]
 8005a3a:	b930      	cbnz	r0, 8005a4a <_svfiprintf_r+0x32>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	b01d      	add	sp, #116	@ 0x74
 8005a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4a:	2340      	movs	r3, #64	@ 0x40
 8005a4c:	616b      	str	r3, [r5, #20]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a52:	2320      	movs	r3, #32
 8005a54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a5c:	2330      	movs	r3, #48	@ 0x30
 8005a5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bfc <_svfiprintf_r+0x1e4>
 8005a62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a66:	f04f 0901 	mov.w	r9, #1
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a72:	b10a      	cbz	r2, 8005a78 <_svfiprintf_r+0x60>
 8005a74:	2a25      	cmp	r2, #37	@ 0x25
 8005a76:	d1f9      	bne.n	8005a6c <_svfiprintf_r+0x54>
 8005a78:	ebba 0b04 	subs.w	fp, sl, r4
 8005a7c:	d00b      	beq.n	8005a96 <_svfiprintf_r+0x7e>
 8005a7e:	465b      	mov	r3, fp
 8005a80:	4622      	mov	r2, r4
 8005a82:	4629      	mov	r1, r5
 8005a84:	4638      	mov	r0, r7
 8005a86:	f7ff ff6b 	bl	8005960 <__ssputs_r>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f000 80a7 	beq.w	8005bde <_svfiprintf_r+0x1c6>
 8005a90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a92:	445a      	add	r2, fp
 8005a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a96:	f89a 3000 	ldrb.w	r3, [sl]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 809f 	beq.w	8005bde <_svfiprintf_r+0x1c6>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aaa:	f10a 0a01 	add.w	sl, sl, #1
 8005aae:	9304      	str	r3, [sp, #16]
 8005ab0:	9307      	str	r3, [sp, #28]
 8005ab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ab8:	4654      	mov	r4, sl
 8005aba:	2205      	movs	r2, #5
 8005abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac0:	484e      	ldr	r0, [pc, #312]	@ (8005bfc <_svfiprintf_r+0x1e4>)
 8005ac2:	f7fa fb8d 	bl	80001e0 <memchr>
 8005ac6:	9a04      	ldr	r2, [sp, #16]
 8005ac8:	b9d8      	cbnz	r0, 8005b02 <_svfiprintf_r+0xea>
 8005aca:	06d0      	lsls	r0, r2, #27
 8005acc:	bf44      	itt	mi
 8005ace:	2320      	movmi	r3, #32
 8005ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ad4:	0711      	lsls	r1, r2, #28
 8005ad6:	bf44      	itt	mi
 8005ad8:	232b      	movmi	r3, #43	@ 0x2b
 8005ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ade:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ae4:	d015      	beq.n	8005b12 <_svfiprintf_r+0xfa>
 8005ae6:	9a07      	ldr	r2, [sp, #28]
 8005ae8:	4654      	mov	r4, sl
 8005aea:	2000      	movs	r0, #0
 8005aec:	f04f 0c0a 	mov.w	ip, #10
 8005af0:	4621      	mov	r1, r4
 8005af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005af6:	3b30      	subs	r3, #48	@ 0x30
 8005af8:	2b09      	cmp	r3, #9
 8005afa:	d94b      	bls.n	8005b94 <_svfiprintf_r+0x17c>
 8005afc:	b1b0      	cbz	r0, 8005b2c <_svfiprintf_r+0x114>
 8005afe:	9207      	str	r2, [sp, #28]
 8005b00:	e014      	b.n	8005b2c <_svfiprintf_r+0x114>
 8005b02:	eba0 0308 	sub.w	r3, r0, r8
 8005b06:	fa09 f303 	lsl.w	r3, r9, r3
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	46a2      	mov	sl, r4
 8005b10:	e7d2      	b.n	8005ab8 <_svfiprintf_r+0xa0>
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	1d19      	adds	r1, r3, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	9103      	str	r1, [sp, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bfbb      	ittet	lt
 8005b1e:	425b      	neglt	r3, r3
 8005b20:	f042 0202 	orrlt.w	r2, r2, #2
 8005b24:	9307      	strge	r3, [sp, #28]
 8005b26:	9307      	strlt	r3, [sp, #28]
 8005b28:	bfb8      	it	lt
 8005b2a:	9204      	strlt	r2, [sp, #16]
 8005b2c:	7823      	ldrb	r3, [r4, #0]
 8005b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b30:	d10a      	bne.n	8005b48 <_svfiprintf_r+0x130>
 8005b32:	7863      	ldrb	r3, [r4, #1]
 8005b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b36:	d132      	bne.n	8005b9e <_svfiprintf_r+0x186>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	9203      	str	r2, [sp, #12]
 8005b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b44:	3402      	adds	r4, #2
 8005b46:	9305      	str	r3, [sp, #20]
 8005b48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c0c <_svfiprintf_r+0x1f4>
 8005b4c:	7821      	ldrb	r1, [r4, #0]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	4650      	mov	r0, sl
 8005b52:	f7fa fb45 	bl	80001e0 <memchr>
 8005b56:	b138      	cbz	r0, 8005b68 <_svfiprintf_r+0x150>
 8005b58:	9b04      	ldr	r3, [sp, #16]
 8005b5a:	eba0 000a 	sub.w	r0, r0, sl
 8005b5e:	2240      	movs	r2, #64	@ 0x40
 8005b60:	4082      	lsls	r2, r0
 8005b62:	4313      	orrs	r3, r2
 8005b64:	3401      	adds	r4, #1
 8005b66:	9304      	str	r3, [sp, #16]
 8005b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6c:	4824      	ldr	r0, [pc, #144]	@ (8005c00 <_svfiprintf_r+0x1e8>)
 8005b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b72:	2206      	movs	r2, #6
 8005b74:	f7fa fb34 	bl	80001e0 <memchr>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d036      	beq.n	8005bea <_svfiprintf_r+0x1d2>
 8005b7c:	4b21      	ldr	r3, [pc, #132]	@ (8005c04 <_svfiprintf_r+0x1ec>)
 8005b7e:	bb1b      	cbnz	r3, 8005bc8 <_svfiprintf_r+0x1b0>
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	3307      	adds	r3, #7
 8005b84:	f023 0307 	bic.w	r3, r3, #7
 8005b88:	3308      	adds	r3, #8
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8e:	4433      	add	r3, r6
 8005b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b92:	e76a      	b.n	8005a6a <_svfiprintf_r+0x52>
 8005b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b98:	460c      	mov	r4, r1
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	e7a8      	b.n	8005af0 <_svfiprintf_r+0xd8>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f04f 0c0a 	mov.w	ip, #10
 8005baa:	4620      	mov	r0, r4
 8005bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bb0:	3a30      	subs	r2, #48	@ 0x30
 8005bb2:	2a09      	cmp	r2, #9
 8005bb4:	d903      	bls.n	8005bbe <_svfiprintf_r+0x1a6>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0c6      	beq.n	8005b48 <_svfiprintf_r+0x130>
 8005bba:	9105      	str	r1, [sp, #20]
 8005bbc:	e7c4      	b.n	8005b48 <_svfiprintf_r+0x130>
 8005bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e7f0      	b.n	8005baa <_svfiprintf_r+0x192>
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b0e      	ldr	r3, [pc, #56]	@ (8005c08 <_svfiprintf_r+0x1f0>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	f3af 8000 	nop.w
 8005bd8:	1c42      	adds	r2, r0, #1
 8005bda:	4606      	mov	r6, r0
 8005bdc:	d1d6      	bne.n	8005b8c <_svfiprintf_r+0x174>
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	065b      	lsls	r3, r3, #25
 8005be2:	f53f af2d 	bmi.w	8005a40 <_svfiprintf_r+0x28>
 8005be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005be8:	e72c      	b.n	8005a44 <_svfiprintf_r+0x2c>
 8005bea:	ab03      	add	r3, sp, #12
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	462a      	mov	r2, r5
 8005bf0:	4b05      	ldr	r3, [pc, #20]	@ (8005c08 <_svfiprintf_r+0x1f0>)
 8005bf2:	a904      	add	r1, sp, #16
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f000 f879 	bl	8005cec <_printf_i>
 8005bfa:	e7ed      	b.n	8005bd8 <_svfiprintf_r+0x1c0>
 8005bfc:	08006158 	.word	0x08006158
 8005c00:	08006162 	.word	0x08006162
 8005c04:	00000000 	.word	0x00000000
 8005c08:	08005961 	.word	0x08005961
 8005c0c:	0800615e 	.word	0x0800615e

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4698      	mov	r8, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc26      	bgt.n	8005ca6 <_printf_common+0x96>
 8005c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	3b00      	subs	r3, #0
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d42b      	bmi.n	8005cc0 <_printf_common+0xb0>
 8005c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c8      	blx	r9
 8005c72:	3001      	adds	r0, #1
 8005c74:	d01e      	beq.n	8005cb4 <_printf_common+0xa4>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	f003 0306 	and.w	r3, r3, #6
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	bf02      	ittt	eq
 8005c82:	68e5      	ldreq	r5, [r4, #12]
 8005c84:	6833      	ldreq	r3, [r6, #0]
 8005c86:	1aed      	subeq	r5, r5, r3
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	bf0c      	ite	eq
 8005c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c90:	2500      	movne	r5, #0
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bfc4      	itt	gt
 8005c96:	1a9b      	subgt	r3, r3, r2
 8005c98:	18ed      	addgt	r5, r5, r3
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	341a      	adds	r4, #26
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d11a      	bne.n	8005cd8 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e008      	b.n	8005cb8 <_printf_common+0xa8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4641      	mov	r1, r8
 8005cac:	4638      	mov	r0, r7
 8005cae:	47c8      	blx	r9
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xac>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c6      	b.n	8005c4e <_printf_common+0x3e>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	@ 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c7      	b.n	8005c68 <_printf_common+0x58>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4641      	mov	r1, r8
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c8      	blx	r9
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xa4>
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7d9      	b.n	8005c9e <_printf_common+0x8e>
	...

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cf4:	2f78      	cmp	r7, #120	@ 0x78
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	@ 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d2 	beq.w	8005eb2 <_printf_i+0x1c6>
 8005d0e:	2f58      	cmp	r7, #88	@ 0x58
 8005d10:	f000 80b9 	beq.w	8005e86 <_printf_i+0x19a>
 8005d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	@ (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005e99 	.word	0x08005e99
 8005d5c:	08005dc3 	.word	0x08005dc3
 8005d60:	08005e53 	.word	0x08005e53
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005ebb 	.word	0x08005ebb
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc3 	.word	0x08005dc3
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e5b 	.word	0x08005e5b
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6032      	str	r2, [r6, #0]
 8005d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e09d      	b.n	8005ed4 <_printf_i+0x1e8>
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1d19      	adds	r1, r3, #4
 8005d9e:	6031      	str	r1, [r6, #0]
 8005da0:	0606      	lsls	r6, r0, #24
 8005da2:	d501      	bpl.n	8005da8 <_printf_i+0xbc>
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	e003      	b.n	8005db0 <_printf_i+0xc4>
 8005da8:	0645      	lsls	r5, r0, #25
 8005daa:	d5fb      	bpl.n	8005da4 <_printf_i+0xb8>
 8005dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	da03      	bge.n	8005dbc <_printf_i+0xd0>
 8005db4:	232d      	movs	r3, #45	@ 0x2d
 8005db6:	426d      	negs	r5, r5
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dbc:	4859      	ldr	r0, [pc, #356]	@ (8005f24 <_printf_i+0x238>)
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	e011      	b.n	8005de6 <_printf_i+0xfa>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	0608      	lsls	r0, r1, #24
 8005dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dcc:	d402      	bmi.n	8005dd4 <_printf_i+0xe8>
 8005dce:	0649      	lsls	r1, r1, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b2ad      	uxthmi	r5, r5
 8005dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dd6:	4853      	ldr	r0, [pc, #332]	@ (8005f24 <_printf_i+0x238>)
 8005dd8:	6033      	str	r3, [r6, #0]
 8005dda:	bf14      	ite	ne
 8005ddc:	230a      	movne	r3, #10
 8005dde:	2308      	moveq	r3, #8
 8005de0:	2100      	movs	r1, #0
 8005de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005de6:	6866      	ldr	r6, [r4, #4]
 8005de8:	60a6      	str	r6, [r4, #8]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	bfa2      	ittt	ge
 8005dee:	6821      	ldrge	r1, [r4, #0]
 8005df0:	f021 0104 	bicge.w	r1, r1, #4
 8005df4:	6021      	strge	r1, [r4, #0]
 8005df6:	b90d      	cbnz	r5, 8005dfc <_printf_i+0x110>
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	d04b      	beq.n	8005e94 <_printf_i+0x1a8>
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e02:	fb03 5711 	mls	r7, r3, r1, r5
 8005e06:	5dc7      	ldrb	r7, [r0, r7]
 8005e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e0c:	462f      	mov	r7, r5
 8005e0e:	42bb      	cmp	r3, r7
 8005e10:	460d      	mov	r5, r1
 8005e12:	d9f4      	bls.n	8005dfe <_printf_i+0x112>
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d10b      	bne.n	8005e30 <_printf_i+0x144>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07df      	lsls	r7, r3, #31
 8005e1c:	d508      	bpl.n	8005e30 <_printf_i+0x144>
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6861      	ldr	r1, [r4, #4]
 8005e22:	4299      	cmp	r1, r3
 8005e24:	bfde      	ittt	le
 8005e26:	2330      	movle	r3, #48	@ 0x30
 8005e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e30:	1b92      	subs	r2, r2, r6
 8005e32:	6122      	str	r2, [r4, #16]
 8005e34:	f8cd a000 	str.w	sl, [sp]
 8005e38:	464b      	mov	r3, r9
 8005e3a:	aa03      	add	r2, sp, #12
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fee6 	bl	8005c10 <_printf_common>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d14a      	bne.n	8005ede <_printf_i+0x1f2>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	b004      	add	sp, #16
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f043 0320 	orr.w	r3, r3, #32
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	4833      	ldr	r0, [pc, #204]	@ (8005f28 <_printf_i+0x23c>)
 8005e5c:	2778      	movs	r7, #120	@ 0x78
 8005e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	6831      	ldr	r1, [r6, #0]
 8005e66:	061f      	lsls	r7, r3, #24
 8005e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e6c:	d402      	bmi.n	8005e74 <_printf_i+0x188>
 8005e6e:	065f      	lsls	r7, r3, #25
 8005e70:	bf48      	it	mi
 8005e72:	b2ad      	uxthmi	r5, r5
 8005e74:	6031      	str	r1, [r6, #0]
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	bf44      	itt	mi
 8005e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7e:	6023      	strmi	r3, [r4, #0]
 8005e80:	b11d      	cbz	r5, 8005e8a <_printf_i+0x19e>
 8005e82:	2310      	movs	r3, #16
 8005e84:	e7ac      	b.n	8005de0 <_printf_i+0xf4>
 8005e86:	4827      	ldr	r0, [pc, #156]	@ (8005f24 <_printf_i+0x238>)
 8005e88:	e7e9      	b.n	8005e5e <_printf_i+0x172>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f023 0320 	bic.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	e7f6      	b.n	8005e82 <_printf_i+0x196>
 8005e94:	4616      	mov	r6, r2
 8005e96:	e7bd      	b.n	8005e14 <_printf_i+0x128>
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	6961      	ldr	r1, [r4, #20]
 8005e9e:	1d18      	adds	r0, r3, #4
 8005ea0:	6030      	str	r0, [r6, #0]
 8005ea2:	062e      	lsls	r6, r5, #24
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0x1c0>
 8005ea8:	6019      	str	r1, [r3, #0]
 8005eaa:	e002      	b.n	8005eb2 <_printf_i+0x1c6>
 8005eac:	0668      	lsls	r0, r5, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0x1bc>
 8005eb0:	8019      	strh	r1, [r3, #0]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	4616      	mov	r6, r2
 8005eb8:	e7bc      	b.n	8005e34 <_printf_i+0x148>
 8005eba:	6833      	ldr	r3, [r6, #0]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	6032      	str	r2, [r6, #0]
 8005ec0:	681e      	ldr	r6, [r3, #0]
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7fa f98a 	bl	80001e0 <memchr>
 8005ecc:	b108      	cbz	r0, 8005ed2 <_printf_i+0x1e6>
 8005ece:	1b80      	subs	r0, r0, r6
 8005ed0:	6060      	str	r0, [r4, #4]
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005edc:	e7aa      	b.n	8005e34 <_printf_i+0x148>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0ad      	beq.n	8005e48 <_printf_i+0x15c>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	079b      	lsls	r3, r3, #30
 8005ef0:	d413      	bmi.n	8005f1a <_printf_i+0x22e>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e7a6      	b.n	8005e4c <_printf_i+0x160>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4632      	mov	r2, r6
 8005f02:	4649      	mov	r1, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	47d0      	blx	sl
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d09d      	beq.n	8005e48 <_printf_i+0x15c>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	9903      	ldr	r1, [sp, #12]
 8005f12:	1a5b      	subs	r3, r3, r1
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	dcf2      	bgt.n	8005efe <_printf_i+0x212>
 8005f18:	e7eb      	b.n	8005ef2 <_printf_i+0x206>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	f104 0619 	add.w	r6, r4, #25
 8005f20:	e7f5      	b.n	8005f0e <_printf_i+0x222>
 8005f22:	bf00      	nop
 8005f24:	08006169 	.word	0x08006169
 8005f28:	0800617a 	.word	0x0800617a

08005f2c <memmove>:
 8005f2c:	4288      	cmp	r0, r1
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	eb01 0402 	add.w	r4, r1, r2
 8005f34:	d902      	bls.n	8005f3c <memmove+0x10>
 8005f36:	4284      	cmp	r4, r0
 8005f38:	4623      	mov	r3, r4
 8005f3a:	d807      	bhi.n	8005f4c <memmove+0x20>
 8005f3c:	1e43      	subs	r3, r0, #1
 8005f3e:	42a1      	cmp	r1, r4
 8005f40:	d008      	beq.n	8005f54 <memmove+0x28>
 8005f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4a:	e7f8      	b.n	8005f3e <memmove+0x12>
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4601      	mov	r1, r0
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d100      	bne.n	8005f56 <memmove+0x2a>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f5e:	e7f7      	b.n	8005f50 <memmove+0x24>

08005f60 <_sbrk_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	@ (8005f7c <_sbrk_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fb fc00 	bl	8001770 <_sbrk>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_sbrk_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_sbrk_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	200003e0 	.word	0x200003e0

08005f80 <_realloc_r>:
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	4680      	mov	r8, r0
 8005f86:	4615      	mov	r5, r2
 8005f88:	460c      	mov	r4, r1
 8005f8a:	b921      	cbnz	r1, 8005f96 <_realloc_r+0x16>
 8005f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	4611      	mov	r1, r2
 8005f92:	f7ff bc59 	b.w	8005848 <_malloc_r>
 8005f96:	b92a      	cbnz	r2, 8005fa4 <_realloc_r+0x24>
 8005f98:	f7ff fbea 	bl	8005770 <_free_r>
 8005f9c:	2400      	movs	r4, #0
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	f000 f81a 	bl	8005fdc <_malloc_usable_size_r>
 8005fa8:	4285      	cmp	r5, r0
 8005faa:	4606      	mov	r6, r0
 8005fac:	d802      	bhi.n	8005fb4 <_realloc_r+0x34>
 8005fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fb2:	d8f4      	bhi.n	8005f9e <_realloc_r+0x1e>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fc46 	bl	8005848 <_malloc_r>
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0ec      	beq.n	8005f9c <_realloc_r+0x1c>
 8005fc2:	42b5      	cmp	r5, r6
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	bf28      	it	cs
 8005fca:	4632      	movcs	r2, r6
 8005fcc:	f7ff fbc2 	bl	8005754 <memcpy>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7ff fbcc 	bl	8005770 <_free_r>
 8005fd8:	463c      	mov	r4, r7
 8005fda:	e7e0      	b.n	8005f9e <_realloc_r+0x1e>

08005fdc <_malloc_usable_size_r>:
 8005fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe0:	1f18      	subs	r0, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bfbc      	itt	lt
 8005fe6:	580b      	ldrlt	r3, [r1, r0]
 8005fe8:	18c0      	addlt	r0, r0, r3
 8005fea:	4770      	bx	lr

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
