
soilsense_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080087b0  080087b0  000097b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a60  08008a60  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a68  08008a68  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a68  08008a68  00009a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a6c  08008a6c  00009a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08008a70  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000150  08008bc0  0000a150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08008bc0  0000a6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139ea  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b8  00000000  00000000  0001db6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00020f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d47  00000000  00000000  000220c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025833  00000000  00000000  00022e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159ba  00000000  00000000  00048642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4060  00000000  00000000  0005dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014205c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  001420a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0014722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008794 	.word	0x08008794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08008794 	.word	0x08008794

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <adc_channel_conv>:
 * Parameters:
 * - chan: channel number
 * - adc: initialized ADC
 * Returns: raw ADC reading from selected channel (0-4)
 */
uint16_t adc_channel_conv(uint8_t chan, ADC_HandleTypeDef adc){
 8000bb8:	b084      	sub	sp, #16
 8000bba:	b590      	push	{r4, r7, lr}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000bca:	4623      	mov	r3, r4
 8000bcc:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_raw;
	ADC_CH_Cfg.Rank =  1;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <adc_channel_conv+0x70>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <adc_channel_conv+0x70>)
 8000bd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000bda:	609a      	str	r2, [r3, #8]
	ADC_CH_Cfg.Channel = ADC_Channels[chan];        // select ADC channel
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <adc_channel_conv+0x74>)
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <adc_channel_conv+0x70>)
 8000be6:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&adc, &ADC_CH_Cfg);   	// configure selected channel
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <adc_channel_conv+0x70>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fe22 	bl	8003838 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&adc);                        	// start ADC conversion
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fd1d 	bl	8003638 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adc, 1);         	// poll ADC channel with 1ms timeout
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fd7a 	bl	80036fe <HAL_ADC_PollForConversion>
	adc_raw = HAL_ADC_GetValue(&adc);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fe04 	bl	800381c <HAL_ADC_GetValue>
 8000c14:	4603      	mov	r3, r0
 8000c16:	81fb      	strh	r3, [r7, #14]
	return adc_raw;
 8000c18:	89fb      	ldrh	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr
 8000c28:	2000016c 	.word	0x2000016c
 8000c2c:	20000000 	.word	0x20000000

08000c30 <convert_to_lux>:
 * - veml_raw: raw output of VEML7700 I2C read
 * Returns: lux value corresponding to input
 * Note: correction formula output doesn't match what is in datasheet but does match exactly with calculator
 * TODO: return to static
 */
uint32_t convert_to_lux(uint16_t veml_raw){
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
	uint32_t lux;
	// for ALS gain = 1/4 and integration time = 100ms
	lux = veml_raw * 0.2688;
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fc81 	bl	8000544 <__aeabi_i2d>
 8000c42:	a34b      	add	r3, pc, #300	@ (adr r3, 8000d70 <convert_to_lux+0x140>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	f7ff fce6 	bl	8000618 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff ff90 	bl	8000b78 <__aeabi_d2uiz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(lux>1000){ // correction formula
 8000c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c62:	d973      	bls.n	8000d4c <convert_to_lux+0x11c>
		double lux_a = pow(6.0135,-13);
 8000c64:	a344      	add	r3, pc, #272	@ (adr r3, 8000d78 <convert_to_lux+0x148>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double lux_b = pow(-9.3924,-9);
 8000c6e:	a344      	add	r3, pc, #272	@ (adr r3, 8000d80 <convert_to_lux+0x150>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double lux_c = pow(8.1488,-5);
 8000c78:	a343      	add	r3, pc, #268	@ (adr r3, 8000d88 <convert_to_lux+0x158>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double lux_d = 1.0023;
 8000c82:	a343      	add	r3, pc, #268	@ (adr r3, 8000d90 <convert_to_lux+0x160>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	e9c7 2302 	strd	r2, r3, [r7, #8]
		lux = lux_a*pow((double)lux,4) + lux_b*pow((double)lux,3) + lux_c*pow((double)lux,2) + lux_d*lux;
 8000c8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c8e:	f7ff fc49 	bl	8000524 <__aeabi_ui2d>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8000d58 <convert_to_lux+0x128>
 8000c9a:	ec43 2b10 	vmov	d0, r2, r3
 8000c9e:	f006 fe1b 	bl	80078d8 <pow>
 8000ca2:	ec51 0b10 	vmov	r0, r1, d0
 8000ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000caa:	f7ff fcb5 	bl	8000618 <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cb8:	f7ff fc34 	bl	8000524 <__aeabi_ui2d>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8000d60 <convert_to_lux+0x130>
 8000cc4:	ec43 2b10 	vmov	d0, r2, r3
 8000cc8:	f006 fe06 	bl	80078d8 <pow>
 8000ccc:	ec51 0b10 	vmov	r0, r1, d0
 8000cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	f7ff fae4 	bl	80002ac <__adddf3>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4614      	mov	r4, r2
 8000cea:	461d      	mov	r5, r3
 8000cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cee:	f7ff fc19 	bl	8000524 <__aeabi_ui2d>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8000d68 <convert_to_lux+0x138>
 8000cfa:	ec43 2b10 	vmov	d0, r2, r3
 8000cfe:	f006 fdeb 	bl	80078d8 <pow>
 8000d02:	ec51 0b10 	vmov	r0, r1, d0
 8000d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d0a:	f7ff fc85 	bl	8000618 <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4620      	mov	r0, r4
 8000d14:	4629      	mov	r1, r5
 8000d16:	f7ff fac9 	bl	80002ac <__adddf3>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4614      	mov	r4, r2
 8000d20:	461d      	mov	r5, r3
 8000d22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d24:	f7ff fbfe 	bl	8000524 <__aeabi_ui2d>
 8000d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d2c:	f7ff fc74 	bl	8000618 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4620      	mov	r0, r4
 8000d36:	4629      	mov	r1, r5
 8000d38:	f7ff fab8 	bl	80002ac <__adddf3>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff ff18 	bl	8000b78 <__aeabi_d2uiz>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	return lux;
 8000d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bdb0      	pop	{r4, r5, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	40100000 	.word	0x40100000
 8000d60:	00000000 	.word	0x00000000
 8000d64:	40080000 	.word	0x40080000
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	40000000 	.word	0x40000000
 8000d70:	ea4a8c15 	.word	0xea4a8c15
 8000d74:	3fd13404 	.word	0x3fd13404
 8000d78:	b2f699ff 	.word	0xb2f699ff
 8000d7c:	3dd470af 	.word	0x3dd470af
 8000d80:	2af63239 	.word	0x2af63239
 8000d84:	be1e339f 	.word	0xbe1e339f
 8000d88:	80fe91e8 	.word	0x80fe91e8
 8000d8c:	3efd2ee0 	.word	0x3efd2ee0
 8000d90:	b98c7e28 	.word	0xb98c7e28
 8000d94:	3ff0096b 	.word	0x3ff0096b

08000d98 <light_i2c_read>:
 * Parameters:
 * - veml: pointer to initialized veml
 * Returns: raw ADC reading
 * TODO: return to static
 */
uint16_t light_i2c_read(veml7700 *veml){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	uint16_t als_raw;
	veml7700_power_on(veml);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f002 f828 	bl	8002df6 <veml7700_power_on>
	// according to datasheet should need delay of 2.5 ms after wakeup
	HAL_Delay(1000); // experimentally: doesn't work at 112, does work at 115
 8000da6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000daa:	f002 f901 	bl	8002fb0 <HAL_Delay>
	als_raw = veml7700_read_als(veml);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f002 f853 	bl	8002e5a <veml7700_read_als>
 8000db4:	4603      	mov	r3, r0
 8000db6:	81fb      	strh	r3, [r7, #14]
	// turn off to save power
	veml7700_shutdown(veml);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f002 f835 	bl	8002e28 <veml7700_shutdown>
	return als_raw;
 8000dbe:	89fb      	ldrh	r3, [r7, #14]

}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <light_level_to_lux_high>:
/* Takes light level category of plant and outputs high end of light range
 * Parameters:
 * - light_level: light level parameter of user's selected plant
 * Returns: int corresponding to upper bound of acceptable lux range
 */
static uint32_t light_level_to_lux_high(uint8_t light_level){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    switch(light_level) {
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d815      	bhi.n	8000e06 <light_level_to_lux_high+0x3e>
 8000dda:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <light_level_to_lux_high+0x18>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df7 	.word	0x08000df7
 8000de8:	08000dfd 	.word	0x08000dfd
 8000dec:	08000e03 	.word	0x08000e03
        case 1:
            return 1076; // low light
 8000df0:	f240 4334 	movw	r3, #1076	@ 0x434
 8000df4:	e008      	b.n	8000e08 <light_level_to_lux_high+0x40>
            break;
        case 2:
            return 5382; // medium light
 8000df6:	f241 5306 	movw	r3, #5382	@ 0x1506
 8000dfa:	e005      	b.n	8000e08 <light_level_to_lux_high+0x40>
            break;
        case 3:
            return 10764; // bright indirect light
 8000dfc:	f642 230c 	movw	r3, #10764	@ 0x2a0c
 8000e00:	e002      	b.n	8000e08 <light_level_to_lux_high+0x40>
            break;
        case 4:
            return 99999; // direct light
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <light_level_to_lux_high+0x4c>)
 8000e04:	e000      	b.n	8000e08 <light_level_to_lux_high+0x40>
            break;
        default:
        	return 0;
 8000e06:	2300      	movs	r3, #0
        	break;
    }
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	0001869f 	.word	0x0001869f

08000e18 <light_level_to_lux_low>:
/* Takes light level category of plant and outputs low end of light range
 * Parameters:
 * - light_level: light level parameter of user's selected plant
 * Returns: int corresponding to lower bound of acceptable lux range
 */
static uint32_t light_level_to_lux_low(uint8_t light_level){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
    switch(light_level) {
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d816      	bhi.n	8000e58 <light_level_to_lux_low+0x40>
 8000e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e30 <light_level_to_lux_low+0x18>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e47 	.word	0x08000e47
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e53 	.word	0x08000e53
        case 1:
            return 270; // low light
 8000e40:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000e44:	e009      	b.n	8000e5a <light_level_to_lux_low+0x42>
            break;
        case 2:
            return 1076; // medium light
 8000e46:	f240 4334 	movw	r3, #1076	@ 0x434
 8000e4a:	e006      	b.n	8000e5a <light_level_to_lux_low+0x42>
            break;
        case 3:
            return 5382; // bright indirect light
 8000e4c:	f241 5306 	movw	r3, #5382	@ 0x1506
 8000e50:	e003      	b.n	8000e5a <light_level_to_lux_low+0x42>
            break;
        case 4:
            return 10750; // direct light
 8000e52:	f642 13fe 	movw	r3, #10750	@ 0x29fe
 8000e56:	e000      	b.n	8000e5a <light_level_to_lux_low+0x42>
            break;
        default:
        	return 0;
 8000e58:	2300      	movs	r3, #0
        	break;
    }
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <average_optimal_light_ints>:
}

/* Calculates average max light intensity in optimal light range
 * Returns: average max light intensity in optimal light range over last 3 days, in lux
 */
static uint32_t average_optimal_light_ints(){
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
	uint32_t sum, avg;
	sum = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<3; i++){
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	e009      	b.n	8000e8c <average_optimal_light_ints+0x24>
        sum += daily_max_ints[i];
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <average_optimal_light_ints+0x44>)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<3; i++){
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	ddf2      	ble.n	8000e78 <average_optimal_light_ints+0x10>
    }
    avg = sum/3;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <average_optimal_light_ints+0x48>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
    return avg;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	200003c4 	.word	0x200003c4
 8000eb0:	aaaaaaab 	.word	0xaaaaaaab

08000eb4 <get_light_value>:

/* Takes 5 readings of light meter 2 seconds apart and averages them to get value
 * Stores values in array light_int_24_hrs
 */
void get_light_value(veml7700 *veml){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    uint32_t sum, avg, lux;
    uint16_t reading;
    sum = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<5; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	e014      	b.n	8000ef0 <get_light_value+0x3c>
        reading = light_i2c_read(veml);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff66 	bl	8000d98 <light_i2c_read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	827b      	strh	r3, [r7, #18]
        lux = convert_to_lux(reading);
 8000ed0:	8a7b      	ldrh	r3, [r7, #18]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff feac 	bl	8000c30 <convert_to_lux>
 8000ed8:	60f8      	str	r0, [r7, #12]
        sum += lux;
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]
        HAL_Delay(2000);
 8000ee2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ee6:	f002 f863 	bl	8002fb0 <HAL_Delay>
    for(int i=0; i<5; i++) {
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	dde7      	ble.n	8000ec6 <get_light_value+0x12>
    }
    avg = sum/5;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <get_light_value+0x64>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
    light_int_24_hrs[light_24h_counter] = avg;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <get_light_value+0x68>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <get_light_value+0x6c>)
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	cccccccd 	.word	0xcccccccd
 8000f1c:	200003d0 	.word	0x200003d0
 8000f20:	20000184 	.word	0x20000184

08000f24 <check_light_intensity>:
    }
}

/* Check if 3-day average light intensity in acceptable range
 */
void check_light_intensity(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
	uint32_t max_ok_light, min_ok_light, avg_intensity;
	max_ok_light = light_level_to_lux_high(user_selected_plant.light_level);
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <check_light_intensity+0x60>)
 8000f2c:	7d1b      	ldrb	r3, [r3, #20]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff4a 	bl	8000dc8 <light_level_to_lux_high>
 8000f34:	60f8      	str	r0, [r7, #12]
	min_ok_light = light_level_to_lux_low(user_selected_plant.light_level);
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <check_light_intensity+0x60>)
 8000f38:	7d1b      	ldrb	r3, [r3, #20]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff6c 	bl	8000e18 <light_level_to_lux_low>
 8000f40:	60b8      	str	r0, [r7, #8]
	avg_intensity = average_optimal_light_ints();
 8000f42:	f7ff ff91 	bl	8000e68 <average_optimal_light_ints>
 8000f46:	6078      	str	r0, [r7, #4]
    if (avg_intensity>max_ok_light){ // too bright
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d904      	bls.n	8000f5a <check_light_intensity+0x36>
        update_alert(3,1);
 8000f50:	2101      	movs	r1, #1
 8000f52:	2003      	movs	r0, #3
 8000f54:	f001 fdd6 	bl	8002b04 <update_alert>
 8000f58:	e003      	b.n	8000f62 <check_light_intensity+0x3e>
    } else {
    	update_alert(3,0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f001 fdd1 	bl	8002b04 <update_alert>
    }
    if (avg_intensity<min_ok_light){ // too dark
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d204      	bcs.n	8000f74 <check_light_intensity+0x50>
        update_alert(2,1);
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f001 fdc9 	bl	8002b04 <update_alert>
    }
    else {
        update_alert(2,0);
    }
}
 8000f72:	e003      	b.n	8000f7c <check_light_intensity+0x58>
        update_alert(2,0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2002      	movs	r0, #2
 8000f78:	f001 fdc4 	bl	8002b04 <update_alert>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000080 	.word	0x20000080

08000f88 <HD44780_Init>:
uint8_t special3[8] = {
    0b00100, 0b01110, 0b10101, 0b00000,
    0b00000, 0b00000, 0b00000, 0b00000
};

void HD44780_Init(uint8_t rows) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f92:	4a3a      	ldr	r2, [pc, #232]	@ (800107c <HD44780_Init+0xf4>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	7013      	strb	r3, [r2, #0]
  dpBacklight = LCD_BACKLIGHT;
 8000f98:	4b39      	ldr	r3, [pc, #228]	@ (8001080 <HD44780_Init+0xf8>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	@ (8001084 <HD44780_Init+0xfc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000fa4:	4b35      	ldr	r3, [pc, #212]	@ (800107c <HD44780_Init+0xf4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d907      	bls.n	8000fbc <HD44780_Init+0x34>
    dpFunction |= LCD_2LINE;
 8000fac:	4b35      	ldr	r3, [pc, #212]	@ (8001084 <HD44780_Init+0xfc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <HD44780_Init+0xfc>)
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e006      	b.n	8000fca <HD44780_Init+0x42>
  else
    dpFunction |= LCD_5x10DOTS;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <HD44780_Init+0xfc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <HD44780_Init+0xfc>)
 8000fc8:	701a      	strb	r2, [r3, #0]

  DelayInit();
 8000fca:	f000 f9a3 	bl	8001314 <DelayInit>
  HAL_Delay(50);
 8000fce:	2032      	movs	r0, #50	@ 0x32
 8000fd0:	f001 ffee 	bl	8002fb0 <HAL_Delay>
  ExpanderWrite(dpBacklight);
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001080 <HD44780_Init+0xf8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f961 	bl	80012a0 <ExpanderWrite>
  HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe2:	f001 ffe5 	bl	8002fb0 <HAL_Delay>

  Write4Bits(0x03 << 4); DelayUS(4500);
 8000fe6:	2030      	movs	r0, #48	@ 0x30
 8000fe8:	f000 f949 	bl	800127e <Write4Bits>
 8000fec:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ff0:	f000 f9ae 	bl	8001350 <DelayUS>
  Write4Bits(0x03 << 4); DelayUS(4500);
 8000ff4:	2030      	movs	r0, #48	@ 0x30
 8000ff6:	f000 f942 	bl	800127e <Write4Bits>
 8000ffa:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ffe:	f000 f9a7 	bl	8001350 <DelayUS>
  Write4Bits(0x03 << 4); DelayUS(4500);
 8001002:	2030      	movs	r0, #48	@ 0x30
 8001004:	f000 f93b 	bl	800127e <Write4Bits>
 8001008:	f241 1094 	movw	r0, #4500	@ 0x1194
 800100c:	f000 f9a0 	bl	8001350 <DelayUS>
  Write4Bits(0x02 << 4); DelayUS(100);
 8001010:	2020      	movs	r0, #32
 8001012:	f000 f934 	bl	800127e <Write4Bits>
 8001016:	2064      	movs	r0, #100	@ 0x64
 8001018:	f000 f99a 	bl	8001350 <DelayUS>

  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HD44780_Init+0xfc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f8ec 	bl	8001204 <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HD44780_Init+0x100>)
 800102e:	2204      	movs	r2, #4
 8001030:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001032:	f000 f87b 	bl	800112c <HD44780_Display>
  HD44780_Clear();
 8001036:	f000 f831 	bl	800109c <HD44780_Clear>

  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <HD44780_Init+0x104>)
 800103c:	2202      	movs	r2, #2
 800103e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HD44780_Init+0x104>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f8da 	bl	8001204 <SendCommand>
  DelayUS(4500);
 8001050:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001054:	f000 f97c 	bl	8001350 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001058:	490d      	ldr	r1, [pc, #52]	@ (8001090 <HD44780_Init+0x108>)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f87c 	bl	8001158 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <HD44780_Init+0x10c>)
 8001062:	2001      	movs	r0, #1
 8001064:	f000 f878 	bl	8001158 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, special3);
 8001068:	490b      	ldr	r1, [pc, #44]	@ (8001098 <HD44780_Init+0x110>)
 800106a:	2002      	movs	r0, #2
 800106c:	f000 f874 	bl	8001158 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001070:	f000 f81f 	bl	80010b2 <HD44780_Home>

}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200003d7 	.word	0x200003d7
 8001080:	200003d8 	.word	0x200003d8
 8001084:	200003d4 	.word	0x200003d4
 8001088:	200003d5 	.word	0x200003d5
 800108c:	200003d6 	.word	0x200003d6
 8001090:	20000014 	.word	0x20000014
 8001094:	2000001c 	.word	0x2000001c
 8001098:	20000024 	.word	0x20000024

0800109c <HD44780_Clear>:

void HD44780_Clear() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 f8af 	bl	8001204 <SendCommand>
  DelayUS(2000);
 80010a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010aa:	f000 f951 	bl	8001350 <DelayUS>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HD44780_Home>:

void HD44780_Home() {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 f8a4 	bl	8001204 <SendCommand>
  DelayUS(2000);
 80010bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010c0:	f000 f946 	bl	8001350 <DelayUS>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HD44780_SetCursor+0x5c>)
 80010da:	f107 0408 	add.w	r4, r7, #8
 80010de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows) row = dpRows - 1;
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <HD44780_SetCursor+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	79ba      	ldrb	r2, [r7, #6]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d303      	bcc.n	80010f6 <HD44780_SetCursor+0x2e>
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HD44780_SetCursor+0x60>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	71bb      	strb	r3, [r7, #6]
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3318      	adds	r3, #24
 80010fc:	443b      	add	r3, r7
 80010fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4413      	add	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f875 	bl	8001204 <SendCommand>
}
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	080087b0 	.word	0x080087b0
 8001128:	200003d7 	.word	0x200003d7

0800112c <HD44780_Display>:

void HD44780_Display()         { dpControl |= LCD_DISPLAYON; SendCommand(LCD_DISPLAYCONTROL | dpControl); }
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HD44780_Display+0x28>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HD44780_Display+0x28>)
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HD44780_Display+0x28>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f85b 	bl	8001204 <SendCommand>
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003d5 	.word	0x200003d5

08001158 <HD44780_CreateSpecialChar>:
void HD44780_LeftToRight()     { dpMode |= LCD_ENTRYLEFT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_RightToLeft()     { dpMode &= ~LCD_ENTRYLEFT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_AutoScroll()      { dpMode |= LCD_ENTRYSHIFTINCREMENT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_NoAutoScroll()    { dpMode &= ~LCD_ENTRYSHIFTINCREMENT; SendCommand(LCD_ENTRYMODESET | dpMode); }

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001176:	b25b      	sxtb	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f842 	bl	8001204 <SendCommand>
  for (int i = 0; i < 8; i++) SendChar(charmap[i]);
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e009      	b.n	800119a <HD44780_CreateSpecialChar+0x42>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f846 	bl	8001220 <SendChar>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b07      	cmp	r3, #7
 800119e:	ddf2      	ble.n	8001186 <HD44780_CreateSpecialChar+0x2e>
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  while (*c) SendChar(*c++);
 80011b2:	e006      	b.n	80011c2 <HD44780_PrintStr+0x18>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f82f 	bl	8001220 <SendChar>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f4      	bne.n	80011b4 <HD44780_PrintStr+0xa>
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HD44780_NoBacklight>:
void HD44780_SetBacklight(uint8_t new_val) {
  if (new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  dpBacklight = LCD_NOBACKLIGHT;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HD44780_NoBacklight+0x14>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f85e 	bl	80012a0 <ExpanderWrite>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200003d8 	.word	0x200003d8

080011ec <HD44780_Backlight>:

void HD44780_Backlight(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  dpBacklight = LCD_BACKLIGHT;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HD44780_Backlight+0x14>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f852 	bl	80012a0 <ExpanderWrite>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003d8 	.word	0x200003d8

08001204 <SendCommand>:

static void SendCommand(uint8_t cmd) { Send(cmd, 0); }
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f812 	bl	800123c <Send>
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <SendChar>:
static void SendChar(uint8_t ch)     { Send(ch, RS); }
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f804 	bl	800123c <Send>
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <Send>:
static void Send(uint8_t value, uint8_t mode) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f023 030f 	bic.w	r3, r3, #15
 8001252:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value << 4) & 0xF0;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	73bb      	strb	r3, [r7, #14]
  Write4Bits(highnib | mode);
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	4313      	orrs	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f80b 	bl	800127e <Write4Bits>
  Write4Bits(lownib | mode);
 8001268:	7bba      	ldrb	r2, [r7, #14]
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	4313      	orrs	r3, r2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f804 	bl	800127e <Write4Bits>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <Write4Bits>:

static void Write4Bits(uint8_t value) {
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f808 	bl	80012a0 <ExpanderWrite>
  PulseEnable(value);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f820 	bl	80012d8 <PulseEnable>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <ExpanderWrite+0x30>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012b6:	f107 020f 	add.w	r2, r7, #15
 80012ba:	230a      	movs	r3, #10
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	214e      	movs	r1, #78	@ 0x4e
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <ExpanderWrite+0x34>)
 80012c4:	f003 fa92 	bl	80047ec <HAL_I2C_Master_Transmit>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200003d8 	.word	0x200003d8
 80012d4:	2000046c 	.word	0x2000046c

080012d8 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffd8 	bl	80012a0 <ExpanderWrite>
  DelayUS(20);
 80012f0:	2014      	movs	r0, #20
 80012f2:	f000 f82d 	bl	8001350 <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffce 	bl	80012a0 <ExpanderWrite>
  DelayUS(20);
 8001304:	2014      	movs	r0, #20
 8001306:	f000 f823 	bl	8001350 <DelayUS>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DelayInit>:

static void DelayInit(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <DelayInit+0x34>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <DelayInit+0x34>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <DelayInit+0x38>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a08      	ldr	r2, [pc, #32]	@ (800134c <DelayInit+0x38>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <DelayInit+0x38>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  __ASM volatile ("NOP\nNOP\nNOP");
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	bf00      	nop
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000edf0 	.word	0xe000edf0
 800134c:	e0001000 	.word	0xe0001000

08001350 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <DelayUS+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <DelayUS+0x44>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9a      	lsrs	r2, r3, #18
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	60fb      	str	r3, [r7, #12]
  uint32_t start = DWT->CYCCNT;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <DelayUS+0x48>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	60bb      	str	r3, [r7, #8]
  while ((DWT->CYCCNT - start) < cycles);
 8001372:	bf00      	nop
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <DelayUS+0x48>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d8f8      	bhi.n	8001374 <DelayUS+0x24>
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200000ac 	.word	0x200000ac
 8001394:	431bde83 	.word	0x431bde83
 8001398:	e0001000 	.word	0xe0001000

0800139c <update>:

char line1[17] = "";
char line2[17] = "";

int update(const char *string1, const char *string2) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  if (just_on == 1) {
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <update+0x48>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d104      	bne.n	80013b8 <update+0x1c>
	just_on = 0;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <update+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
    return 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e010      	b.n	80013da <update+0x3e>
  }
  else if (strcmp(string1, line1) != 0 || strcmp(string2, line2) != 0) {
 80013b8:	490b      	ldr	r1, [pc, #44]	@ (80013e8 <update+0x4c>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ff10 	bl	80001e0 <strcmp>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <update+0x38>
 80013c6:	4909      	ldr	r1, [pc, #36]	@ (80013ec <update+0x50>)
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f7fe ff09 	bl	80001e0 <strcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <update+0x3c>
    return 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <update+0x3e>
  }
  else {
    return 0;
 80013d8:	2300      	movs	r3, #0
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200003d9 	.word	0x200003d9
 80013e8:	200003dc 	.word	0x200003dc
 80013ec:	200003f0 	.word	0x200003f0

080013f0 <display_message_left>:

void display_message_left(const char *string1, const char *string2) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    if (update(string1, string2)) {
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffcd 	bl	800139c <update>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01f      	beq.n	8001448 <display_message_left+0x58>
        HD44780_Clear();
 8001408:	f7ff fe48 	bl	800109c <HD44780_Clear>
        HD44780_SetCursor(0, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fe5a 	bl	80010c8 <HD44780_SetCursor>
        HD44780_PrintStr(string1);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fec8 	bl	80011aa <HD44780_PrintStr>
        HD44780_SetCursor(0, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fe53 	bl	80010c8 <HD44780_SetCursor>
        HD44780_PrintStr(string2);
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f7ff fec1 	bl	80011aa <HD44780_PrintStr>
        strncpy(line1, string1, 16); line1[16] = '\0';
 8001428:	2210      	movs	r2, #16
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <display_message_left+0x60>)
 800142e:	f005 fdc7 	bl	8006fc0 <strncpy>
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <display_message_left+0x60>)
 8001434:	2200      	movs	r2, #0
 8001436:	741a      	strb	r2, [r3, #16]
        strncpy(line2, string2, 16); line2[16] = '\0';
 8001438:	2210      	movs	r2, #16
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <display_message_left+0x64>)
 800143e:	f005 fdbf 	bl	8006fc0 <strncpy>
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <display_message_left+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	741a      	strb	r2, [r3, #16]
    }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200003dc 	.word	0x200003dc
 8001454:	200003f0 	.word	0x200003f0

08001458 <display_off>:
    convert_float_to_string(num1, buffer1);
    convert_float_to_string(num2, buffer2);
    display_message_center(buffer1, buffer2);
}

void display_off(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  HD44780_Clear();
 800145c:	f7ff fe1e 	bl	800109c <HD44780_Clear>
  HD44780_NoBacklight();
 8001460:	f7ff feb8 	bl	80011d4 <HD44780_NoBacklight>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <display_on>:


void display_on(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  just_on = 1;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <display_on+0x1c>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
  HD44780_Backlight();
 8001472:	f7ff febb 	bl	80011ec <HD44780_Backlight>
  display_message_left(line1, line2);
 8001476:	4904      	ldr	r1, [pc, #16]	@ (8001488 <display_on+0x20>)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <display_on+0x24>)
 800147a:	f7ff ffb9 	bl	80013f0 <display_message_left>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003d9 	.word	0x200003d9
 8001488:	200003f0 	.word	0x200003f0
 800148c:	200003dc 	.word	0x200003dc

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b097      	sub	sp, #92	@ 0x5c
 8001494:	af16      	add	r7, sp, #88	@ 0x58
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001496:	b672      	cpsid	i
}
 8001498:	bf00      	nop

  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x08000000;
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <main+0x1e8>)
 800149c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014a0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80014a8:	b662      	cpsie	i
}
 80014aa:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f001 fd0b 	bl	8002ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f906 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 facc 	bl	8001a50 <MX_GPIO_Init>
  MX_RTC_Init();
 80014b8:	f000 fa3a 	bl	8001930 <MX_RTC_Init>
  MX_ADC1_Init();
 80014bc:	f000 f954 	bl	8001768 <MX_ADC1_Init>
  MX_I2C3_Init();
 80014c0:	f000 f9b6 	bl	8001830 <MX_I2C3_Init>
  MX_I2C4_Init();
 80014c4:	f000 f9f4 	bl	80018b0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fd5d 	bl	8000f88 <HD44780_Init>
  veml7700_init(&veml, &hi2c4, VEML7700_I2C_ADDRESS);
 80014ce:	2210      	movs	r2, #16
 80014d0:	496a      	ldr	r1, [pc, #424]	@ (800167c <main+0x1ec>)
 80014d2:	486b      	ldr	r0, [pc, #428]	@ (8001680 <main+0x1f0>)
 80014d4:	f001 fc6d 	bl	8002db2 <veml7700_init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // for now enable 5V at all times
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014de:	4869      	ldr	r0, [pc, #420]	@ (8001684 <main+0x1f4>)
 80014e0:	f003 f8b8 	bl	8004654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // enable pullup for sensors
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ea:	4866      	ldr	r0, [pc, #408]	@ (8001684 <main+0x1f4>)
 80014ec:	f003 f8b2 	bl	8004654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // light sensor power
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014f6:	4863      	ldr	r0, [pc, #396]	@ (8001684 <main+0x1f4>)
 80014f8:	f003 f8ac 	bl	8004654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // temp/rh sensor power
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001502:	4861      	ldr	r0, [pc, #388]	@ (8001688 <main+0x1f8>)
 8001504:	f003 f8a6 	bl	8004654 <HAL_GPIO_WritePin>

  if (user_selected_plant.high_temp==0)  // check if plant has been selected
 8001508:	4b60      	ldr	r3, [pc, #384]	@ (800168c <main+0x1fc>)
 800150a:	7c5b      	ldrb	r3, [r3, #17]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <main+0x84>
  {
	  select_plant();
 8001510:	f000 fe68 	bl	80021e4 <select_plant>
  }
  if (calibrated_wet_level==0) // check if moisture level calibrated
 8001514:	4b5e      	ldr	r3, [pc, #376]	@ (8001690 <main+0x200>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <main+0xa4>
  {
	  calibrate_moisture(hadc1);
 800151c:	4c5d      	ldr	r4, [pc, #372]	@ (8001694 <main+0x204>)
 800151e:	4668      	mov	r0, sp
 8001520:	f104 0310 	add.w	r3, r4, #16
 8001524:	2258      	movs	r2, #88	@ 0x58
 8001526:	4619      	mov	r1, r3
 8001528:	f005 fd8a 	bl	8007040 <memcpy>
 800152c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001530:	f000 fea4 	bl	800227c <calibrate_moisture>
  }
  if (pot_depth==0) // check if pot depth has been selected
 8001534:	4b58      	ldr	r3, [pc, #352]	@ (8001698 <main+0x208>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <main+0xb0>
  {
	  select_pot_depth();
 800153c:	f000 ff70 	bl	8002420 <select_pot_depth>
  }

  *flags[0] = 1;
 8001540:	4b56      	ldr	r3, [pc, #344]	@ (800169c <main+0x20c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
	  display_message_left("setup check", "complete");*/



	  // CHECK SETUP
	  if(*flags[1]==1) // user-initiated recalibration
 8001548:	4b54      	ldr	r3, [pc, #336]	@ (800169c <main+0x20c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10e      	bne.n	8001570 <main+0xe0>
	  {
		  clear_flag(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f000 fdde 	bl	8002114 <clear_flag>
		  change_setup(hadc1);
 8001558:	4c4e      	ldr	r4, [pc, #312]	@ (8001694 <main+0x204>)
 800155a:	4668      	mov	r0, sp
 800155c:	f104 0310 	add.w	r3, r4, #16
 8001560:	2258      	movs	r2, #88	@ 0x58
 8001562:	4619      	mov	r1, r3
 8001564:	f005 fd6c 	bl	8007040 <memcpy>
 8001568:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800156c:	f000 ff98 	bl	80024a0 <change_setup>
	  }


	  // OPERATION
	  if (*flags[0])  // if RTC IRQ set (every 1 minute for demo)
 8001570:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <main+0x20c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d032      	beq.n	80015e0 <main+0x150>
	  {
		  if (display_is_on) {display_message_left("checking", "environment...");}
 800157a:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <main+0x210>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <main+0xfa>
 8001582:	4948      	ldr	r1, [pc, #288]	@ (80016a4 <main+0x214>)
 8001584:	4848      	ldr	r0, [pc, #288]	@ (80016a8 <main+0x218>)
 8001586:	f7ff ff33 	bl	80013f0 <display_message_left>
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // enable pullup for sensor I2C

		  // TEMP/RH
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		  HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f001 fd10 	bl	8002fb0 <HAL_Delay>

		  // LIGHT
		  // Note: for demo just checking light level on every reading
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
		  //configure_pin_as_i2c();
		  get_light_value(veml);
 8001590:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <main+0x1f0>)
 8001592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001596:	f7ff fc8d 	bl	8000eb4 <get_light_value>
		  check_light_intensity();
 800159a:	f7ff fcc3 	bl	8000f24 <check_light_intensity>
		  if(light_24h_counter==5) {light_24h_counter=0;}
 800159e:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <main+0x21c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d103      	bne.n	80015ae <main+0x11e>
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <main+0x21c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e004      	b.n	80015b8 <main+0x128>
		  else {light_24h_counter++;}
 80015ae:	4b3f      	ldr	r3, [pc, #252]	@ (80016ac <main+0x21c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a3d      	ldr	r2, [pc, #244]	@ (80016ac <main+0x21c>)
 80015b6:	6013      	str	r3, [r2, #0]
		  // enable power to moisture sensors
		  // J10: ADC Channel 3 -> GPIO B13
		  // J6: ADC Channel 1 -> GPIO B14
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		  get_moisture_value(hadc1);
 80015b8:	4c36      	ldr	r4, [pc, #216]	@ (8001694 <main+0x204>)
 80015ba:	4668      	mov	r0, sp
 80015bc:	f104 0310 	add.w	r3, r4, #16
 80015c0:	2258      	movs	r2, #88	@ 0x58
 80015c2:	4619      	mov	r1, r3
 80015c4:	f005 fd3c 	bl	8007040 <memcpy>
 80015c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015cc:	f000 fcd8 	bl	8001f80 <get_moisture_value>
		  check_moisture_level();
 80015d0:	f000 fd32 	bl	8002038 <check_moisture_level>
		  // disable power to moisture sensors
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
		  new_data = 1;
 80015d4:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <main+0x220>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		  clear_flag(0);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 fd9a 	bl	8002114 <clear_flag>
	  }

	  if(*flags[3]==1) // turn screen on/off
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <main+0x20c>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d104      	bne.n	80015f4 <main+0x164>
	  {
		  clear_flag(3);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 fd92 	bl	8002114 <clear_flag>
		  display_toggle();
 80015f0:	f001 fb70 	bl	8002cd4 <display_toggle>
	  }

	  if (display_is_on)
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <main+0x210>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d023      	beq.n	8001644 <main+0x1b4>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001602:	4820      	ldr	r0, [pc, #128]	@ (8001684 <main+0x1f4>)
 8001604:	f003 f826 	bl	8004654 <HAL_GPIO_WritePin>
		  if (new_data){
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <main+0x220>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d010      	beq.n	8001632 <main+0x1a2>
			  count_alerts();
 8001610:	f001 fa8e 	bl	8002b30 <count_alerts>
			  show_alerts(hadc1);
 8001614:	4c1f      	ldr	r4, [pc, #124]	@ (8001694 <main+0x204>)
 8001616:	4668      	mov	r0, sp
 8001618:	f104 0310 	add.w	r3, r4, #16
 800161c:	2258      	movs	r2, #88	@ 0x58
 800161e:	4619      	mov	r1, r3
 8001620:	f005 fd0e 	bl	8007040 <memcpy>
 8001624:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001628:	f001 faa8 	bl	8002b7c <show_alerts>
			  new_data = 0;}
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <main+0x220>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
		  if (alerts_set==0) {display_message_left("no alerts", "for now :)");}
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <main+0x224>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d186      	bne.n	8001548 <main+0xb8>
 800163a:	491f      	ldr	r1, [pc, #124]	@ (80016b8 <main+0x228>)
 800163c:	481f      	ldr	r0, [pc, #124]	@ (80016bc <main+0x22c>)
 800163e:	f7ff fed7 	bl	80013f0 <display_message_left>
 8001642:	e781      	b.n	8001548 <main+0xb8>
	  }
	  else if (new_data)
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <main+0x220>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00d      	beq.n	8001668 <main+0x1d8>
	  {
		  count_alerts();
 800164c:	f001 fa70 	bl	8002b30 <count_alerts>
		  if (alerts_set!=0)
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <main+0x224>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f43f af77 	beq.w	8001548 <main+0xb8>
		  	  {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);}
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <main+0x1f4>)
 8001662:	f002 fff7 	bl	8004654 <HAL_GPIO_WritePin>
 8001666:	e76f      	b.n	8001548 <main+0xb8>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <main+0x1f4>)
 8001670:	f002 fff0 	bl	8004654 <HAL_GPIO_WritePin>
	  if(*flags[1]==1) // user-initiated recalibration
 8001674:	e768      	b.n	8001548 <main+0xb8>
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	200004c0 	.word	0x200004c0
 8001680:	20000538 	.word	0x20000538
 8001684:	48000800 	.word	0x48000800
 8001688:	48000400 	.word	0x48000400
 800168c:	20000080 	.word	0x20000080
 8001690:	20000548 	.word	0x20000548
 8001694:	20000404 	.word	0x20000404
 8001698:	2000054a 	.word	0x2000054a
 800169c:	20000098 	.word	0x20000098
 80016a0:	200000b0 	.word	0x200000b0
 80016a4:	080087c4 	.word	0x080087c4
 80016a8:	080087d4 	.word	0x080087d4
 80016ac:	200003d0 	.word	0x200003d0
 80016b0:	200000b1 	.word	0x200000b1
 80016b4:	20000564 	.word	0x20000564
 80016b8:	080087e0 	.word	0x080087e0
 80016bc:	080087ec 	.word	0x080087ec

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b096      	sub	sp, #88	@ 0x58
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2244      	movs	r2, #68	@ 0x44
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 fc6e 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016e6:	f003 fdc7 	bl	8005278 <HAL_PWREx_ControlVoltageScaling>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016f0:	f000 fb12 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80016f4:	2318      	movs	r3, #24
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001704:	2360      	movs	r3, #96	@ 0x60
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800170c:	2301      	movs	r3, #1
 800170e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001710:	2301      	movs	r3, #1
 8001712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001714:	2328      	movs	r3, #40	@ 0x28
 8001716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001718:	2307      	movs	r3, #7
 800171a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800171c:	2302      	movs	r3, #2
 800171e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fdfb 	bl	8005324 <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001734:	f000 faf0 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
 800173a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2303      	movs	r3, #3
 800173e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	2104      	movs	r1, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f004 f9fb 	bl	8005b4c <HAL_RCC_ClockConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800175c:	f000 fadc 	bl	8001d18 <Error_Handler>
  }
}
 8001760:	bf00      	nop
 8001762:	3758      	adds	r7, #88	@ 0x58
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <MX_ADC1_Init+0xbc>)
 8001780:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <MX_ADC1_Init+0xc0>)
 8001782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_ADC1_Init+0xbc>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <MX_ADC1_Init+0xbc>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001790:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <MX_ADC1_Init+0xbc>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <MX_ADC1_Init+0xbc>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_ADC1_Init+0xbc>)
 800179e:	2204      	movs	r2, #4
 80017a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017de:	4811      	ldr	r0, [pc, #68]	@ (8001824 <MX_ADC1_Init+0xbc>)
 80017e0:	f001 fde4 	bl	80033ac <HAL_ADC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80017ea:	f000 fa95 	bl	8001d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_ADC1_Init+0xc4>)
 80017f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f2:	2306      	movs	r3, #6
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017fa:	237f      	movs	r3, #127	@ 0x7f
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017fe:	2304      	movs	r3, #4
 8001800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <MX_ADC1_Init+0xbc>)
 800180c:	f002 f814 	bl	8003838 <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001816:	f000 fa7f 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000404 	.word	0x20000404
 8001828:	50040000 	.word	0x50040000
 800182c:	04300002 	.word	0x04300002

08001830 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <MX_I2C3_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <MX_I2C3_Init+0x7c>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800186c:	f002 ff22 	bl	80046b4 <HAL_I2C_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001876:	f000 fa4f 	bl	8001d18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	4809      	ldr	r0, [pc, #36]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800187e:	f003 fc55 	bl	800512c <HAL_I2CEx_ConfigAnalogFilter>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001888:	f000 fa46 	bl	8001d18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800188c:	2100      	movs	r1, #0
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001890:	f003 fc97 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 fa3d 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000046c 	.word	0x2000046c
 80018a8:	40005c00 	.word	0x40005c00
 80018ac:	10d19ce4 	.word	0x10d19ce4

080018b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001928 <MX_I2C4_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10D19CE4;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018bc:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <MX_I2C4_Init+0x7c>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018ea:	480e      	ldr	r0, [pc, #56]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018ec:	f002 fee2 	bl	80046b4 <HAL_I2C_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80018f6:	f000 fa0f 	bl	8001d18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018fa:	2100      	movs	r1, #0
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <MX_I2C4_Init+0x74>)
 80018fe:	f003 fc15 	bl	800512c <HAL_I2CEx_ConfigAnalogFilter>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001908:	f000 fa06 	bl	8001d18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <MX_I2C4_Init+0x74>)
 8001910:	f003 fc57 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800191a:	f000 f9fd 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200004c0 	.word	0x200004c0
 8001928:	40008400 	.word	0x40008400
 800192c:	10d19ce4 	.word	0x10d19ce4

08001930 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b092      	sub	sp, #72	@ 0x48
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001936:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	222c      	movs	r2, #44	@ 0x2c
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f005 fb2d 	bl	8006fb0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001956:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001958:	4a3c      	ldr	r2, [pc, #240]	@ (8001a4c <MX_RTC_Init+0x11c>)
 800195a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800195c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <MX_RTC_Init+0x118>)
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001962:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001964:	227f      	movs	r2, #127	@ 0x7f
 8001966:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001968:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <MX_RTC_Init+0x118>)
 800196a:	22ff      	movs	r2, #255	@ 0xff
 800196c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001974:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800197a:	4b33      	ldr	r3, [pc, #204]	@ (8001a48 <MX_RTC_Init+0x118>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001986:	4830      	ldr	r0, [pc, #192]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001988:	f004 fe2a 	bl	80065e0 <HAL_RTC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001992:	f000 f9c1 	bl	8001d18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	4823      	ldr	r0, [pc, #140]	@ (8001a48 <MX_RTC_Init+0x118>)
 80019ba:	f004 fe99 	bl	80066f0 <HAL_RTC_SetTime>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80019c4:	f000 f9a8 	bl	8001d18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	4817      	ldr	r0, [pc, #92]	@ (8001a48 <MX_RTC_Init+0x118>)
 80019ea:	f004 ff1e 	bl	800682a <HAL_RTC_SetDate>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80019f4:	f000 f990 	bl	8001d18 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	@ (8001a48 <MX_RTC_Init+0x118>)
 8001a30:	f004 ff82 	bl	8006938 <HAL_RTC_SetAlarm_IT>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001a3a:	f000 f96d 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3748      	adds	r7, #72	@ 0x48
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000514 	.word	0x20000514
 8001a4c:	40002800 	.word	0x40002800

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b7a      	ldr	r3, [pc, #488]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a79      	ldr	r2, [pc, #484]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b77      	ldr	r3, [pc, #476]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b74      	ldr	r3, [pc, #464]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a73      	ldr	r2, [pc, #460]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b71      	ldr	r3, [pc, #452]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b6e      	ldr	r3, [pc, #440]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aae:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a67      	ldr	r2, [pc, #412]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <MX_GPIO_Init+0x200>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8001acc:	4861      	ldr	r0, [pc, #388]	@ (8001c54 <MX_GPIO_Init+0x204>)
 8001ace:	f002 fdc1 	bl	8004654 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f24f 0141 	movw	r1, #61505	@ 0xf041
 8001ad8:	485f      	ldr	r0, [pc, #380]	@ (8001c58 <MX_GPIO_Init+0x208>)
 8001ada:	f002 fdbb 	bl	8004654 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae8:	f002 fdb4 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC8
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8001aec:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001af0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4853      	ldr	r0, [pc, #332]	@ (8001c54 <MX_GPIO_Init+0x204>)
 8001b06:	f002 fc2b 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b28:	f002 fc1a 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001b2c:	231c      	movs	r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b42:	f002 fc0d 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001b46:	f24f 0341 	movw	r3, #61505	@ 0xf041
 8001b4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	483e      	ldr	r0, [pc, #248]	@ (8001c58 <MX_GPIO_Init+0x208>)
 8001b60:	f002 fbfe 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b64:	2306      	movs	r3, #6
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4837      	ldr	r0, [pc, #220]	@ (8001c58 <MX_GPIO_Init+0x208>)
 8001b7a:	f002 fbf1 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b7e:	2340      	movs	r3, #64	@ 0x40
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4830      	ldr	r0, [pc, #192]	@ (8001c54 <MX_GPIO_Init+0x204>)
 8001b94:	f002 fbe4 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482a      	ldr	r0, [pc, #168]	@ (8001c54 <MX_GPIO_Init+0x204>)
 8001bac:	f002 fbd8 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001bb0:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f002 fbc8 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bea:	f002 fbb9 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bee:	2308      	movs	r3, #8
 8001bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <MX_GPIO_Init+0x20c>)
 8001c02:	f002 fbad 	bl	8004360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2007      	movs	r0, #7
 8001c0c:	f002 fb71 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c10:	2007      	movs	r0, #7
 8001c12:	f002 fb8a 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2008      	movs	r0, #8
 8001c1c:	f002 fb69 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c20:	2008      	movs	r0, #8
 8001c22:	f002 fb82 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2017      	movs	r0, #23
 8001c2c:	f002 fb61 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c30:	2017      	movs	r0, #23
 8001c32:	f002 fb7a 	bl	800432a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2028      	movs	r0, #40	@ 0x28
 8001c3c:	f002 fb59 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c40:	2028      	movs	r0, #40	@ 0x28
 8001c42:	f002 fb72 	bl	800432a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	48001c00 	.word	0x48001c00

08001c60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;
	uint32_t current_time = HAL_GetTick();
 8001c6a:	f001 f995 	bl	8002f98 <HAL_GetTick>
 8001c6e:	60f8      	str	r0, [r7, #12]
	if (current_time - last_interrupt_time < 200)
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c7a:	d91f      	bls.n	8001cbc <HAL_GPIO_EXTI_Callback+0x5c>
	{
		return;
	}
	last_interrupt_time = current_time;
 8001c7c:	4a11      	ldr	r2, [pc, #68]	@ (8001cc4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6013      	str	r3, [r2, #0]

	if(GPIO_Pin == GPIO_PIN_6)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b40      	cmp	r3, #64	@ 0x40
 8001c86:	d103      	bne.n	8001c90 <HAL_GPIO_EXTI_Callback+0x30>
	{
		toggle_flag(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f000 fa1b 	bl	80020c4 <toggle_flag>
 8001c8e:	e016      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if(GPIO_Pin == GPIO_PIN_10)
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c96:	d103      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0x40>
	{
		toggle_flag(2);
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f000 fa13 	bl	80020c4 <toggle_flag>
 8001c9e:	e00e      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if(GPIO_Pin == GPIO_PIN_1)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d103      	bne.n	8001cae <HAL_GPIO_EXTI_Callback+0x4e>
	{
		toggle_flag(3);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 fa0c 	bl	80020c4 <toggle_flag>
 8001cac:	e007      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x5e>
	}
	else if(GPIO_Pin == GPIO_PIN_2)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d104      	bne.n	8001cbe <HAL_GPIO_EXTI_Callback+0x5e>
	{
		toggle_flag(4);
 8001cb4:	2004      	movs	r0, #4
 8001cb6:	f000 fa05 	bl	80020c4 <toggle_flag>
 8001cba:	e000      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x5e>
		return;
 8001cbc:	bf00      	nop
	}
}
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000540 	.word	0x20000540

08001cc8 <HAL_RTC_AlarmAEventCallback>:

// TODO: update this with correct timing for demo
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	@ 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8001cd0:	f107 010c 	add.w	r1, r7, #12
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f004 ff68 	bl	8006bb0 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Minutes>58) {
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ce4:	d902      	bls.n	8001cec <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Minutes=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	737b      	strb	r3, [r7, #13]
 8001cea:	e003      	b.n	8001cf4 <HAL_RTC_AlarmAEventCallback+0x2c>
  }else{
    sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	737b      	strb	r3, [r7, #13]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001cf4:	bf00      	nop
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f004 fe1a 	bl	8006938 <HAL_RTC_SetAlarm_IT>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f5      	bne.n	8001cf6 <HAL_RTC_AlarmAEventCallback+0x2e>
    toggle_flag(0);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f9da 	bl	80020c4 <toggle_flag>
}
 8001d10:	bf00      	nop
 8001d12:	3738      	adds	r7, #56	@ 0x38
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <Error_Handler+0x8>
 8001d24:	0000      	movs	r0, r0
	...

08001d28 <adc_to_pct_moisture>:
/* Converts raw ADC value to a percent soil moisture
 * Parameters:
 * - adc_raw: corresponds to raw ADC output
 * Returns: % soil moisture reading from moisture sensor
 */
static uint16_t adc_to_pct_moisture(uint16_t adc_raw){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
	uint16_t percent_moisture;
	uint32_t step, mvolt;
	mvolt = adc_raw*1000*3.3/4095;
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc01 	bl	8000544 <__aeabi_i2d>
 8001d42:	a321      	add	r3, pc, #132	@ (adr r3, 8001dc8 <adc_to_pct_moisture+0xa0>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc66 	bl	8000618 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	a31e      	add	r3, pc, #120	@ (adr r3, 8001dd0 <adc_to_pct_moisture+0xa8>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fd87 	bl	800086c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff07 	bl	8000b78 <__aeabi_d2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	617b      	str	r3, [r7, #20]
	if(mvolt>DRY_ADC_LEVEL){
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <adc_to_pct_moisture+0x98>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d901      	bls.n	8001d7c <adc_to_pct_moisture+0x54>
		return 100;
 8001d78:	2364      	movs	r3, #100	@ 0x64
 8001d7a:	e01a      	b.n	8001db2 <adc_to_pct_moisture+0x8a>
	} else if (mvolt<calibrated_wet_level){
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <adc_to_pct_moisture+0x9c>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d201      	bcs.n	8001d8c <adc_to_pct_moisture+0x64>
		return 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e012      	b.n	8001db2 <adc_to_pct_moisture+0x8a>
	} else {
		step = DRY_ADC_LEVEL-calibrated_wet_level;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <adc_to_pct_moisture+0x98>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <adc_to_pct_moisture+0x9c>)
 8001d92:	8812      	ldrh	r2, [r2, #0]
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
		percent_moisture = (mvolt-calibrated_wet_level)*100/step;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <adc_to_pct_moisture+0x9c>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	2264      	movs	r2, #100	@ 0x64
 8001da4:	fb03 f202 	mul.w	r2, r3, r2
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	81fb      	strh	r3, [r7, #14]
		return percent_moisture;
 8001db0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	080089b4 	.word	0x080089b4
 8001dc4:	20000548 	.word	0x20000548
 8001dc8:	66666666 	.word	0x66666666
 8001dcc:	400a6666 	.word	0x400a6666
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40affe00 	.word	0x40affe00

08001dd8 <moisture_at_depth>:
 *              critical depth is found
 * - ms1: reading from higher (0"-2.5") moisture sensor, in raw ADC reading
 * - ms2: reading from lower (1"-3.5") moisture sensor, in raw ADC reading
 * Returns: estimate of moisture at given soil depth, in % moisture
 */
static uint16_t moisture_at_depth(float pct_depth, uint16_t ms1_raw, uint16_t ms2_raw){
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a01 	vstr	s0, [r7, #4]
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	803b      	strh	r3, [r7, #0]
	uint16_t moisture_at_cd;
	float crit_depth, k;
	uint32_t x = 2.5*(0.7*ms1_raw-0.3*ms2_raw);
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fba8 	bl	8000544 <__aeabi_i2d>
 8001df4:	a35c      	add	r3, pc, #368	@ (adr r3, 8001f68 <moisture_at_depth+0x190>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fc0d 	bl	8000618 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4614      	mov	r4, r2
 8001e04:	461d      	mov	r5, r3
 8001e06:	883b      	ldrh	r3, [r7, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb9b 	bl	8000544 <__aeabi_i2d>
 8001e0e:	a358      	add	r3, pc, #352	@ (adr r3, 8001f70 <moisture_at_depth+0x198>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fc00 	bl	8000618 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fa42 	bl	80002a8 <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <moisture_at_depth+0x1a0>)
 8001e32:	f7fe fbf1 	bl	8000618 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe9b 	bl	8000b78 <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	623b      	str	r3, [r7, #32]
	uint32_t y = (ms1_raw+ms2_raw)/2;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	883b      	ldrh	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	0fda      	lsrs	r2, r3, #31
 8001e4e:	4413      	add	r3, r2
 8001e50:	105b      	asrs	r3, r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
	uint32_t z = 2.5*(0.7*ms2_raw-0.3*ms1_raw);
 8001e54:	883b      	ldrh	r3, [r7, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb74 	bl	8000544 <__aeabi_i2d>
 8001e5c:	a342      	add	r3, pc, #264	@ (adr r3, 8001f68 <moisture_at_depth+0x190>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbd9 	bl	8000618 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb67 	bl	8000544 <__aeabi_i2d>
 8001e76:	a33e      	add	r3, pc, #248	@ (adr r3, 8001f70 <moisture_at_depth+0x198>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe fbcc 	bl	8000618 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe fa0e 	bl	80002a8 <__aeabi_dsub>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b37      	ldr	r3, [pc, #220]	@ (8001f78 <moisture_at_depth+0x1a0>)
 8001e9a:	f7fe fbbd 	bl	8000618 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fe67 	bl	8000b78 <__aeabi_d2uiz>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
	int diff = x-y;
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    crit_depth = pct_depth*pot_depth;
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <moisture_at_depth+0x1a4>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	edc7 7a04 	vstr	s15, [r7, #16]
    if (crit_depth>3.5) { // have to extrapolate
 8001ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed2:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd1d      	ble.n	8001f1c <moisture_at_depth+0x144>
        k = crit_depth - 3.5;
 8001ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee4:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eec:	edc7 7a03 	vstr	s15, [r7, #12]
        moisture_at_cd = z-k*diff;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f1a:	e019      	b.n	8001f50 <moisture_at_depth+0x178>
    }
    else if(crit_depth>2.5) { // critical depth is in z range
 8001f1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f20:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2c:	dd02      	ble.n	8001f34 <moisture_at_depth+0x15c>
        moisture_at_cd = z;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f32:	e00d      	b.n	8001f50 <moisture_at_depth+0x178>
    }
    else if(crit_depth>1) { // critical depth is in y range
 8001f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dd02      	ble.n	8001f4c <moisture_at_depth+0x174>
        moisture_at_cd = y;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f4a:	e001      	b.n	8001f50 <moisture_at_depth+0x178>
    }
    else { // critical depth is in x range
        moisture_at_cd = x;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    return adc_to_pct_moisture(moisture_at_cd);
 8001f50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fee8 	bl	8001d28 <adc_to_pct_moisture>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3728      	adds	r7, #40	@ 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	66666666 	.word	0x66666666
 8001f6c:	3fe66666 	.word	0x3fe66666
 8001f70:	33333333 	.word	0x33333333
 8001f74:	3fd33333 	.word	0x3fd33333
 8001f78:	40040000 	.word	0x40040000
 8001f7c:	2000054a 	.word	0x2000054a

08001f80 <get_moisture_value>:
 * Parameters:
 * - adc: initialized ADC
 * Returns: averaged raw ADC value for higher moisture sensor
 * TODO: update return value (extra parameter to chose which? don't return anything?)
 */
uint16_t get_moisture_value(ADC_HandleTypeDef adc){
 8001f80:	b084      	sub	sp, #16
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b09e      	sub	sp, #120	@ 0x78
 8001f86:	af18      	add	r7, sp, #96	@ 0x60
 8001f88:	f107 0c20 	add.w	ip, r7, #32
 8001f8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t sum1, sum2;
    uint16_t s1, s2, avg1, avg2;
    sum1 = 0; sum2 = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
    for(int i=0; i<5; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e02b      	b.n	8001ff6 <get_moisture_value+0x76>
    	s1 = adc_channel_conv(1, adc);
 8001f9e:	4668      	mov	r0, sp
 8001fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa4:	225c      	movs	r2, #92	@ 0x5c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f005 f84a 	bl	8007040 <memcpy>
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7fe fe00 	bl	8000bb8 <adc_channel_conv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	80fb      	strh	r3, [r7, #6]
        sum1 += s1;
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
        s2 = adc_channel_conv(3, adc);
 8001fc4:	4668      	mov	r0, sp
 8001fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fca:	225c      	movs	r2, #92	@ 0x5c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f005 f837 	bl	8007040 <memcpy>
 8001fd2:	f107 0320 	add.w	r3, r7, #32
 8001fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7fe fded 	bl	8000bb8 <adc_channel_conv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80bb      	strh	r3, [r7, #4]
        sum2 += s2;
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        HAL_Delay(200);
 8001fea:	20c8      	movs	r0, #200	@ 0xc8
 8001fec:	f000 ffe0 	bl	8002fb0 <HAL_Delay>
    for(int i=0; i<5; i++) {
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	ddd0      	ble.n	8001f9e <get_moisture_value+0x1e>
    }
    avg1 = sum1/5;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <get_moisture_value+0xb0>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	817b      	strh	r3, [r7, #10]
    avg2 = sum2/5;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <get_moisture_value+0xb0>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	813b      	strh	r3, [r7, #8]

    moisture_sensor_readings[0] = avg1;
 8002014:	4a07      	ldr	r2, [pc, #28]	@ (8002034 <get_moisture_value+0xb4>)
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	8013      	strh	r3, [r2, #0]
    moisture_sensor_readings[1] = avg2;
 800201a:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <get_moisture_value+0xb4>)
 800201c:	893b      	ldrh	r3, [r7, #8]
 800201e:	8053      	strh	r3, [r2, #2]

    return avg1;
 8002020:	897b      	ldrh	r3, [r7, #10]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800202c:	b004      	add	sp, #16
 800202e:	4770      	bx	lr
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	20000544 	.word	0x20000544

08002038 <check_moisture_level>:

/* Checks if plant needs watering based on pot height and plant type
 * (algorithm is still a work in progress)
 */
void check_moisture_level(){
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
	uint16_t high_moisture, low_moisture, cd_moisture;
	uint16_t ms1_raw, ms2_raw;
	float pct_depth;
	ms1_raw = moisture_sensor_readings[0];
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <check_moisture_level+0x78>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	817b      	strh	r3, [r7, #10]
	ms2_raw = moisture_sensor_readings[1];
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <check_moisture_level+0x78>)
 8002046:	885b      	ldrh	r3, [r3, #2]
 8002048:	813b      	strh	r3, [r7, #8]
	high_moisture = user_selected_plant.high_moisture;
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <check_moisture_level+0x7c>)
 800204c:	7ddb      	ldrb	r3, [r3, #23]
 800204e:	80fb      	strh	r3, [r7, #6]
	low_moisture = user_selected_plant.low_moisture;
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <check_moisture_level+0x7c>)
 8002052:	7d9b      	ldrb	r3, [r3, #22]
 8002054:	80bb      	strh	r3, [r7, #4]
    pct_depth = 0;
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
    if (high_moisture<21){ // low moisture plants
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	2b14      	cmp	r3, #20
 8002060:	d802      	bhi.n	8002068 <check_moisture_level+0x30>
        pct_depth = 0.90;
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <check_moisture_level+0x80>)
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e007      	b.n	8002078 <check_moisture_level+0x40>
    }
    else if (high_moisture<61){ // medium moisture plants
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	2b3c      	cmp	r3, #60	@ 0x3c
 800206c:	d802      	bhi.n	8002074 <check_moisture_level+0x3c>
        pct_depth = 0.33;
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <check_moisture_level+0x84>)
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e001      	b.n	8002078 <check_moisture_level+0x40>
    }
    else { // high moisture plants
        pct_depth = 0.15;
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <check_moisture_level+0x88>)
 8002076:	60fb      	str	r3, [r7, #12]
    }
    cd_moisture = moisture_at_depth(pct_depth,ms1_raw,ms2_raw);
 8002078:	893a      	ldrh	r2, [r7, #8]
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	ed97 0a03 	vldr	s0, [r7, #12]
 8002084:	f7ff fea8 	bl	8001dd8 <moisture_at_depth>
 8002088:	4603      	mov	r3, r0
 800208a:	807b      	strh	r3, [r7, #2]
    if (cd_moisture<low_moisture){
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d204      	bcs.n	800209e <check_moisture_level+0x66>
        update_alert(8,1);
 8002094:	2101      	movs	r1, #1
 8002096:	2008      	movs	r0, #8
 8002098:	f000 fd34 	bl	8002b04 <update_alert>
    }
    else {
        update_alert(8,0); // clears alert if in proper range
    }
}
 800209c:	e003      	b.n	80020a6 <check_moisture_level+0x6e>
        update_alert(8,0); // clears alert if in proper range
 800209e:	2100      	movs	r1, #0
 80020a0:	2008      	movs	r0, #8
 80020a2:	f000 fd2f 	bl	8002b04 <update_alert>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000544 	.word	0x20000544
 80020b4:	20000080 	.word	0x20000080
 80020b8:	3f666666 	.word	0x3f666666
 80020bc:	3ea8f5c3 	.word	0x3ea8f5c3
 80020c0:	3e19999a 	.word	0x3e19999a

080020c4 <toggle_flag>:
 * Button 4: next, toggle alert
 */
volatile int *flags[5] = {&rtc_flag, &flag_1, &flag_2, &flag_3, &flag_4};


void toggle_flag(int button){
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	if(*flags[button] == 0){*flags[button]=1;}
 80020cc:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <toggle_flag+0x4c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <toggle_flag+0x24>
 80020da:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <toggle_flag+0x4c>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
	else if (*flags[button] == 1){*flags[button]=0;}
}
 80020e6:	e00c      	b.n	8002102 <toggle_flag+0x3e>
	else if (*flags[button] == 1){*flags[button]=0;}
 80020e8:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <toggle_flag+0x4c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <toggle_flag+0x3e>
 80020f6:	4a06      	ldr	r2, [pc, #24]	@ (8002110 <toggle_flag+0x4c>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000098 	.word	0x20000098

08002114 <clear_flag>:

void set_flag(int button){
	*flags[button] = 1;
}

void clear_flag(int button){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	*flags[button] = 0;
 800211c:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <clear_flag+0x20>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000098 	.word	0x20000098

08002138 <scroll_plant>:

/* Helper function for select_plant
 * controls display of plant list
 * NOTE: need to update wrapping index when size of plant_list changed
 */
static Plant scroll_plant(){
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  int i = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  while(1){
    display_message_left(plant_list[i]->plant_name,"");
 8002144:	4a24      	ldr	r2, [pc, #144]	@ (80021d8 <scroll_plant+0xa0>)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	4923      	ldr	r1, [pc, #140]	@ (80021dc <scroll_plant+0xa4>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f94e 	bl	80013f0 <display_message_left>
    if(*flags[2]){ // if "select" is pressed
 8002154:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <scroll_plant+0xa8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <scroll_plant+0x50>
    	clear_flag(2);
 800215e:	2002      	movs	r0, #2
 8002160:	f7ff ffd8 	bl	8002114 <clear_flag>
        return *plant_list[i];
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <scroll_plant+0xa0>)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6810      	ldr	r0, [r2, #0]
 8002170:	6851      	ldr	r1, [r2, #4]
 8002172:	6895      	ldr	r5, [r2, #8]
 8002174:	68d4      	ldr	r4, [r2, #12]
 8002176:	6018      	str	r0, [r3, #0]
 8002178:	6059      	str	r1, [r3, #4]
 800217a:	609d      	str	r5, [r3, #8]
 800217c:	60dc      	str	r4, [r3, #12]
 800217e:	6910      	ldr	r0, [r2, #16]
 8002180:	6951      	ldr	r1, [r2, #20]
 8002182:	6118      	str	r0, [r3, #16]
 8002184:	6159      	str	r1, [r3, #20]
 8002186:	e022      	b.n	80021ce <scroll_plant+0x96>
    }
    if(*flags[4]){ // if "next" pressed
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <scroll_plant+0xa8>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <scroll_plant+0x72>
        clear_flag(4);
 8002192:	2004      	movs	r0, #4
 8002194:	f7ff ffbe 	bl	8002114 <clear_flag>
        if(i==2){i=0;} // wrap to first index
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d102      	bne.n	80021a4 <scroll_plant+0x6c>
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e002      	b.n	80021aa <scroll_plant+0x72>
        else {i++;}
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
    }
    if(*flags[3]){ // if "back" pressed
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <scroll_plant+0xa8>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0c7      	beq.n	8002144 <scroll_plant+0xc>
    	clear_flag(3);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f7ff ffad 	bl	8002114 <clear_flag>
        if(i==0) {i=2;}  // wrap to last index
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <scroll_plant+0x8e>
 80021c0:	2302      	movs	r3, #2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e7be      	b.n	8002144 <scroll_plant+0xc>
        else {i--;}
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
    display_message_left(plant_list[i]->plant_name,"");
 80021cc:	e7ba      	b.n	8002144 <scroll_plant+0xc>
    }
  }
}
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000074 	.word	0x20000074
 80021dc:	080087f8 	.word	0x080087f8
 80021e0:	20000098 	.word	0x20000098

080021e4 <select_plant>:

/* User plant selection
 * Displays plant options and sets user_selected_plant
 */
uint32_t select_plant(){
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
    display_message_left("to select plant", "press next");
 80021ea:	4920      	ldr	r1, [pc, #128]	@ (800226c <select_plant+0x88>)
 80021ec:	4820      	ldr	r0, [pc, #128]	@ (8002270 <select_plant+0x8c>)
 80021ee:	f7ff f8ff 	bl	80013f0 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 80021f2:	e016      	b.n	8002222 <select_plant+0x3e>
        if(*flags[3] && user_selected_plant.high_humidity!=0){ // exit if "back" pressed and already plant selected
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <select_plant+0x90>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d011      	beq.n	8002222 <select_plant+0x3e>
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <select_plant+0x94>)
 8002200:	7cdb      	ldrb	r3, [r3, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <select_plant+0x3e>
        	clear_flag(1); clear_flag(2); clear_flag(3); clear_flag(4);
 8002206:	2001      	movs	r0, #1
 8002208:	f7ff ff84 	bl	8002114 <clear_flag>
 800220c:	2002      	movs	r0, #2
 800220e:	f7ff ff81 	bl	8002114 <clear_flag>
 8002212:	2003      	movs	r0, #3
 8002214:	f7ff ff7e 	bl	8002114 <clear_flag>
 8002218:	2004      	movs	r0, #4
 800221a:	f7ff ff7b 	bl	8002114 <clear_flag>
            return 0;
 800221e:	2300      	movs	r3, #0
 8002220:	e01f      	b.n	8002262 <select_plant+0x7e>
    while(!*flags[4]){ // wait for "next" press
 8002222:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <select_plant+0x90>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0e3      	beq.n	80021f4 <select_plant+0x10>
        }
    };
    clear_flag(1); clear_flag(2); clear_flag(3); clear_flag(4);
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff ff71 	bl	8002114 <clear_flag>
 8002232:	2002      	movs	r0, #2
 8002234:	f7ff ff6e 	bl	8002114 <clear_flag>
 8002238:	2003      	movs	r0, #3
 800223a:	f7ff ff6b 	bl	8002114 <clear_flag>
 800223e:	2004      	movs	r0, #4
 8002240:	f7ff ff68 	bl	8002114 <clear_flag>
    user_selected_plant = scroll_plant();
 8002244:	4c0c      	ldr	r4, [pc, #48]	@ (8002278 <select_plant+0x94>)
 8002246:	463b      	mov	r3, r7
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff75 	bl	8002138 <scroll_plant>
 800224e:	463d      	mov	r5, r7
 8002250:	6828      	ldr	r0, [r5, #0]
 8002252:	6869      	ldr	r1, [r5, #4]
 8002254:	68aa      	ldr	r2, [r5, #8]
 8002256:	68eb      	ldr	r3, [r5, #12]
 8002258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225a:	6928      	ldr	r0, [r5, #16]
 800225c:	6969      	ldr	r1, [r5, #20]
 800225e:	c403      	stmia	r4!, {r0, r1}
    return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bdb0      	pop	{r4, r5, r7, pc}
 800226a:	bf00      	nop
 800226c:	080087fc 	.word	0x080087fc
 8002270:	08008808 	.word	0x08008808
 8002274:	20000098 	.word	0x20000098
 8002278:	20000080 	.word	0x20000080

0800227c <calibrate_moisture>:
/* User calibration of moisture sensor reading for wet soil
 * Want wet level to be higher sensor, run 5 mins after watering
 * Parameters:
 * - adc: initialized ADC
 */
uint32_t calibrate_moisture(ADC_HandleTypeDef adc){
 800227c:	b084      	sub	sp, #16
 800227e:	b580      	push	{r7, lr}
 8002280:	b096      	sub	sp, #88	@ 0x58
 8002282:	af16      	add	r7, sp, #88	@ 0x58
 8002284:	f107 0c08 	add.w	ip, r7, #8
 8002288:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    display_message_left("water plant then", "press calibrate");
 800228c:	492d      	ldr	r1, [pc, #180]	@ (8002344 <calibrate_moisture+0xc8>)
 800228e:	482e      	ldr	r0, [pc, #184]	@ (8002348 <calibrate_moisture+0xcc>)
 8002290:	f7ff f8ae 	bl	80013f0 <display_message_left>
    while(!*flags[1]){ // wait for "calibrate" press
 8002294:	e020      	b.n	80022d8 <calibrate_moisture+0x5c>
        if(*flags[3] && calibrated_wet_level!=0){ // exit if "back" pressed and already calibrated
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <calibrate_moisture+0xd0>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <calibrate_moisture+0x5c>
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <calibrate_moisture+0xd4>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <calibrate_moisture+0x5c>
        	display_message_left("exiting", "calibration");
 80022a8:	492a      	ldr	r1, [pc, #168]	@ (8002354 <calibrate_moisture+0xd8>)
 80022aa:	482b      	ldr	r0, [pc, #172]	@ (8002358 <calibrate_moisture+0xdc>)
 80022ac:	f7ff f8a0 	bl	80013f0 <display_message_left>
        	HAL_Delay(2000);
 80022b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022b4:	f000 fe7c 	bl	8002fb0 <HAL_Delay>
        	HD44780_Clear();
 80022b8:	f7fe fef0 	bl	800109c <HD44780_Clear>
        	clear_flag(1); clear_flag(2); clear_flag(3); clear_flag(4);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff ff29 	bl	8002114 <clear_flag>
 80022c2:	2002      	movs	r0, #2
 80022c4:	f7ff ff26 	bl	8002114 <clear_flag>
 80022c8:	2003      	movs	r0, #3
 80022ca:	f7ff ff23 	bl	8002114 <clear_flag>
 80022ce:	2004      	movs	r0, #4
 80022d0:	f7ff ff20 	bl	8002114 <clear_flag>
            return 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e02f      	b.n	8002338 <calibrate_moisture+0xbc>
    while(!*flags[1]){ // wait for "calibrate" press
 80022d8:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <calibrate_moisture+0xd0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0d9      	beq.n	8002296 <calibrate_moisture+0x1a>
        }
    };
    clear_flag(1); clear_flag(2); clear_flag(3); clear_flag(4);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7ff ff16 	bl	8002114 <clear_flag>
 80022e8:	2002      	movs	r0, #2
 80022ea:	f7ff ff13 	bl	8002114 <clear_flag>
 80022ee:	2003      	movs	r0, #3
 80022f0:	f7ff ff10 	bl	8002114 <clear_flag>
 80022f4:	2004      	movs	r0, #4
 80022f6:	f7ff ff0d 	bl	8002114 <clear_flag>
    display_message_left("calibrating", "");
 80022fa:	4918      	ldr	r1, [pc, #96]	@ (800235c <calibrate_moisture+0xe0>)
 80022fc:	4818      	ldr	r0, [pc, #96]	@ (8002360 <calibrate_moisture+0xe4>)
 80022fe:	f7ff f877 	bl	80013f0 <display_message_left>
    calibrated_wet_level = get_moisture_value(adc);
 8002302:	4668      	mov	r0, sp
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	2258      	movs	r2, #88	@ 0x58
 800230a:	4619      	mov	r1, r3
 800230c:	f004 fe98 	bl	8007040 <memcpy>
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002316:	f7ff fe33 	bl	8001f80 <get_moisture_value>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <calibrate_moisture+0xd4>)
 8002320:	801a      	strh	r2, [r3, #0]
    display_message_left("calibration", "saved");
 8002322:	4910      	ldr	r1, [pc, #64]	@ (8002364 <calibrate_moisture+0xe8>)
 8002324:	480b      	ldr	r0, [pc, #44]	@ (8002354 <calibrate_moisture+0xd8>)
 8002326:	f7ff f863 	bl	80013f0 <display_message_left>
    HAL_Delay(2000);
 800232a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800232e:	f000 fe3f 	bl	8002fb0 <HAL_Delay>
    HD44780_Clear();
 8002332:	f7fe feb3 	bl	800109c <HD44780_Clear>
    return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002340:	b004      	add	sp, #16
 8002342:	4770      	bx	lr
 8002344:	08008818 	.word	0x08008818
 8002348:	08008828 	.word	0x08008828
 800234c:	20000098 	.word	0x20000098
 8002350:	20000548 	.word	0x20000548
 8002354:	0800883c 	.word	0x0800883c
 8002358:	08008848 	.word	0x08008848
 800235c:	080087f8 	.word	0x080087f8
 8002360:	08008850 	.word	0x08008850
 8002364:	0800885c 	.word	0x0800885c

08002368 <scroll_depth>:

/* Helper function for select_pot_depth
 * Controls display of depth options
 */
static uint16_t scroll_depth(){
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
	uint32_t min_depth = 4;
 800236e:	2304      	movs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
	uint32_t max_depth = 24;
 8002372:	2318      	movs	r3, #24
 8002374:	617b      	str	r3, [r7, #20]
	uint16_t depth = min_depth;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	83fb      	strh	r3, [r7, #30]
	char buf[16];
    while(1){
    	sprintf(buf, "%d in",depth);
 800237a:	8bfa      	ldrh	r2, [r7, #30]
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4923      	ldr	r1, [pc, #140]	@ (800240c <scroll_depth+0xa4>)
 8002380:	4618      	mov	r0, r3
 8002382:	f004 fdf5 	bl	8006f70 <siprintf>
    	display_message_left("pot depth:", buf);
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4821      	ldr	r0, [pc, #132]	@ (8002410 <scroll_depth+0xa8>)
 800238c:	f7ff f830 	bl	80013f0 <display_message_left>
        if(*flags[2]){ // if "select" is pressed
 8002390:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <scroll_depth+0xac>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <scroll_depth+0x50>
        	clear_flag(2); // clear "select" flag
 800239a:	2002      	movs	r0, #2
 800239c:	f7ff feba 	bl	8002114 <clear_flag>
        	display_message_left("depth", "selected");
 80023a0:	491d      	ldr	r1, [pc, #116]	@ (8002418 <scroll_depth+0xb0>)
 80023a2:	481e      	ldr	r0, [pc, #120]	@ (800241c <scroll_depth+0xb4>)
 80023a4:	f7ff f824 	bl	80013f0 <display_message_left>
        	HAL_Delay(2000);
 80023a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023ac:	f000 fe00 	bl	8002fb0 <HAL_Delay>
        	HD44780_Clear();
 80023b0:	f7fe fe74 	bl	800109c <HD44780_Clear>
            return depth;
 80023b4:	8bfb      	ldrh	r3, [r7, #30]
 80023b6:	e024      	b.n	8002402 <scroll_depth+0x9a>
        }
        if (*flags[4]){ // if "next" pressed
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <scroll_depth+0xac>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <scroll_depth+0x74>
        	clear_flag(4); // clear "next" flag
 80023c2:	2004      	movs	r0, #4
 80023c4:	f7ff fea6 	bl	8002114 <clear_flag>
            if(depth==max_depth){depth=min_depth;} // wrap
 80023c8:	8bfb      	ldrh	r3, [r7, #30]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d102      	bne.n	80023d6 <scroll_depth+0x6e>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	83fb      	strh	r3, [r7, #30]
 80023d4:	e002      	b.n	80023dc <scroll_depth+0x74>
            else {depth++;}
 80023d6:	8bfb      	ldrh	r3, [r7, #30]
 80023d8:	3301      	adds	r3, #1
 80023da:	83fb      	strh	r3, [r7, #30]
        }
        if(*flags[3]){ // if "back" pressed
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <scroll_depth+0xac>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0c9      	beq.n	800237a <scroll_depth+0x12>
        	clear_flag(3); // clear "back" flag
 80023e6:	2003      	movs	r0, #3
 80023e8:	f7ff fe94 	bl	8002114 <clear_flag>
            if(depth==min_depth) {depth=max_depth;}  // wrap
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d102      	bne.n	80023fa <scroll_depth+0x92>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	83fb      	strh	r3, [r7, #30]
 80023f8:	e7bf      	b.n	800237a <scroll_depth+0x12>
            else {depth--;}
 80023fa:	8bfb      	ldrh	r3, [r7, #30]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	83fb      	strh	r3, [r7, #30]
    	sprintf(buf, "%d in",depth);
 8002400:	e7bb      	b.n	800237a <scroll_depth+0x12>
        }
    }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08008864 	.word	0x08008864
 8002410:	0800886c 	.word	0x0800886c
 8002414:	20000098 	.word	0x20000098
 8002418:	08008878 	.word	0x08008878
 800241c:	08008884 	.word	0x08008884

08002420 <select_pot_depth>:

/* User pot depth selection
 */
uint16_t select_pot_depth(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    display_message_left("to select pot", "depth press next");
 8002424:	4918      	ldr	r1, [pc, #96]	@ (8002488 <select_pot_depth+0x68>)
 8002426:	4819      	ldr	r0, [pc, #100]	@ (800248c <select_pot_depth+0x6c>)
 8002428:	f7fe ffe2 	bl	80013f0 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 800242c:	e010      	b.n	8002450 <select_pot_depth+0x30>
        if(*flags[3] && pot_depth!=0){ // exit if "back" pressed and already set depth
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <select_pot_depth+0x70>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <select_pot_depth+0x30>
 8002438:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <select_pot_depth+0x74>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <select_pot_depth+0x30>
        	clear_flag(4); // clear "next" and "back" flags
 8002440:	2004      	movs	r0, #4
 8002442:	f7ff fe67 	bl	8002114 <clear_flag>
        	clear_flag(3);
 8002446:	2003      	movs	r0, #3
 8002448:	f7ff fe64 	bl	8002114 <clear_flag>
            return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e018      	b.n	8002482 <select_pot_depth+0x62>
    while(!*flags[4]){ // wait for "next" press
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <select_pot_depth+0x70>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0e9      	beq.n	800242e <select_pot_depth+0xe>
        }
    };
    clear_flag(4); // clear "next" flag
 800245a:	2004      	movs	r0, #4
 800245c:	f7ff fe5a 	bl	8002114 <clear_flag>
    pot_depth = scroll_depth();
 8002460:	f7ff ff82 	bl	8002368 <scroll_depth>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <select_pot_depth+0x74>)
 800246a:	801a      	strh	r2, [r3, #0]
    display_message_left("pot depth saved", "");
 800246c:	490a      	ldr	r1, [pc, #40]	@ (8002498 <select_pot_depth+0x78>)
 800246e:	480b      	ldr	r0, [pc, #44]	@ (800249c <select_pot_depth+0x7c>)
 8002470:	f7fe ffbe 	bl	80013f0 <display_message_left>
    HAL_Delay(2000);
 8002474:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002478:	f000 fd9a 	bl	8002fb0 <HAL_Delay>
    HD44780_Clear();
 800247c:	f7fe fe0e 	bl	800109c <HD44780_Clear>
    return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	0800888c 	.word	0x0800888c
 800248c:	080088a0 	.word	0x080088a0
 8002490:	20000098 	.word	0x20000098
 8002494:	2000054a 	.word	0x2000054a
 8002498:	080087f8 	.word	0x080087f8
 800249c:	080088b0 	.word	0x080088b0

080024a0 <change_setup>:

/* User recalibration (change one of setup values)
 */
uint32_t change_setup(ADC_HandleTypeDef adc){
 80024a0:	b084      	sub	sp, #16
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b098      	sub	sp, #96	@ 0x60
 80024a6:	af16      	add	r7, sp, #88	@ 0x58
 80024a8:	f107 0c10 	add.w	ip, r7, #16
 80024ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int i = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
    while(1){
        if(*flags[2]){ // if "select" is pressed
 80024b4:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <change_setup+0xf4>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d024      	beq.n	8002508 <change_setup+0x68>
        	clear_flag(2); // clear "select" flag
 80024be:	2002      	movs	r0, #2
 80024c0:	f7ff fe28 	bl	8002114 <clear_flag>
            switch (i) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d019      	beq.n	80024fe <change_setup+0x5e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	dc19      	bgt.n	8002504 <change_setup+0x64>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <change_setup+0x3e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d003      	beq.n	80024e4 <change_setup+0x44>
 80024dc:	e012      	b.n	8002504 <change_setup+0x64>
                case (0):
                    select_plant();
 80024de:	f7ff fe81 	bl	80021e4 <select_plant>
                    break;
 80024e2:	e00f      	b.n	8002504 <change_setup+0x64>
                case (1):
                    calibrate_moisture(adc);
 80024e4:	4668      	mov	r0, sp
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	2258      	movs	r2, #88	@ 0x58
 80024ec:	4619      	mov	r1, r3
 80024ee:	f004 fda7 	bl	8007040 <memcpy>
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f8:	f7ff fec0 	bl	800227c <calibrate_moisture>
                    break;
 80024fc:	e002      	b.n	8002504 <change_setup+0x64>
                case (2):
                    select_pot_depth();
 80024fe:	f7ff ff8f 	bl	8002420 <select_pot_depth>
                    break;
 8002502:	bf00      	nop
            }
            return i;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	e03e      	b.n	8002586 <change_setup+0xe6>
        }
        if (*flags[4]){ // if "next" pressed
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <change_setup+0xf4>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <change_setup+0x8a>
        	clear_flag(4); // clear "next" flag
 8002512:	2004      	movs	r0, #4
 8002514:	f7ff fdfe 	bl	8002114 <clear_flag>
            if(i==2){i=0;} // wrap
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d102      	bne.n	8002524 <change_setup+0x84>
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e002      	b.n	800252a <change_setup+0x8a>
            else {i++;}
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3301      	adds	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
        }
        if(*flags[3]){ // if "back" pressed
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <change_setup+0xf4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <change_setup+0xac>
        	clear_flag(3); // clear "back" flag
 8002534:	2003      	movs	r0, #3
 8002536:	f7ff fded 	bl	8002114 <clear_flag>
            if(i==0) {i=2;}  // wrap
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <change_setup+0xa6>
 8002540:	2302      	movs	r3, #2
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	e002      	b.n	800254c <change_setup+0xac>
            else {i--;}
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3b01      	subs	r3, #1
 800254a:	607b      	str	r3, [r7, #4]
        }
        switch (i) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d013      	beq.n	800257a <change_setup+0xda>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b02      	cmp	r3, #2
 8002556:	dcad      	bgt.n	80024b4 <change_setup+0x14>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <change_setup+0xc6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d005      	beq.n	8002570 <change_setup+0xd0>
 8002564:	e00e      	b.n	8002584 <change_setup+0xe4>
            case (0):
                display_message_left("select new","plant");
 8002566:	490c      	ldr	r1, [pc, #48]	@ (8002598 <change_setup+0xf8>)
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <change_setup+0xfc>)
 800256a:	f7fe ff41 	bl	80013f0 <display_message_left>
                break;
 800256e:	e009      	b.n	8002584 <change_setup+0xe4>
            case (1):
                display_message_left("recalibrate","moisture");
 8002570:	490b      	ldr	r1, [pc, #44]	@ (80025a0 <change_setup+0x100>)
 8002572:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <change_setup+0x104>)
 8002574:	f7fe ff3c 	bl	80013f0 <display_message_left>
                break;
 8002578:	e004      	b.n	8002584 <change_setup+0xe4>
            case (2):
                display_message_left("reset pot","depth");
 800257a:	490b      	ldr	r1, [pc, #44]	@ (80025a8 <change_setup+0x108>)
 800257c:	480b      	ldr	r0, [pc, #44]	@ (80025ac <change_setup+0x10c>)
 800257e:	f7fe ff37 	bl	80013f0 <display_message_left>
                break;
 8002582:	bf00      	nop
        if(*flags[2]){ // if "select" is pressed
 8002584:	e796      	b.n	80024b4 <change_setup+0x14>
        }
    }
    return 0;
};
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002590:	b004      	add	sp, #16
 8002592:	4770      	bx	lr
 8002594:	20000098 	.word	0x20000098
 8002598:	080088c0 	.word	0x080088c0
 800259c:	080088c8 	.word	0x080088c8
 80025a0:	080088d4 	.word	0x080088d4
 80025a4:	080088e0 	.word	0x080088e0
 80025a8:	08008884 	.word	0x08008884
 80025ac:	080088ec 	.word	0x080088ec

080025b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <HAL_MspInit+0x44>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	4a0e      	ldr	r2, [pc, #56]	@ (80025f4 <HAL_MspInit+0x44>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_MspInit+0x44>)
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_MspInit+0x44>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <HAL_MspInit+0x44>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_MspInit+0x44>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a4      	sub	sp, #144	@ 0x90
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2268      	movs	r2, #104	@ 0x68
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f004 fcc9 	bl	8006fb0 <memset>
  if(hadc->Instance==ADC1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <HAL_ADC_MspInit+0xc4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d144      	bne.n	80026b2 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002628:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800262c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800262e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002632:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002634:	2301      	movs	r3, #1
 8002636:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800263c:	2318      	movs	r3, #24
 800263e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002640:	2307      	movs	r3, #7
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002648:	2302      	movs	r3, #2
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800264c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fc64 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002662:	f7ff fb59 	bl	8001d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002666:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	4a15      	ldr	r2, [pc, #84]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 800266c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002672:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	4a0f      	ldr	r2, [pc, #60]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_ADC_MspInit+0xc8>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002696:	230f      	movs	r3, #15
 8002698:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800269a:	230b      	movs	r3, #11
 800269c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <HAL_ADC_MspInit+0xcc>)
 80026ae:	f001 fe57 	bl	8004360 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80026b2:	bf00      	nop
 80026b4:	3790      	adds	r7, #144	@ 0x90
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	50040000 	.word	0x50040000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	48000800 	.word	0x48000800

080026c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0a6      	sub	sp, #152	@ 0x98
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e0:	f107 031c 	add.w	r3, r7, #28
 80026e4:	2268      	movs	r2, #104	@ 0x68
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 fc61 	bl	8006fb0 <memset>
  if(hi2c->Instance==I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a54      	ldr	r2, [pc, #336]	@ (8002844 <HAL_I2C_MspInit+0x17c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d15e      	bne.n	80027b6 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80026f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80026fe:	2300      	movs	r3, #0
 8002700:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fc0c 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002712:	f7ff fb01 	bl	8001d18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	4a4b      	ldr	r2, [pc, #300]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002722:	4b49      	ldr	r3, [pc, #292]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b46      	ldr	r3, [pc, #280]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4a45      	ldr	r2, [pc, #276]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274c:	2312      	movs	r3, #18
 800274e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800275e:	2304      	movs	r3, #4
 8002760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276e:	f001 fdf7 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002772:	2310      	movs	r3, #16
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002778:	2312      	movs	r3, #18
 800277a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800278a:	2304      	movs	r3, #4
 800278c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002794:	4619      	mov	r1, r3
 8002796:	482d      	ldr	r0, [pc, #180]	@ (800284c <HAL_I2C_MspInit+0x184>)
 8002798:	f001 fde2 	bl	8004360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800279c:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 80027a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80027b4:	e041      	b.n	800283a <HAL_I2C_MspInit+0x172>
  else if(hi2c->Instance==I2C4)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_I2C_MspInit+0x188>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d13c      	bne.n	800283a <HAL_I2C_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80027c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80027c6:	2300      	movs	r3, #0
 80027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fba8 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_MspInit+0x116>
      Error_Handler();
 80027da:	f7ff fa9d 	bl	8001d18 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a19      	ldr	r2, [pc, #100]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fe:	2312      	movs	r3, #18
 8002800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002810:	2303      	movs	r3, #3
 8002812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800281a:	4619      	mov	r1, r3
 800281c:	480b      	ldr	r0, [pc, #44]	@ (800284c <HAL_I2C_MspInit+0x184>)
 800281e:	f001 fd9f 	bl	8004360 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	4a08      	ldr	r2, [pc, #32]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_I2C_MspInit+0x180>)
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
}
 800283a:	bf00      	nop
 800283c:	3798      	adds	r7, #152	@ 0x98
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40005c00 	.word	0x40005c00
 8002848:	40021000 	.word	0x40021000
 800284c:	48000400 	.word	0x48000400
 8002850:	40008400 	.word	0x40008400

08002854 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09c      	sub	sp, #112	@ 0x70
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	2268      	movs	r2, #104	@ 0x68
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fba3 	bl	8006fb0 <memset>
  if(hrtc->Instance==RTC)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	@ (80028bc <HAL_RTC_MspInit+0x68>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d11f      	bne.n	80028b4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002874:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800287a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800287e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fb4d 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002890:	f7ff fa42 	bl	8001d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002894:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RTC_MspInit+0x6c>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <HAL_RTC_MspInit+0x6c>)
 800289c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 14, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	210e      	movs	r1, #14
 80028a8:	2029      	movs	r0, #41	@ 0x29
 80028aa:	f001 fd22 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80028ae:	2029      	movs	r0, #41	@ 0x29
 80028b0:	f001 fd3b 	bl	800432a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80028b4:	bf00      	nop
 80028b6:	3770      	adds	r7, #112	@ 0x70
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40002800 	.word	0x40002800
 80028c0:	40021000 	.word	0x40021000

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <NMI_Handler+0x4>

080028cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <MemManage_Handler+0x4>

080028dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291a:	f000 fb29 	bl	8002f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}

08002922 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002926:	2002      	movs	r0, #2
 8002928:	f001 feac 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002934:	2004      	movs	r0, #4
 8002936:	f001 fea5 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}

0800293e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002942:	2040      	movs	r0, #64	@ 0x40
 8002944:	f001 fe9e 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002950:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002954:	f001 fe96 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <RTC_Alarm_IRQHandler+0x10>)
 8002962:	f004 f9e5 	bl	8006d30 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000514 	.word	0x20000514

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f004 fb22 	bl	8006fe8 <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20020000 	.word	0x20020000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20000560 	.word	0x20000560
 80029d8:	200006d0 	.word	0x200006d0

080029dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <SystemInit+0x20>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <SystemInit+0x20>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <display_alert>:

/* Displays alert message for specified alert
 * Parameters:
 * - index: specifies which alert to display (see above indices in *alert_array)
 */
static void display_alert(uint16_t index){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
	switch(index){
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b0b      	cmp	r3, #11
 8002a0e:	d857      	bhi.n	8002ac0 <display_alert+0xc0>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <display_alert+0x18>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a49 	.word	0x08002a49
 8002a1c:	08002a53 	.word	0x08002a53
 8002a20:	08002a5d 	.word	0x08002a5d
 8002a24:	08002a67 	.word	0x08002a67
 8002a28:	08002a71 	.word	0x08002a71
 8002a2c:	08002a7b 	.word	0x08002a7b
 8002a30:	08002a85 	.word	0x08002a85
 8002a34:	08002a8f 	.word	0x08002a8f
 8002a38:	08002a99 	.word	0x08002a99
 8002a3c:	08002aa3 	.word	0x08002aa3
 8002a40:	08002aad 	.word	0x08002aad
 8002a44:	08002ab7 	.word	0x08002ab7
	case 0:
		display_message_left("needs more", "light");
 8002a48:	491f      	ldr	r1, [pc, #124]	@ (8002ac8 <display_alert+0xc8>)
 8002a4a:	4820      	ldr	r0, [pc, #128]	@ (8002acc <display_alert+0xcc>)
 8002a4c:	f7fe fcd0 	bl	80013f0 <display_message_left>
		break;
 8002a50:	e036      	b.n	8002ac0 <display_alert+0xc0>
	case 1:
		display_message_left("needs less", "light");
 8002a52:	491d      	ldr	r1, [pc, #116]	@ (8002ac8 <display_alert+0xc8>)
 8002a54:	481e      	ldr	r0, [pc, #120]	@ (8002ad0 <display_alert+0xd0>)
 8002a56:	f7fe fccb 	bl	80013f0 <display_message_left>
		break;
 8002a5a:	e031      	b.n	8002ac0 <display_alert+0xc0>
	case 2:
		display_message_left("needs brighter", "light");
 8002a5c:	491a      	ldr	r1, [pc, #104]	@ (8002ac8 <display_alert+0xc8>)
 8002a5e:	481d      	ldr	r0, [pc, #116]	@ (8002ad4 <display_alert+0xd4>)
 8002a60:	f7fe fcc6 	bl	80013f0 <display_message_left>
		break;
 8002a64:	e02c      	b.n	8002ac0 <display_alert+0xc0>
	case 3:
		display_message_left("needs less", "bright light");
 8002a66:	491c      	ldr	r1, [pc, #112]	@ (8002ad8 <display_alert+0xd8>)
 8002a68:	4819      	ldr	r0, [pc, #100]	@ (8002ad0 <display_alert+0xd0>)
 8002a6a:	f7fe fcc1 	bl	80013f0 <display_message_left>
		break;
 8002a6e:	e027      	b.n	8002ac0 <display_alert+0xc0>
	case 4:
		display_message_left("too hot", "");
 8002a70:	491a      	ldr	r1, [pc, #104]	@ (8002adc <display_alert+0xdc>)
 8002a72:	481b      	ldr	r0, [pc, #108]	@ (8002ae0 <display_alert+0xe0>)
 8002a74:	f7fe fcbc 	bl	80013f0 <display_message_left>
		break;
 8002a78:	e022      	b.n	8002ac0 <display_alert+0xc0>
	case 5:
		display_message_left("too cold", "");
 8002a7a:	4918      	ldr	r1, [pc, #96]	@ (8002adc <display_alert+0xdc>)
 8002a7c:	4819      	ldr	r0, [pc, #100]	@ (8002ae4 <display_alert+0xe4>)
 8002a7e:	f7fe fcb7 	bl	80013f0 <display_message_left>
		break;
 8002a82:	e01d      	b.n	8002ac0 <display_alert+0xc0>
	case 6:
		display_message_left("too humid", "");
 8002a84:	4915      	ldr	r1, [pc, #84]	@ (8002adc <display_alert+0xdc>)
 8002a86:	4818      	ldr	r0, [pc, #96]	@ (8002ae8 <display_alert+0xe8>)
 8002a88:	f7fe fcb2 	bl	80013f0 <display_message_left>
		break;
 8002a8c:	e018      	b.n	8002ac0 <display_alert+0xc0>
	case 7:
		display_message_left("too dry", "");
 8002a8e:	4913      	ldr	r1, [pc, #76]	@ (8002adc <display_alert+0xdc>)
 8002a90:	4816      	ldr	r0, [pc, #88]	@ (8002aec <display_alert+0xec>)
 8002a92:	f7fe fcad 	bl	80013f0 <display_message_left>
		break;
 8002a96:	e013      	b.n	8002ac0 <display_alert+0xc0>
	case 8:
		display_message_left("time to water", "");
 8002a98:	4910      	ldr	r1, [pc, #64]	@ (8002adc <display_alert+0xdc>)
 8002a9a:	4815      	ldr	r0, [pc, #84]	@ (8002af0 <display_alert+0xf0>)
 8002a9c:	f7fe fca8 	bl	80013f0 <display_message_left>
		break;
 8002aa0:	e00e      	b.n	8002ac0 <display_alert+0xc0>
	case 9:
		display_message_left("time to", "fertilize");
 8002aa2:	4914      	ldr	r1, [pc, #80]	@ (8002af4 <display_alert+0xf4>)
 8002aa4:	4814      	ldr	r0, [pc, #80]	@ (8002af8 <display_alert+0xf8>)
 8002aa6:	f7fe fca3 	bl	80013f0 <display_message_left>
		break;
 8002aaa:	e009      	b.n	8002ac0 <display_alert+0xc0>
	case 10:
		display_message_left("time to", "dust");
 8002aac:	4913      	ldr	r1, [pc, #76]	@ (8002afc <display_alert+0xfc>)
 8002aae:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <display_alert+0xf8>)
 8002ab0:	f7fe fc9e 	bl	80013f0 <display_message_left>
		break;
 8002ab4:	e004      	b.n	8002ac0 <display_alert+0xc0>
	case 11:
		display_message_left("battery low", "");
 8002ab6:	4909      	ldr	r1, [pc, #36]	@ (8002adc <display_alert+0xdc>)
 8002ab8:	4811      	ldr	r0, [pc, #68]	@ (8002b00 <display_alert+0x100>)
 8002aba:	f7fe fc99 	bl	80013f0 <display_message_left>
		break;
 8002abe:	bf00      	nop
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	080088f8 	.word	0x080088f8
 8002acc:	08008900 	.word	0x08008900
 8002ad0:	0800890c 	.word	0x0800890c
 8002ad4:	08008918 	.word	0x08008918
 8002ad8:	08008928 	.word	0x08008928
 8002adc:	08008938 	.word	0x08008938
 8002ae0:	0800893c 	.word	0x0800893c
 8002ae4:	08008944 	.word	0x08008944
 8002ae8:	08008950 	.word	0x08008950
 8002aec:	0800895c 	.word	0x0800895c
 8002af0:	08008964 	.word	0x08008964
 8002af4:	08008974 	.word	0x08008974
 8002af8:	08008980 	.word	0x08008980
 8002afc:	08008988 	.word	0x08008988
 8002b00:	08008990 	.word	0x08008990

08002b04 <update_alert>:
/* Changes whether alert is active or not
 * Parameters:
 * - index: specifies which alert to set (see above indices in *alert_array)
 * - set: 0 to clear alert, 1 to set alert
 */
void update_alert(uint16_t index, uint16_t set){
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	80fb      	strh	r3, [r7, #6]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80bb      	strh	r3, [r7, #4]
    *alert_array[index]=set;
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <update_alert+0x28>)
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	88ba      	ldrh	r2, [r7, #4]
 8002b1e:	801a      	strh	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	200000b4 	.word	0x200000b4

08002b30 <count_alerts>:

/* Counts number of active alerts and sets alert LED
 * Returns: number of active alerts
 */
void count_alerts(){
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
	uint16_t count = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	80fb      	strh	r3, [r7, #6]
    for (int i=0; i<12; i++){
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	e00c      	b.n	8002b5a <count_alerts+0x2a>
        if (*alert_array[i]==1){
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <count_alerts+0x44>)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <count_alerts+0x24>
            count++;
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	3301      	adds	r3, #1
 8002b52:	80fb      	strh	r3, [r7, #6]
    for (int i=0; i<12; i++){
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b0b      	cmp	r3, #11
 8002b5e:	ddef      	ble.n	8002b40 <count_alerts+0x10>
        }
    }
    alerts_set = count;
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <count_alerts+0x48>)
 8002b66:	701a      	strb	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	200000b4 	.word	0x200000b4
 8002b78:	20000564 	.word	0x20000564

08002b7c <show_alerts>:

/* Show alert messages, cycle through with button press
 */
uint16_t show_alerts(ADC_HandleTypeDef adc){
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b098      	sub	sp, #96	@ 0x60
 8002b82:	af16      	add	r7, sp, #88	@ 0x58
 8002b84:	f107 0c10 	add.w	ip, r7, #16
 8002b88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int i = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
    while(1){
        if (alerts_set==0){
 8002b90:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc0 <show_alerts+0x144>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <show_alerts+0x34>
        	clear_flag(3);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f7ff fabb 	bl	8002114 <clear_flag>
        	clear_flag(4);
 8002b9e:	2004      	movs	r0, #4
 8002ba0:	f7ff fab8 	bl	8002114 <clear_flag>
            display_message_left("no alerts", "for now :)");
 8002ba4:	4947      	ldr	r1, [pc, #284]	@ (8002cc4 <show_alerts+0x148>)
 8002ba6:	4848      	ldr	r0, [pc, #288]	@ (8002cc8 <show_alerts+0x14c>)
 8002ba8:	f7fe fc22 	bl	80013f0 <display_message_left>
            return 0;   // exit if no more alerts
 8002bac:	2300      	movs	r3, #0
 8002bae:	e07f      	b.n	8002cb0 <show_alerts+0x134>
        } else {
        	if (*alert_array[i]==1){
 8002bb0:	4a46      	ldr	r2, [pc, #280]	@ (8002ccc <show_alerts+0x150>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d15f      	bne.n	8002c7e <show_alerts+0x102>
        		clear_flag(3);
 8002bbe:	2003      	movs	r0, #3
 8002bc0:	f7ff faa8 	bl	8002114 <clear_flag>
        		clear_flag(4);
 8002bc4:	2004      	movs	r0, #4
 8002bc6:	f7ff faa5 	bl	8002114 <clear_flag>
        		display_alert(i);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff16 	bl	8002a00 <display_alert>
        		while (!*flags[2] && !*flags[3] && !*flags[4]) {
 8002bd4:	e010      	b.n	8002bf8 <show_alerts+0x7c>
        			if(*flags[1]){change_setup(adc);}
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <show_alerts+0x154>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <show_alerts+0x7c>
 8002be0:	4668      	mov	r0, sp
 8002be2:	f107 0320 	add.w	r3, r7, #32
 8002be6:	2258      	movs	r2, #88	@ 0x58
 8002be8:	4619      	mov	r1, r3
 8002bea:	f004 fa29 	bl	8007040 <memcpy>
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf4:	f7ff fc54 	bl	80024a0 <change_setup>
        		while (!*flags[2] && !*flags[3] && !*flags[4]) {
 8002bf8:	4b35      	ldr	r3, [pc, #212]	@ (8002cd0 <show_alerts+0x154>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <show_alerts+0x9a>
 8002c02:	4b33      	ldr	r3, [pc, #204]	@ (8002cd0 <show_alerts+0x154>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <show_alerts+0x9a>
 8002c0c:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <show_alerts+0x154>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0df      	beq.n	8002bd6 <show_alerts+0x5a>
        		}
        		if (*flags[2]){ // if "clear alert" pressed
 8002c16:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd0 <show_alerts+0x154>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <show_alerts+0xc8>
        			clear_flag(2);
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7ff fa77 	bl	8002114 <clear_flag>
        			alerts_set = alerts_set-1;
 8002c26:	4b26      	ldr	r3, [pc, #152]	@ (8002cc0 <show_alerts+0x144>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <show_alerts+0x144>)
 8002c30:	701a      	strb	r2, [r3, #0]
        			update_alert(i,0); // clear current alert
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff63 	bl	8002b04 <update_alert>
        			i++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3301      	adds	r3, #1
 8002c42:	607b      	str	r3, [r7, #4]
        		}
        		if (*flags[4]){ // if "next" pressed
 8002c44:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <show_alerts+0x154>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <show_alerts+0xe4>
        			//clear_flag(4);
        			if(i==11){i=0;} // wrap to first index
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0b      	cmp	r3, #11
 8002c52:	d102      	bne.n	8002c5a <show_alerts+0xde>
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e002      	b.n	8002c60 <show_alerts+0xe4>
        			else {i++;}
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
        		}
        		if (*flags[3]){ // if "back" pressed
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <show_alerts+0x154>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d092      	beq.n	8002b90 <show_alerts+0x14>
        			//clear_flag(3);
        			if(i==0) {i=11;}  // wrap to last index
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <show_alerts+0xfa>
 8002c70:	230b      	movs	r3, #11
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	e78c      	b.n	8002b90 <show_alerts+0x14>
        			else {i--;}
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e788      	b.n	8002b90 <show_alerts+0x14>
        		}
        	} else if(*flags[4]) {
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <show_alerts+0x154>)
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <show_alerts+0x120>
        		if(i<12){i++;}
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b0b      	cmp	r3, #11
 8002c8c:	dc03      	bgt.n	8002c96 <show_alerts+0x11a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3301      	adds	r3, #1
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	e77c      	b.n	8002b90 <show_alerts+0x14>
        		else{i=0;}
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e779      	b.n	8002b90 <show_alerts+0x14>
        	} else{
        		if(i>0){i--;}
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dd03      	ble.n	8002caa <show_alerts+0x12e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	e772      	b.n	8002b90 <show_alerts+0x14>
        		else{i=11;}
 8002caa:	230b      	movs	r3, #11
 8002cac:	607b      	str	r3, [r7, #4]
        if (alerts_set==0){
 8002cae:	e76f      	b.n	8002b90 <show_alerts+0x14>
        	}
        }
    }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cba:	b004      	add	sp, #16
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000564 	.word	0x20000564
 8002cc4:	0800899c 	.word	0x0800899c
 8002cc8:	080089a8 	.word	0x080089a8
 8002ccc:	200000b4 	.word	0x200000b4
 8002cd0:	20000098 	.word	0x20000098

08002cd4 <display_toggle>:

/* Toggles display_is_on indicator
 */
void display_toggle(){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
    display_is_on = (!display_is_on);
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <display_toggle+0x38>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <display_toggle+0x38>)
 8002cf4:	701a      	strb	r2, [r3, #0]
    if (display_is_on){display_on();}
 8002cf6:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <display_toggle+0x38>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <display_toggle+0x30>
 8002cfe:	f7fe fbb3 	bl	8001468 <display_on>
    else {display_off();}
}
 8002d02:	e001      	b.n	8002d08 <display_toggle+0x34>
    else {display_off();}
 8002d04:	f7fe fba8 	bl	8001458 <display_off>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200000b0 	.word	0x200000b0

08002d10 <_write_register>:
#define REG_POWER_SAVING_PSM_2  (0x01 << 1)
#define REG_POWER_SAVING_PSM_3  (0x02 << 1)
#define REG_POWER_SAVING_PSM_4  (0x03 << 1)
#define REG_POWER_SAVING_ENABLE  0x01

static uint32_t _write_register(veml7700 *veml, uint8_t reg, uint16_t value){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	803b      	strh	r3, [r7, #0]
  uint8_t payload[3] = {reg, value & 0xff, value >> 8};
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	733b      	strb	r3, [r7, #12]
 8002d24:	883b      	ldrh	r3, [r7, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	737b      	strb	r3, [r7, #13]
 8002d2a:	883b      	ldrh	r3, [r7, #0]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	73bb      	strb	r3, [r7, #14]

  return HAL_I2C_Master_Transmit(veml->i2c, veml->write_addr, &payload[0], 3, 500);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	795b      	ldrb	r3, [r3, #5]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f107 020c 	add.w	r2, r7, #12
 8002d42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f001 fd4f 	bl	80047ec <HAL_I2C_Master_Transmit>
 8002d4e:	4603      	mov	r3, r0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_read_register>:

static uint16_t _read_register(veml7700 *veml, uint8_t reg){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af04      	add	r7, sp, #16
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
  uint8_t payload[2] = {0};
 8002d64:	2300      	movs	r3, #0
 8002d66:	813b      	strh	r3, [r7, #8]

  int err = HAL_I2C_Mem_Read(veml->i2c, veml->write_addr, reg, 1, &payload[0], 2, 500);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	795b      	ldrb	r3, [r3, #5]
 8002d70:	4619      	mov	r1, r3
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d7a:	9302      	str	r3, [sp, #8]
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	f001 fe48 	bl	8004a1c <HAL_I2C_Mem_Read>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]
  if (err != HAL_OK) {
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <_read_register+0x42>
    return 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e007      	b.n	8002daa <_read_register+0x52>
  }
  return (payload[1] << 8) | payload[0];
 8002d9a:	7a7b      	ldrb	r3, [r7, #9]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	7a3b      	ldrb	r3, [r7, #8]
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	b29b      	uxth	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <veml7700_init>:

uint32_t veml7700_init(veml7700 *veml, I2C_HandleTypeDef *i2c, uint8_t addr){
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  veml->read_addr  = (addr << 1) | 0x01;
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	711a      	strb	r2, [r3, #4]
  veml->write_addr = (addr << 1);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	715a      	strb	r2, [r3, #5]
  veml->i2c        = i2c;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	601a      	str	r2, [r3, #0]

  // Reset VEML configuration (in order to check device)
  return _write_register(veml, REG_ALS_CONF, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff92 	bl	8002d10 <_write_register>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <veml7700_power_on>:

uint32_t veml7700_power_on(veml7700 *veml){
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  // Get current config and clear shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ffa9 	bl	8002d58 <_read_register>
 8002e06:	4603      	mov	r3, r0
 8002e08:	81fb      	strh	r3, [r7, #14]
  config &= ~REG_ALS_CONF_SHUTDOWN;
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	81fb      	strh	r3, [r7, #14]

  return _write_register(veml, REG_ALS_CONF, config);
 8002e12:	89fb      	ldrh	r3, [r7, #14]
 8002e14:	461a      	mov	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff79 	bl	8002d10 <_write_register>
 8002e1e:	4603      	mov	r3, r0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <veml7700_shutdown>:

uint32_t veml7700_shutdown(veml7700 *veml){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  // Get current config and set shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff90 	bl	8002d58 <_read_register>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	81fb      	strh	r3, [r7, #14]
  config |= REG_ALS_CONF_SHUTDOWN;
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	81fb      	strh	r3, [r7, #14]

  return _write_register(veml, REG_ALS_CONF, config);
 8002e44:	89fb      	ldrh	r3, [r7, #14]
 8002e46:	461a      	mov	r2, r3
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff60 	bl	8002d10 <_write_register>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <veml7700_read_als>:
uint16_t veml7700_get_als_gain(veml7700 *veml){
  uint16_t config = _read_register(veml, REG_ALS_CONF);
  return (config & REG_ALS_CONF_GAIN_4TH) >> 11;
}

uint16_t veml7700_read_als(veml7700 *veml){
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return _read_register(veml, REG_ALS);
 8002e62:	2104      	movs	r1, #4
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff77 	bl	8002d58 <_read_register>
 8002e6a:	4603      	mov	r3, r0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e78:	f7ff fdb0 	bl	80029dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e7c:	480c      	ldr	r0, [pc, #48]	@ (8002eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e7e:	490d      	ldr	r1, [pc, #52]	@ (8002eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <LoopForever+0xe>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e84:	e002      	b.n	8002e8c <LoopCopyDataInit>

08002e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8a:	3304      	adds	r3, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e90:	d3f9      	bcc.n	8002e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec0 <LoopForever+0x16>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e98:	e001      	b.n	8002e9e <LoopFillZerobss>

08002e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e9c:	3204      	adds	r2, #4

08002e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea0:	d3fb      	bcc.n	8002e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ea2:	f004 f8a7 	bl	8006ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ea6:	f7fe faf3 	bl	8001490 <main>

08002eaa <LoopForever>:

LoopForever:
    b LoopForever
 8002eaa:	e7fe      	b.n	8002eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8002eb8:	08008a70 	.word	0x08008a70
  ldr r2, =_sbss
 8002ebc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002ec0:	200006cc 	.word	0x200006cc

08002ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <ADC1_IRQHandler>

08002ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f001 fa03 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f000 f80e 	bl	8002ef8 <HAL_InitTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	e001      	b.n	8002eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ee8:	f7ff fb62 	bl	80025b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_InitTick+0x6c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d023      	beq.n	8002f54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f0c:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_InitTick+0x70>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <HAL_InitTick+0x6c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fa0f 	bl	8004346 <HAL_SYSTICK_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d809      	bhi.n	8002f48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f001 f9d9 	bl	80042f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f40:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_InitTick+0x74>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e007      	b.n	8002f58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e004      	b.n	8002f58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e001      	b.n	8002f58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200000e8 	.word	0x200000e8
 8002f68:	200000ac 	.word	0x200000ac
 8002f6c:	200000e4 	.word	0x200000e4

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	200000e8 	.word	0x200000e8
 8002f94:	20000580 	.word	0x20000580

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000580 	.word	0x20000580

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff ffee 	bl	8002f98 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200000e8 	.word	0x200000e8

08002ff8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3360      	adds	r3, #96	@ 0x60
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <LL_ADC_SetOffset+0x44>)
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	4313      	orrs	r3, r2
 8003090:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	03fff000 	.word	0x03fff000

080030a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3360      	adds	r3, #96	@ 0x60
 80030b6:	461a      	mov	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3360      	adds	r3, #96	@ 0x60
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	615a      	str	r2, [r3, #20]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3330      	adds	r3, #48	@ 0x30
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	4413      	add	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	211f      	movs	r1, #31
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	f003 011f 	and.w	r1, r3, #31
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3314      	adds	r3, #20
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0e5b      	lsrs	r3, r3, #25
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	0d1b      	lsrs	r3, r3, #20
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2107      	movs	r1, #7
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0d1b      	lsrs	r3, r3, #20
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	431a      	orrs	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0318 	and.w	r3, r3, #24
 8003226:	4908      	ldr	r1, [pc, #32]	@ (8003248 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003228:	40d9      	lsrs	r1, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	400b      	ands	r3, r1
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	0007ffff 	.word	0x0007ffff

0800324c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800325c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003284:	d101      	bne.n	800328a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <LL_ADC_IsEnabled+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_ADC_IsEnabled+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003346:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800334a:	f043 0204 	orr.w	r2, r3, #4
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d101      	bne.n	8003376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d101      	bne.n	800339c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e129      	b.n	800361a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff f90f 	bl	80025f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff3f 	bl	8003270 <LL_ADC_IsDeepPowerDownEnabled>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff25 	bl	800324c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff5a 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d115      	bne.n	800343e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff3e 	bl	8003298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341c:	4b81      	ldr	r3, [pc, #516]	@ (8003624 <HAL_ADC_Init+0x278>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	4a81      	ldr	r2, [pc, #516]	@ (8003628 <HAL_ADC_Init+0x27c>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003430:	e002      	b.n	8003438 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f9      	bne.n	8003432 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff3c 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff75 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 8003474:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80c2 	bne.w	8003608 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80be 	bne.w	8003608 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003494:	f043 0202 	orr.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff35 	bl	8003310 <LL_ADC_IsEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ac:	485f      	ldr	r0, [pc, #380]	@ (800362c <HAL_ADC_Init+0x280>)
 80034ae:	f7ff ff2f 	bl	8003310 <LL_ADC_IsEnabled>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4619      	mov	r1, r3
 80034be:	485c      	ldr	r0, [pc, #368]	@ (8003630 <HAL_ADC_Init+0x284>)
 80034c0:	f7ff fd9a 	bl	8002ff8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e5b      	ldrb	r3, [r3, #25]
 80034c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80034d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80034da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	3b01      	subs	r3, #1
 80034f8:	045b      	lsls	r3, r3, #17
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <HAL_ADC_Init+0x288>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff25 	bl	8003384 <LL_ADC_INJ_IsConversionOngoing>
 800353a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d140      	bne.n	80035c4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d13d      	bne.n	80035c4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7e1b      	ldrb	r3, [r3, #24]
 8003550:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003552:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800355a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800356a:	f023 0306 	bic.w	r3, r3, #6
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	430b      	orrs	r3, r1
 8003576:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800357e:	2b01      	cmp	r3, #1
 8003580:	d118      	bne.n	80035b4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003598:	4311      	orrs	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035a4:	430a      	orrs	r2, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e007      	b.n	80035c4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	f023 010f 	bic.w	r1, r3, #15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e4:	e007      	b.n	80035f6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 020f 	bic.w	r2, r2, #15
 80035f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58
 8003606:	e007      	b.n	8003618 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f043 0210 	orr.w	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003618:	7ffb      	ldrb	r3, [r7, #31]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200000ac 	.word	0x200000ac
 8003628:	053e2d63 	.word	0x053e2d63
 800362c:	50040000 	.word	0x50040000
 8003630:	50040300 	.word	0x50040300
 8003634:	fff0c007 	.word	0xfff0c007

08003638 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fe8a 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d14f      	bne.n	80036f0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADC_Start+0x26>
 800365a:	2302      	movs	r3, #2
 800365c:	e04b      	b.n	80036f6 <HAL_ADC_Start+0xbe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fce2 	bl	8004030 <ADC_Enable>
 800366c:	4603      	mov	r3, r0
 800366e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d137      	bne.n	80036e6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003696:	d106      	bne.n	80036a6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f023 0206 	bic.w	r2, r3, #6
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036a4:	e002      	b.n	80036ac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	221c      	movs	r2, #28
 80036b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fe29 	bl	8003336 <LL_ADC_REG_StartConversion>
 80036e4:	e006      	b.n	80036f4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80036ee:	e001      	b.n	80036f4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d102      	bne.n	8003716 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003710:	2308      	movs	r3, #8
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e010      	b.n	8003738 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e06f      	b.n	8003814 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003734:	2304      	movs	r3, #4
 8003736:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003738:	f7ff fc2e 	bl	8002f98 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800373e:	e021      	b.n	8003784 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d01d      	beq.n	8003784 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003748:	f7ff fc26 	bl	8002f98 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <HAL_ADC_PollForConversion+0x60>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d112      	bne.n	8003784 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e047      	b.n	8003814 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0d6      	beq.n	8003740 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fcc4 	bl	8003130 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01c      	beq.n	80037e8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7e5b      	ldrb	r3, [r3, #25]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d111      	bne.n	80037e8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d104      	bne.n	8003800 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2208      	movs	r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e008      	b.n	8003812 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	220c      	movs	r2, #12
 8003810:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b0b6      	sub	sp, #216	@ 0xd8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ADC_ConfigChannel+0x22>
 8003856:	2302      	movs	r3, #2
 8003858:	e3d5      	b.n	8004006 <HAL_ADC_ConfigChannel+0x7ce>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fd79 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 83ba 	bne.w	8003fe8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d824      	bhi.n	80038ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	3b02      	subs	r3, #2
 800388a:	2b03      	cmp	r3, #3
 800388c:	d81b      	bhi.n	80038c6 <HAL_ADC_ConfigChannel+0x8e>
 800388e:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <HAL_ADC_ConfigChannel+0x5c>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038ad 	.word	0x080038ad
 800389c:	080038b5 	.word	0x080038b5
 80038a0:	080038bd 	.word	0x080038bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80038a4:	230c      	movs	r3, #12
 80038a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80038aa:	e010      	b.n	80038ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80038ac:	2312      	movs	r3, #18
 80038ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80038b2:	e00c      	b.n	80038ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80038b4:	2318      	movs	r3, #24
 80038b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80038ba:	e008      	b.n	80038ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80038bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80038c4:	e003      	b.n	80038ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80038c6:	2306      	movs	r3, #6
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80038cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80038dc:	f7ff fc3b 	bl	8003156 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fd3a 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 80038ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fd46 	bl	8003384 <LL_ADC_INJ_IsConversionOngoing>
 80038f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 81bf 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 81ba 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003918:	d10f      	bne.n	800393a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	4619      	mov	r1, r3
 8003926:	f7ff fc42 	bl	80031ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fbe9 	bl	800310a <LL_ADC_SetSamplingTimeCommonConfig>
 8003938:	e00e      	b.n	8003958 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	461a      	mov	r2, r3
 8003948:	f7ff fc31 	bl	80031ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fbd9 	bl	800310a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d00a      	beq.n	8003990 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6919      	ldr	r1, [r3, #16]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398a:	f7ff fb69 	bl	8003060 <LL_ADC_SetOffset>
 800398e:	e179      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fb86 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x184>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fb7b 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	0e9b      	lsrs	r3, r3, #26
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	e01e      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1c2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fb70 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80039ea:	2320      	movs	r3, #32
 80039ec:	e004      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80039ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x1da>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0e9b      	lsrs	r3, r3, #26
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	e018      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x20c>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e004      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003a3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d106      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fb3f 	bl	80030d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fb23 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x24a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fb18 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	e01e      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x288>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fb0d 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e004      	b.n	8003abe <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003ab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x2a0>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	e018      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x2d2>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e004      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d106      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fadc 	bl	80030d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fac0 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x310>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fab5 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	f003 021f 	and.w	r2, r3, #31
 8003b46:	e01e      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x34e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff faaa 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003b76:	2320      	movs	r3, #32
 8003b78:	e004      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x366>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	e014      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x390>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	e004      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003bbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fa7d 	bl	80030d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2103      	movs	r1, #3
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fa61 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x3ce>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fa56 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	0e9b      	lsrs	r3, r3, #26
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	e017      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x3fe>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fa4b 	bl	80030a8 <LL_ADC_GetOffsetChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c20:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e003      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x416>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0e9b      	lsrs	r3, r3, #26
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	e011      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x43a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003c5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d106      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2103      	movs	r1, #3
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fa28 	bl	80030d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fb41 	bl	8003310 <LL_ADC_IsEnabled>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 813f 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7ff faae 	bl	8003204 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a8e      	ldr	r2, [pc, #568]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x6b0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f040 8130 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x4a4>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	bf94      	ite	ls
 8003cd4:	2301      	movls	r3, #1
 8003cd6:	2300      	movhi	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	e019      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x4d8>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	e003      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2b09      	cmp	r3, #9
 8003d08:	bf94      	ite	ls
 8003d0a:	2301      	movls	r3, #1
 8003d0c:	2300      	movhi	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d079      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x4f8>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	0e9b      	lsrs	r3, r3, #26
 8003d26:	3301      	adds	r3, #1
 8003d28:	069b      	lsls	r3, r3, #26
 8003d2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d2e:	e015      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x524>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e003      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	069b      	lsls	r3, r3, #26
 8003d58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x544>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	e017      	b.n	8003dac <HAL_ADC_ConfigChannel+0x574>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e003      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x59a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	051b      	lsls	r3, r3, #20
 8003dd0:	e018      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x5cc>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003dea:	2320      	movs	r3, #32
 8003dec:	e003      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e04:	430b      	orrs	r3, r1
 8003e06:	e080      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x5ec>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	069b      	lsls	r3, r3, #26
 8003e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e22:	e015      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x618>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	069b      	lsls	r3, r3, #26
 8003e4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x638>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	3301      	adds	r3, #1
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	e017      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x668>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	61bb      	str	r3, [r7, #24]
  return result;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e003      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	ea42 0103 	orr.w	r1, r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x694>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0e9b      	lsrs	r3, r3, #26
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b1e      	subs	r3, #30
 8003ec4:	051b      	lsls	r3, r3, #20
 8003ec6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	e01d      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x6d0>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	60fb      	str	r3, [r7, #12]
  return result;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e005      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x6bc>
 8003ee8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f003 021f 	and.w	r2, r3, #31
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	3b1e      	subs	r3, #30
 8003f02:	051b      	lsls	r3, r3, #20
 8003f04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f08:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7ff f94d 	bl	80031ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d06c      	beq.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f20:	483c      	ldr	r0, [pc, #240]	@ (8004014 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f22:	f7ff f88f 	bl	8003044 <LL_ADC_GetCommonPathInternalCh>
 8003f26:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8004018 <HAL_ADC_ConfigChannel+0x7e0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d127      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d121      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a35      	ldr	r2, [pc, #212]	@ (800401c <HAL_ADC_ConfigChannel+0x7e4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d157      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f52:	4619      	mov	r1, r3
 8003f54:	482f      	ldr	r0, [pc, #188]	@ (8004014 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f56:	f7ff f862 	bl	800301e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f5a:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_ADC_ConfigChannel+0x7e8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <HAL_ADC_ConfigChannel+0x7ec>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f74:	e002      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f9      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f82:	e03a      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a27      	ldr	r2, [pc, #156]	@ (8004028 <HAL_ADC_ConfigChannel+0x7f0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d113      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_ADC_ConfigChannel+0x7e4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d12a      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fac:	4619      	mov	r1, r3
 8003fae:	4819      	ldr	r0, [pc, #100]	@ (8004014 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fb0:	f7ff f835 	bl	800301e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fb4:	e021      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <HAL_ADC_ConfigChannel+0x7f4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d11c      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d116      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a12      	ldr	r2, [pc, #72]	@ (800401c <HAL_ADC_ConfigChannel+0x7e4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480c      	ldr	r0, [pc, #48]	@ (8004014 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fe2:	f7ff f81c 	bl	800301e <LL_ADC_SetCommonPathInternalCh>
 8003fe6:	e008      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004002:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004006:	4618      	mov	r0, r3
 8004008:	37d8      	adds	r7, #216	@ 0xd8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	80080000 	.word	0x80080000
 8004014:	50040300 	.word	0x50040300
 8004018:	c7520000 	.word	0xc7520000
 800401c:	50040000 	.word	0x50040000
 8004020:	200000ac 	.word	0x200000ac
 8004024:	053e2d63 	.word	0x053e2d63
 8004028:	cb840000 	.word	0xcb840000
 800402c:	80000001 	.word	0x80000001

08004030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff f965 	bl	8003310 <LL_ADC_IsEnabled>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d169      	bne.n	8004120 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	4b36      	ldr	r3, [pc, #216]	@ (800412c <ADC_Enable+0xfc>)
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	f043 0210 	orr.w	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e055      	b.n	8004122 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f934 	bl	80032e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004080:	482b      	ldr	r0, [pc, #172]	@ (8004130 <ADC_Enable+0x100>)
 8004082:	f7fe ffdf 	bl	8003044 <LL_ADC_GetCommonPathInternalCh>
 8004086:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004090:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <ADC_Enable+0x104>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <ADC_Enable+0x108>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040b8:	f7fe ff6e 	bl	8002f98 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040be:	e028      	b.n	8004112 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff f923 	bl	8003310 <LL_ADC_IsEnabled>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f907 	bl	80032e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040da:	f7fe ff5d 	bl	8002f98 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d914      	bls.n	8004112 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d00d      	beq.n	8004112 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	f043 0210 	orr.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e007      	b.n	8004122 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	d1cf      	bne.n	80040c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	8000003f 	.word	0x8000003f
 8004130:	50040300 	.word	0x50040300
 8004134:	200000ac 	.word	0x200000ac
 8004138:	053e2d63 	.word	0x053e2d63

0800413c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	@ (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	@ (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	@ (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	@ 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
         );
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004304:	f7ff ff3e 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff8e 	bl	8004230 <NVIC_EncodePriority>
 8004314:	4602      	mov	r2, r0
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff5d 	bl	80041dc <__NVIC_SetPriority>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff31 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffa2 	bl	8004298 <SysTick_Config>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436e:	e154      	b.n	800461a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	4013      	ands	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8146 	beq.w	8004614 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d005      	beq.n	80043a0 <HAL_GPIO_Init+0x40>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d130      	bne.n	8004402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043d6:	2201      	movs	r2, #1
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0201 	and.w	r2, r3, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b03      	cmp	r3, #3
 800440c:	d017      	beq.n	800443e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	2203      	movs	r2, #3
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d123      	bne.n	8004492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	08da      	lsrs	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	220f      	movs	r2, #15
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	08da      	lsrs	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3208      	adds	r2, #8
 800448c:	6939      	ldr	r1, [r7, #16]
 800448e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0203 	and.w	r2, r3, #3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a0 	beq.w	8004614 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d4:	4b58      	ldr	r3, [pc, #352]	@ (8004638 <HAL_GPIO_Init+0x2d8>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	4a57      	ldr	r2, [pc, #348]	@ (8004638 <HAL_GPIO_Init+0x2d8>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6613      	str	r3, [r2, #96]	@ 0x60
 80044e0:	4b55      	ldr	r3, [pc, #340]	@ (8004638 <HAL_GPIO_Init+0x2d8>)
 80044e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044ec:	4a53      	ldr	r2, [pc, #332]	@ (800463c <HAL_GPIO_Init+0x2dc>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	3302      	adds	r3, #2
 80044f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004516:	d019      	beq.n	800454c <HAL_GPIO_Init+0x1ec>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a49      	ldr	r2, [pc, #292]	@ (8004640 <HAL_GPIO_Init+0x2e0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_Init+0x1e8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a48      	ldr	r2, [pc, #288]	@ (8004644 <HAL_GPIO_Init+0x2e4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_Init+0x1e4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <HAL_GPIO_Init+0x2e8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_Init+0x1e0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a46      	ldr	r2, [pc, #280]	@ (800464c <HAL_GPIO_Init+0x2ec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_Init+0x1dc>
 8004538:	2304      	movs	r3, #4
 800453a:	e008      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 800453c:	2307      	movs	r3, #7
 800453e:	e006      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004540:	2303      	movs	r3, #3
 8004542:	e004      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004544:	2302      	movs	r3, #2
 8004546:	e002      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 800454c:	2300      	movs	r3, #0
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	f002 0203 	and.w	r2, r2, #3
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	4093      	lsls	r3, r2
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800455e:	4937      	ldr	r1, [pc, #220]	@ (800463c <HAL_GPIO_Init+0x2dc>)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	3302      	adds	r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800456c:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004590:	4a2f      	ldr	r2, [pc, #188]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004596:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ba:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045c0:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045ea:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <HAL_GPIO_Init+0x2f0>)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	f47f aea3 	bne.w	8004370 <HAL_GPIO_Init+0x10>
  }
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000
 8004640:	48000400 	.word	0x48000400
 8004644:	48000800 	.word	0x48000800
 8004648:	48000c00 	.word	0x48000c00
 800464c:	48001000 	.word	0x48001000
 8004650:	40010400 	.word	0x40010400

08004654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
 8004660:	4613      	mov	r3, r2
 8004662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004664:	787b      	ldrb	r3, [r7, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004670:	e002      	b.n	8004678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800468e:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800469a:	4a05      	ldr	r2, [pc, #20]	@ (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fadc 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40010400 	.word	0x40010400

080046b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e08d      	b.n	80047e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fff4 	bl	80026c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	@ 0x24
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	e006      	b.n	800473c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800473a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d108      	bne.n	8004756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e007      	b.n	8004766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	460b      	mov	r3, r1
 80047fa:	817b      	strh	r3, [r7, #10]
 80047fc:	4613      	mov	r3, r2
 80047fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b20      	cmp	r3, #32
 800480a:	f040 80fd 	bne.w	8004a08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2C_Master_Transmit+0x30>
 8004818:	2302      	movs	r3, #2
 800481a:	e0f6      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004824:	f7fe fbb8 	bl	8002f98 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2319      	movs	r3, #25
 8004830:	2201      	movs	r2, #1
 8004832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa82 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0e1      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2221      	movs	r2, #33	@ 0x21
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2210      	movs	r2, #16
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	893a      	ldrh	r2, [r7, #8]
 8004866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2bff      	cmp	r3, #255	@ 0xff
 8004876:	d906      	bls.n	8004886 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	22ff      	movs	r2, #255	@ 0xff
 800487c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800487e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e007      	b.n	8004896 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004894:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d024      	beq.n	80048e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	8979      	ldrh	r1, [r7, #10]
 80048da:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <HAL_I2C_Master_Transmit+0x228>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 fbf1 	bl	80050c8 <I2C_TransferConfig>
 80048e6:	e066      	b.n	80049b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	8979      	ldrh	r1, [r7, #10]
 80048f0:	4b48      	ldr	r3, [pc, #288]	@ (8004a14 <HAL_I2C_Master_Transmit+0x228>)
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fbe6 	bl	80050c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80048fc:	e05b      	b.n	80049b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	6a39      	ldr	r1, [r7, #32]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa75 	bl	8004df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07b      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	781a      	ldrb	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d034      	beq.n	80049b6 <HAL_I2C_Master_Transmit+0x1ca>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d130      	bne.n	80049b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2200      	movs	r2, #0
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f9ee 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e04d      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2bff      	cmp	r3, #255	@ 0xff
 8004976:	d90e      	bls.n	8004996 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22ff      	movs	r2, #255	@ 0xff
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fb9a 	bl	80050c8 <I2C_TransferConfig>
 8004994:	e00f      	b.n	80049b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	8979      	ldrh	r1, [r7, #10]
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fb89 	bl	80050c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d19e      	bne.n	80048fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	6a39      	ldr	r1, [r7, #32]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa5b 	bl	8004e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e01a      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2220      	movs	r2, #32
 80049da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <HAL_I2C_Master_Transmit+0x22c>)
 80049e8:	400b      	ands	r3, r1
 80049ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	80002000 	.word	0x80002000
 8004a18:	fe00e800 	.word	0xfe00e800

08004a1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	f040 80fd 	bne.w	8004c3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_I2C_Mem_Read+0x34>
 8004a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0f1      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_I2C_Mem_Read+0x4e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e0ea      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a72:	f7fe fa91 	bl	8002f98 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2319      	movs	r3, #25
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f95b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0d5      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2222      	movs	r2, #34	@ 0x22
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2240      	movs	r2, #64	@ 0x40
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abc:	88f8      	ldrh	r0, [r7, #6]
 8004abe:	893a      	ldrh	r2, [r7, #8]
 8004ac0:	8979      	ldrh	r1, [r7, #10]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4603      	mov	r3, r0
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f8bf 	bl	8004c50 <I2C_RequestMemoryRead>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0ad      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d90e      	bls.n	8004b0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	8979      	ldrh	r1, [r7, #10]
 8004afc:	4b52      	ldr	r3, [pc, #328]	@ (8004c48 <HAL_I2C_Mem_Read+0x22c>)
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fadf 	bl	80050c8 <I2C_TransferConfig>
 8004b0a:	e00f      	b.n	8004b2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	8979      	ldrh	r1, [r7, #10]
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c48 <HAL_I2C_Mem_Read+0x22c>)
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 face 	bl	80050c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	2200      	movs	r2, #0
 8004b34:	2104      	movs	r1, #4
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f902 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07c      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d034      	beq.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d130      	bne.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	@ 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f8d3 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e04d      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2bff      	cmp	r3, #255	@ 0xff
 8004bac:	d90e      	bls.n	8004bcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	8979      	ldrh	r1, [r7, #10]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fa7f 	bl	80050c8 <I2C_TransferConfig>
 8004bca:	e00f      	b.n	8004bec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa6e 	bl	80050c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d19a      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f940 	bl	8004e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01a      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_I2C_Mem_Read+0x230>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	80002400 	.word	0x80002400
 8004c4c:	fe00e800 	.word	0xfe00e800

08004c50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	817b      	strh	r3, [r7, #10]
 8004c62:	460b      	mov	r3, r1
 8004c64:	813b      	strh	r3, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	8979      	ldrh	r1, [r7, #10]
 8004c70:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <I2C_RequestMemoryRead+0xa4>)
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fa26 	bl	80050c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	69b9      	ldr	r1, [r7, #24]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f8b6 	bl	8004df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e02c      	b.n	8004cea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c96:	893b      	ldrh	r3, [r7, #8]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca0:	e015      	b.n	8004cce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f89c 	bl	8004df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e012      	b.n	8004cea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2140      	movs	r1, #64	@ 0x40
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f831 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	80002000 	.word	0x80002000

08004cf8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d103      	bne.n	8004d16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d007      	beq.n	8004d34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	619a      	str	r2, [r3, #24]
  }
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d50:	e03b      	b.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8d6 	bl	8004f08 <I2C_IsErrorOccurred>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e041      	b.n	8004dea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d02d      	beq.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe f913 	bl	8002f98 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d122      	bne.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d113      	bne.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e00f      	b.n	8004dea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d0b4      	beq.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dfe:	e033      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f87f 	bl	8004f08 <I2C_IsErrorOccurred>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e031      	b.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d025      	beq.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	f7fe f8bc 	bl	8002f98 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d302      	bcc.n	8004e32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11a      	bne.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d013      	beq.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e007      	b.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d1c4      	bne.n	8004e00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e8c:	e02f      	b.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f838 	bl	8004f08 <I2C_IsErrorOccurred>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e02d      	b.n	8004efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fe f879 	bl	8002f98 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11a      	bne.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d013      	beq.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e007      	b.n	8004efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d1c8      	bne.n	8004e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d068      	beq.n	8005006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f3c:	e049      	b.n	8004fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d045      	beq.n	8004fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fe f827 	bl	8002f98 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_IsErrorOccurred+0x54>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d13a      	bne.n	8004fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f7e:	d121      	bne.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f86:	d01d      	beq.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d01a      	beq.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f9e:	f7fd fffb 	bl	8002f98 <HAL_GetTick>
 8004fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa4:	e00e      	b.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fa6:	f7fd fff7 	bl	8002f98 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b19      	cmp	r3, #25
 8004fb2:	d907      	bls.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f043 0320 	orr.w	r3, r3, #32
 8004fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004fc2:	e006      	b.n	8004fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d1e9      	bne.n	8004fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d003      	beq.n	8004fe8 <I2C_IsErrorOccurred+0xe0>
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0aa      	beq.n	8004f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800504a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800506c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff fe3b 	bl	8004cf8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <I2C_IsErrorOccurred+0x1bc>)
 800508e:	400b      	ands	r3, r1
 8005090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80050b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3728      	adds	r7, #40	@ 0x28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	fe00e800 	.word	0xfe00e800

080050c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	817b      	strh	r3, [r7, #10]
 80050d6:	4613      	mov	r3, r2
 80050d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050e0:	7a7b      	ldrb	r3, [r7, #9]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	0d5b      	lsrs	r3, r3, #21
 8005102:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005106:	4b08      	ldr	r3, [pc, #32]	@ (8005128 <I2C_TransferConfig+0x60>)
 8005108:	430b      	orrs	r3, r1
 800510a:	43db      	mvns	r3, r3
 800510c:	ea02 0103 	and.w	r1, r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	03ff63ff 	.word	0x03ff63ff

0800512c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d138      	bne.n	80051b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800514c:	2302      	movs	r3, #2
 800514e:	e032      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800517e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d139      	bne.n	800524c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e033      	b.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	@ 0x24
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005260:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <HAL_PWREx_GetVoltageRange+0x18>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40007000 	.word	0x40007000

08005278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005286:	d130      	bne.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005288:	4b23      	ldr	r3, [pc, #140]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005294:	d038      	beq.n	8005308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005296:	4b20      	ldr	r3, [pc, #128]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800529e:	4a1e      	ldr	r2, [pc, #120]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052a6:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2232      	movs	r2, #50	@ 0x32
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0c9b      	lsrs	r3, r3, #18
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052bc:	e002      	b.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c4:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	d102      	bne.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f2      	bne.n	80052be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e4:	d110      	bne.n	8005308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	d007      	beq.n	8005308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052f8:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005300:	4a05      	ldr	r2, [pc, #20]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40007000 	.word	0x40007000
 800531c:	200000ac 	.word	0x200000ac
 8005320:	431bde83 	.word	0x431bde83

08005324 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f000 bc02 	b.w	8005b3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005338:	4b96      	ldr	r3, [pc, #600]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005342:	4b94      	ldr	r3, [pc, #592]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80e4 	beq.w	8005522 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_RCC_OscConfig+0x4c>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	f040 808b 	bne.w	800547e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 8087 	bne.w	800547e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005370:	4b88      	ldr	r3, [pc, #544]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x64>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e3d9      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	4b81      	ldr	r3, [pc, #516]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_RCC_OscConfig+0x7e>
 8005398:	4b7e      	ldr	r3, [pc, #504]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a0:	e005      	b.n	80053ae <HAL_RCC_OscConfig+0x8a>
 80053a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d223      	bcs.n	80053fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fd54 	bl	8005e64 <RCC_SetFlashLatencyFromMSIRange>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e3ba      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c6:	4b73      	ldr	r3, [pc, #460]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a72      	ldr	r2, [pc, #456]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053cc:	f043 0308 	orr.w	r3, r3, #8
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b70      	ldr	r3, [pc, #448]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	496d      	ldr	r1, [pc, #436]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	4968      	ldr	r1, [pc, #416]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
 80053f8:	e025      	b.n	8005446 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053fa:	4b66      	ldr	r3, [pc, #408]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a65      	ldr	r2, [pc, #404]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005400:	f043 0308 	orr.w	r3, r3, #8
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b63      	ldr	r3, [pc, #396]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	4960      	ldr	r1, [pc, #384]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005418:	4b5e      	ldr	r3, [pc, #376]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	495b      	ldr	r1, [pc, #364]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fd14 	bl	8005e64 <RCC_SetFlashLatencyFromMSIRange>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e37a      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005446:	f000 fc81 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 800544a:	4602      	mov	r2, r0
 800544c:	4b51      	ldr	r3, [pc, #324]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	4950      	ldr	r1, [pc, #320]	@ (8005598 <HAL_RCC_OscConfig+0x274>)
 8005458:	5ccb      	ldrb	r3, [r1, r3]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a4e      	ldr	r2, [pc, #312]	@ (800559c <HAL_RCC_OscConfig+0x278>)
 8005464:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005466:	4b4e      	ldr	r3, [pc, #312]	@ (80055a0 <HAL_RCC_OscConfig+0x27c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd fd44 	bl	8002ef8 <HAL_InitTick>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d052      	beq.n	8005520 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	e35e      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d032      	beq.n	80054ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005486:	4b43      	ldr	r3, [pc, #268]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a42      	ldr	r2, [pc, #264]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005492:	f7fd fd81 	bl	8002f98 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800549a:	f7fd fd7d 	bl	8002f98 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e347      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ac:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b8:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a35      	ldr	r2, [pc, #212]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054be:	f043 0308 	orr.w	r3, r3, #8
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b33      	ldr	r3, [pc, #204]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4930      	ldr	r1, [pc, #192]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	492b      	ldr	r1, [pc, #172]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	604b      	str	r3, [r1, #4]
 80054ea:	e01a      	b.n	8005522 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054ec:	4b29      	ldr	r3, [pc, #164]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a28      	ldr	r2, [pc, #160]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054f8:	f7fd fd4e 	bl	8002f98 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005500:	f7fd fd4a 	bl	8002f98 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e314      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005512:	4b20      	ldr	r3, [pc, #128]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x1dc>
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d073      	beq.n	8005616 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x21c>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d10e      	bne.n	8005558 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d10b      	bne.n	8005558 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d063      	beq.n	8005614 <HAL_RCC_OscConfig+0x2f0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d15f      	bne.n	8005614 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e2f1      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d106      	bne.n	8005570 <HAL_RCC_OscConfig+0x24c>
 8005562:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e025      	b.n	80055bc <HAL_RCC_OscConfig+0x298>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005578:	d114      	bne.n	80055a4 <HAL_RCC_OscConfig+0x280>
 800557a:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a05      	ldr	r2, [pc, #20]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b03      	ldr	r3, [pc, #12]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a02      	ldr	r2, [pc, #8]	@ (8005594 <HAL_RCC_OscConfig+0x270>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e013      	b.n	80055bc <HAL_RCC_OscConfig+0x298>
 8005594:	40021000 	.word	0x40021000
 8005598:	080089b8 	.word	0x080089b8
 800559c:	200000ac 	.word	0x200000ac
 80055a0:	200000e4 	.word	0x200000e4
 80055a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a9c      	ldr	r2, [pc, #624]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd fce8 	bl	8002f98 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fd fce4 	bl	8002f98 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	@ 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e2ae      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055de:	4b92      	ldr	r3, [pc, #584]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x2a8>
 80055ea:	e014      	b.n	8005616 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd fcd4 	bl	8002f98 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fd fcd0 	bl	8002f98 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	@ 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e29a      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005606:	4b88      	ldr	r3, [pc, #544]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0x2d0>
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d060      	beq.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d005      	beq.n	8005634 <HAL_RCC_OscConfig+0x310>
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d119      	bne.n	8005662 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d116      	bne.n	8005662 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005634:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x328>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e277      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564c:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	4973      	ldr	r1, [pc, #460]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800565c:	4313      	orrs	r3, r2
 800565e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005660:	e040      	b.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d023      	beq.n	80056b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566a:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6e      	ldr	r2, [pc, #440]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fd fc8f 	bl	8002f98 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567e:	f7fd fc8b 	bl	8002f98 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e255      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b65      	ldr	r3, [pc, #404]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b62      	ldr	r3, [pc, #392]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	061b      	lsls	r3, r3, #24
 80056aa:	495f      	ldr	r1, [pc, #380]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	e018      	b.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fc6b 	bl	8002f98 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fd fc67 	bl	8002f98 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e231      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d8:	4b53      	ldr	r3, [pc, #332]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d03c      	beq.n	800576a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01c      	beq.n	8005732 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd fc46 	bl	8002f98 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005710:	f7fd fc42 	bl	8002f98 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e20c      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005722:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCC_OscConfig+0x3ec>
 8005730:	e01b      	b.n	800576a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005732:	4b3d      	ldr	r3, [pc, #244]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005738:	4a3b      	ldr	r2, [pc, #236]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fd fc29 	bl	8002f98 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574a:	f7fd fc25 	bl	8002f98 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1ef      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800575c:	4b32      	ldr	r3, [pc, #200]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ef      	bne.n	800574a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80a6 	beq.w	80058c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005788:	4b27      	ldr	r3, [pc, #156]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578c:	4a26      	ldr	r2, [pc, #152]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6593      	str	r3, [r2, #88]	@ 0x58
 8005794:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a4:	4b21      	ldr	r3, [pc, #132]	@ (800582c <HAL_RCC_OscConfig+0x508>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d118      	bne.n	80057e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b0:	4b1e      	ldr	r3, [pc, #120]	@ (800582c <HAL_RCC_OscConfig+0x508>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <HAL_RCC_OscConfig+0x508>)
 80057b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057bc:	f7fd fbec 	bl	8002f98 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c4:	f7fd fbe8 	bl	8002f98 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1b2      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d6:	4b15      	ldr	r3, [pc, #84]	@ (800582c <HAL_RCC_OscConfig+0x508>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d108      	bne.n	80057fc <HAL_RCC_OscConfig+0x4d8>
 80057ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057fa:	e029      	b.n	8005850 <HAL_RCC_OscConfig+0x52c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b05      	cmp	r3, #5
 8005802:	d115      	bne.n	8005830 <HAL_RCC_OscConfig+0x50c>
 8005804:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	4a07      	ldr	r2, [pc, #28]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581a:	4a03      	ldr	r2, [pc, #12]	@ (8005828 <HAL_RCC_OscConfig+0x504>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005824:	e014      	b.n	8005850 <HAL_RCC_OscConfig+0x52c>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
 8005830:	4b9a      	ldr	r3, [pc, #616]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	4a99      	ldr	r2, [pc, #612]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005840:	4b96      	ldr	r3, [pc, #600]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005846:	4a95      	ldr	r2, [pc, #596]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d016      	beq.n	8005886 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fd fb9e 	bl	8002f98 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585e:	e00a      	b.n	8005876 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fd fb9a 	bl	8002f98 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e162      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005876:	4b89      	ldr	r3, [pc, #548]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ed      	beq.n	8005860 <HAL_RCC_OscConfig+0x53c>
 8005884:	e015      	b.n	80058b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fd fb87 	bl	8002f98 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fd fb83 	bl	8002f98 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e14b      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058a4:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ed      	bne.n	800588e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4b78      	ldr	r3, [pc, #480]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a77      	ldr	r2, [pc, #476]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d03c      	beq.n	800594a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01c      	beq.n	8005912 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058d8:	4b70      	ldr	r3, [pc, #448]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80058da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058de:	4a6f      	ldr	r2, [pc, #444]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fd fb56 	bl	8002f98 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058f0:	f7fd fb52 	bl	8002f98 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e11c      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005902:	4b66      	ldr	r3, [pc, #408]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ef      	beq.n	80058f0 <HAL_RCC_OscConfig+0x5cc>
 8005910:	e01b      	b.n	800594a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005912:	4b62      	ldr	r3, [pc, #392]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005918:	4a60      	ldr	r2, [pc, #384]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fd fb39 	bl	8002f98 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592a:	f7fd fb35 	bl	8002f98 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0ff      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800593c:	4b57      	ldr	r3, [pc, #348]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 800593e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ef      	bne.n	800592a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80f3 	beq.w	8005b3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b02      	cmp	r3, #2
 800595a:	f040 80c9 	bne.w	8005af0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800595e:	4b4f      	ldr	r3, [pc, #316]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f003 0203 	and.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d12c      	bne.n	80059cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	3b01      	subs	r3, #1
 800597e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005980:	429a      	cmp	r2, r3
 8005982:	d123      	bne.n	80059cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d11b      	bne.n	80059cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d113      	bne.n	80059cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	3b01      	subs	r3, #1
 80059b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d109      	bne.n	80059cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	3b01      	subs	r3, #1
 80059c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d06b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d062      	beq.n	8005a98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059d2:	4b32      	ldr	r3, [pc, #200]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0ac      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059e2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 80059e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ee:	f7fd fad3 	bl	8002f98 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f6:	f7fd facf 	bl	8002f98 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e099      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a08:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f0      	bne.n	80059f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a14:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	4b21      	ldr	r3, [pc, #132]	@ (8005aa0 <HAL_RCC_OscConfig+0x77c>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0112      	lsls	r2, r2, #4
 8005a28:	4311      	orrs	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a2e:	0212      	lsls	r2, r2, #8
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a36:	0852      	lsrs	r2, r2, #1
 8005a38:	3a01      	subs	r2, #1
 8005a3a:	0552      	lsls	r2, r2, #21
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a42:	0852      	lsrs	r2, r2, #1
 8005a44:	3a01      	subs	r2, #1
 8005a46:	0652      	lsls	r2, r2, #25
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a4e:	06d2      	lsls	r2, r2, #27
 8005a50:	430a      	orrs	r2, r1
 8005a52:	4912      	ldr	r1, [pc, #72]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a58:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4a0c      	ldr	r2, [pc, #48]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a70:	f7fd fa92 	bl	8002f98 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fd fa8e 	bl	8002f98 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e058      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8a:	4b04      	ldr	r3, [pc, #16]	@ (8005a9c <HAL_RCC_OscConfig+0x778>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a96:	e050      	b.n	8005b3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e04f      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa4:	4b27      	ldr	r3, [pc, #156]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d144      	bne.n	8005b3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a23      	ldr	r2, [pc, #140]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005abc:	4b21      	ldr	r3, [pc, #132]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a20      	ldr	r2, [pc, #128]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ac8:	f7fd fa66 	bl	8002f98 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd fa62 	bl	8002f98 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e02c      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	4b18      	ldr	r3, [pc, #96]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x7ac>
 8005aee:	e024      	b.n	8005b3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d01f      	beq.n	8005b36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a12      	ldr	r2, [pc, #72]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd fa49 	bl	8002f98 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd fa45 	bl	8002f98 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e00f      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1c:	4b09      	ldr	r3, [pc, #36]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	4905      	ldr	r1, [pc, #20]	@ (8005b44 <HAL_RCC_OscConfig+0x820>)
 8005b2e:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <HAL_RCC_OscConfig+0x824>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
 8005b34:	e001      	b.n	8005b3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40021000 	.word	0x40021000
 8005b48:	feeefffc 	.word	0xfeeefffc

08005b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0e7      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b60:	4b75      	ldr	r3, [pc, #468]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d910      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b72      	ldr	r3, [pc, #456]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 0207 	bic.w	r2, r3, #7
 8005b76:	4970      	ldr	r1, [pc, #448]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0cf      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b66      	ldr	r3, [pc, #408]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d908      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bac:	4b63      	ldr	r3, [pc, #396]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4960      	ldr	r1, [pc, #384]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04c      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0a6      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bea:	4b54      	ldr	r3, [pc, #336]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d115      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e09a      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c02:	4b4e      	ldr	r3, [pc, #312]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e08e      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c12:	4b4a      	ldr	r3, [pc, #296]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e086      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c22:	4b46      	ldr	r3, [pc, #280]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 0203 	bic.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4943      	ldr	r1, [pc, #268]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c34:	f7fd f9b0 	bl	8002f98 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3c:	f7fd f9ac 	bl	8002f98 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e06e      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	4b3a      	ldr	r3, [pc, #232]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 020c 	and.w	r2, r3, #12
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d1eb      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d208      	bcs.n	8005c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c80:	4b2e      	ldr	r3, [pc, #184]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	492b      	ldr	r1, [pc, #172]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d210      	bcs.n	8005cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca0:	4b25      	ldr	r3, [pc, #148]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f023 0207 	bic.w	r2, r3, #7
 8005ca8:	4923      	ldr	r1, [pc, #140]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb0:	4b21      	ldr	r3, [pc, #132]	@ (8005d38 <HAL_RCC_ClockConfig+0x1ec>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d001      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e036      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cce:	4b1b      	ldr	r3, [pc, #108]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4918      	ldr	r1, [pc, #96]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cec:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4910      	ldr	r1, [pc, #64]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d00:	f000 f824 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	490b      	ldr	r1, [pc, #44]	@ (8005d40 <HAL_RCC_ClockConfig+0x1f4>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	4a09      	ldr	r2, [pc, #36]	@ (8005d44 <HAL_RCC_ClockConfig+0x1f8>)
 8005d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCC_ClockConfig+0x1fc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd f8e7 	bl	8002ef8 <HAL_InitTick>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40022000 	.word	0x40022000
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	080089b8 	.word	0x080089b8
 8005d44:	200000ac 	.word	0x200000ac
 8005d48:	200000e4 	.word	0x200000e4

08005d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	@ 0x24
 8005d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d64:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x34>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d121      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d11e      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d80:	4b34      	ldr	r3, [pc, #208]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d8c:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e005      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005da8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d102      	bne.n	8005dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dc4:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d101      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dd0:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d134      	bne.n	8005e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dda:	4b1e      	ldr	r3, [pc, #120]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d003      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d003      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0xac>
 8005df0:	e005      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005df2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8005df4:	617b      	str	r3, [r7, #20]
      break;
 8005df6:	e005      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005df8:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dfa:	617b      	str	r3, [r7, #20]
      break;
 8005dfc:	e002      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	617b      	str	r3, [r7, #20]
      break;
 8005e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	3301      	adds	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	fb03 f202 	mul.w	r2, r3, r2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	0e5b      	lsrs	r3, r3, #25
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	3301      	adds	r3, #1
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e44:	69bb      	ldr	r3, [r7, #24]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
 8005e58:	080089c8 	.word	0x080089c8
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	007a1200 	.word	0x007a1200

08005e64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e7c:	f7ff f9ee 	bl	800525c <HAL_PWREx_GetVoltageRange>
 8005e80:	6178      	str	r0, [r7, #20]
 8005e82:	e014      	b.n	8005eae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e84:	4b25      	ldr	r3, [pc, #148]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e88:	4a24      	ldr	r2, [pc, #144]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e90:	4b22      	ldr	r3, [pc, #136]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e9c:	f7ff f9de 	bl	800525c <HAL_PWREx_GetVoltageRange>
 8005ea0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb4:	d10b      	bne.n	8005ece <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b80      	cmp	r3, #128	@ 0x80
 8005eba:	d919      	bls.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ec0:	d902      	bls.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e013      	b.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ec8:	2301      	movs	r3, #1
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	e010      	b.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b80      	cmp	r3, #128	@ 0x80
 8005ed2:	d902      	bls.n	8005eda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	e00a      	b.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b80      	cmp	r3, #128	@ 0x80
 8005ede:	d102      	bne.n	8005ee6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	e004      	b.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b70      	cmp	r3, #112	@ 0x70
 8005eea:	d101      	bne.n	8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eec:	2301      	movs	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f023 0207 	bic.w	r2, r3, #7
 8005ef8:	4909      	ldr	r1, [pc, #36]	@ (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f00:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d001      	beq.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40022000 	.word	0x40022000

08005f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f30:	2300      	movs	r3, #0
 8005f32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d031      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f48:	d01a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005f4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f4e:	d814      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f58:	d10f      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f66:	e00c      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fa44 	bl	80063fc <RCCEx_PLLSAI1_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f78:	e003      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f82:	7cfb      	ldrb	r3, [r7, #19]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f88:	4b51      	ldr	r3, [pc, #324]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	494e      	ldr	r1, [pc, #312]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 809e 	beq.w	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fb6:	4b46      	ldr	r3, [pc, #280]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fcc:	4b40      	ldr	r3, [pc, #256]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd0:	4a3f      	ldr	r2, [pc, #252]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a39      	ldr	r2, [pc, #228]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ff4:	f7fc ffd0 	bl	8002f98 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ffa:	e009      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffc:	f7fc ffcc 	bl	8002f98 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d902      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	74fb      	strb	r3, [r7, #19]
        break;
 800600e:	e005      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006010:	4b30      	ldr	r3, [pc, #192]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d15a      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006022:	4b2b      	ldr	r3, [pc, #172]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800602c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01e      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	429a      	cmp	r2, r3
 800603c:	d019      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800603e:	4b24      	ldr	r3, [pc, #144]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006048:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800604a:	4b21      	ldr	r3, [pc, #132]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800604c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006050:	4a1f      	ldr	r2, [pc, #124]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800605a:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006060:	4a1b      	ldr	r2, [pc, #108]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800606a:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fc ff8c 	bl	8002f98 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006082:	e00b      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006084:	f7fc ff88 	bl	8002f98 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d902      	bls.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	74fb      	strb	r3, [r7, #19]
            break;
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ec      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060be:	4904      	ldr	r1, [pc, #16]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060c6:	e009      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c8:	7cfb      	ldrb	r3, [r7, #19]
 80060ca:	74bb      	strb	r3, [r7, #18]
 80060cc:	e006      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80060ce:	bf00      	nop
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d8:	7cfb      	ldrb	r3, [r7, #19]
 80060da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060dc:	7c7b      	ldrb	r3, [r7, #17]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e2:	4b9e      	ldr	r3, [pc, #632]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e6:	4a9d      	ldr	r2, [pc, #628]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060fa:	4b98      	ldr	r3, [pc, #608]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006100:	f023 0203 	bic.w	r2, r3, #3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	4994      	ldr	r1, [pc, #592]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800611c:	4b8f      	ldr	r3, [pc, #572]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006122:	f023 020c 	bic.w	r2, r3, #12
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	498c      	ldr	r1, [pc, #560]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800613e:	4b87      	ldr	r3, [pc, #540]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006144:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	4983      	ldr	r1, [pc, #524]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006160:	4b7e      	ldr	r3, [pc, #504]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006166:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	497b      	ldr	r1, [pc, #492]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006182:	4b76      	ldr	r3, [pc, #472]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006188:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	4972      	ldr	r1, [pc, #456]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061a4:	4b6d      	ldr	r3, [pc, #436]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061aa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	496a      	ldr	r1, [pc, #424]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061c6:	4b65      	ldr	r3, [pc, #404]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d4:	4961      	ldr	r1, [pc, #388]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061e8:	4b5c      	ldr	r3, [pc, #368]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f6:	4959      	ldr	r1, [pc, #356]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800620a:	4b54      	ldr	r3, [pc, #336]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	4950      	ldr	r1, [pc, #320]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800622c:	4b4b      	ldr	r3, [pc, #300]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	4948      	ldr	r1, [pc, #288]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800624e:	4b43      	ldr	r3, [pc, #268]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006250:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006254:	f023 0203 	bic.w	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625c:	493f      	ldr	r1, [pc, #252]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d028      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006270:	4b3a      	ldr	r3, [pc, #232]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	4937      	ldr	r1, [pc, #220]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800628a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800628e:	d106      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006290:	4b32      	ldr	r3, [pc, #200]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a31      	ldr	r2, [pc, #196]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800629a:	60d3      	str	r3, [r2, #12]
 800629c:	e011      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f8a4 	bl	80063fc <RCCEx_PLLSAI1_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d028      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062ce:	4b23      	ldr	r3, [pc, #140]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062dc:	491f      	ldr	r1, [pc, #124]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ec:	d106      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ee:	4b1b      	ldr	r3, [pc, #108]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f8:	60d3      	str	r3, [r2, #12]
 80062fa:	e011      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f875 	bl	80063fc <RCCEx_PLLSAI1_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800632c:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633a:	4908      	ldr	r1, [pc, #32]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634a:	d109      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800634c:	4b03      	ldr	r3, [pc, #12]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4a02      	ldr	r2, [pc, #8]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006356:	60d3      	str	r3, [r2, #12]
 8006358:	e014      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800635a:	bf00      	nop
 800635c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006368:	d10c      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	2101      	movs	r1, #1
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f843 	bl	80063fc <RCCEx_PLLSAI1_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8006380:	7cfb      	ldrb	r3, [r7, #19]
 8006382:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01c      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006390:	4b19      	ldr	r3, [pc, #100]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639e:	4916      	ldr	r1, [pc, #88]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ae:	d10c      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f820 	bl	80063fc <RCCEx_PLLSAI1_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80063c6:	7cfb      	ldrb	r3, [r7, #19]
 80063c8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063d6:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e4:	4904      	ldr	r1, [pc, #16]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000

080063fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800640a:	4b74      	ldr	r3, [pc, #464]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006416:	4b71      	ldr	r3, [pc, #452]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0203 	and.w	r2, r3, #3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d10d      	bne.n	8006442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
       ||
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800642e:	4b6b      	ldr	r3, [pc, #428]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
       ||
 800643e:	429a      	cmp	r2, r3
 8006440:	d047      	beq.n	80064d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	e044      	b.n	80064d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d018      	beq.n	8006482 <RCCEx_PLLSAI1_Config+0x86>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d825      	bhi.n	80064a0 <RCCEx_PLLSAI1_Config+0xa4>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d002      	beq.n	800645e <RCCEx_PLLSAI1_Config+0x62>
 8006458:	2b02      	cmp	r3, #2
 800645a:	d009      	beq.n	8006470 <RCCEx_PLLSAI1_Config+0x74>
 800645c:	e020      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800645e:	4b5f      	ldr	r3, [pc, #380]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11d      	bne.n	80064a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800646e:	e01a      	b.n	80064a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006470:	4b5a      	ldr	r3, [pc, #360]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006480:	e013      	b.n	80064aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006482:	4b56      	ldr	r3, [pc, #344]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800648e:	4b53      	ldr	r3, [pc, #332]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800649e:	e006      	b.n	80064ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e004      	b.n	80064b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10d      	bne.n	80064d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064b6:	4b49      	ldr	r3, [pc, #292]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	430b      	orrs	r3, r1
 80064cc:	4943      	ldr	r1, [pc, #268]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d17c      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064d8:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a3f      	ldr	r2, [pc, #252]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80064de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e4:	f7fc fd58 	bl	8002f98 <HAL_GetTick>
 80064e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ea:	e009      	b.n	8006500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064ec:	f7fc fd54 	bl	8002f98 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d902      	bls.n	8006500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	73fb      	strb	r3, [r7, #15]
        break;
 80064fe:	e005      	b.n	800650c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006500:	4b36      	ldr	r3, [pc, #216]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ef      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d15f      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d110      	bne.n	800653a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006518:	4b30      	ldr	r3, [pc, #192]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6892      	ldr	r2, [r2, #8]
 8006528:	0211      	lsls	r1, r2, #8
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68d2      	ldr	r2, [r2, #12]
 800652e:	06d2      	lsls	r2, r2, #27
 8006530:	430a      	orrs	r2, r1
 8006532:	492a      	ldr	r1, [pc, #168]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
 8006538:	e027      	b.n	800658a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d112      	bne.n	8006566 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006540:	4b26      	ldr	r3, [pc, #152]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6892      	ldr	r2, [r2, #8]
 8006550:	0211      	lsls	r1, r2, #8
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6912      	ldr	r2, [r2, #16]
 8006556:	0852      	lsrs	r2, r2, #1
 8006558:	3a01      	subs	r2, #1
 800655a:	0552      	lsls	r2, r2, #21
 800655c:	430a      	orrs	r2, r1
 800655e:	491f      	ldr	r1, [pc, #124]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	610b      	str	r3, [r1, #16]
 8006564:	e011      	b.n	800658a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006566:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800656e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6892      	ldr	r2, [r2, #8]
 8006576:	0211      	lsls	r1, r2, #8
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6952      	ldr	r2, [r2, #20]
 800657c:	0852      	lsrs	r2, r2, #1
 800657e:	3a01      	subs	r2, #1
 8006580:	0652      	lsls	r2, r2, #25
 8006582:	430a      	orrs	r2, r1
 8006584:	4915      	ldr	r1, [pc, #84]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006586:	4313      	orrs	r3, r2
 8006588:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800658a:	4b14      	ldr	r3, [pc, #80]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a13      	ldr	r2, [pc, #76]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006590:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006594:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006596:	f7fc fcff 	bl	8002f98 <HAL_GetTick>
 800659a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800659c:	e009      	b.n	80065b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800659e:	f7fc fcfb 	bl	8002f98 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d902      	bls.n	80065b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	73fb      	strb	r3, [r7, #15]
          break;
 80065b0:	e005      	b.n	80065be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065b2:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ef      	beq.n	800659e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	4903      	ldr	r1, [pc, #12]	@ (80065dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40021000 	.word	0x40021000

080065e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d079      	beq.n	80066e6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc f924 	bl	8002854 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b10      	cmp	r3, #16
 8006620:	d058      	beq.n	80066d4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ca      	movs	r2, #202	@ 0xca
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2253      	movs	r2, #83	@ 0x53
 8006630:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fbe6 	bl	8006e04 <RTC_EnterInitMode>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d127      	bne.n	8006692 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006654:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6899      	ldr	r1, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68d2      	ldr	r2, [r2, #12]
 800667c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6919      	ldr	r1, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	041a      	lsls	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fbea 	bl	8006e6c <RTC_ExitInitMode>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d113      	bne.n	80066ca <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0203 	bic.w	r2, r2, #3
 80066b0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	22ff      	movs	r2, #255	@ 0xff
 80066d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80066d2:	e001      	b.n	80066d8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_RTC_SetTime+0x1a>
 8006706:	2302      	movs	r3, #2
 8006708:	e08b      	b.n	8006822 <HAL_RTC_SetTime+0x132>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	22ca      	movs	r2, #202	@ 0xca
 8006720:	625a      	str	r2, [r3, #36]	@ 0x24
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2253      	movs	r2, #83	@ 0x53
 8006728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fb6a 	bl	8006e04 <RTC_EnterInitMode>
 8006730:	4603      	mov	r3, r0
 8006732:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006734:	7cfb      	ldrb	r3, [r7, #19]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d163      	bne.n	8006802 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d126      	bne.n	800678e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2200      	movs	r2, #0
 8006752:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fbc5 	bl	8006ee8 <RTC_ByteToBcd2>
 800675e:	4603      	mov	r3, r0
 8006760:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fbbe 	bl	8006ee8 <RTC_ByteToBcd2>
 800676c:	4603      	mov	r3, r0
 800676e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006770:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	789b      	ldrb	r3, [r3, #2]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fbb6 	bl	8006ee8 <RTC_ByteToBcd2>
 800677c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800677e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e018      	b.n	80067c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80067ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80067ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80067ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6899      	ldr	r1, [r3, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb37 	bl	8006e6c <RTC_ExitInitMode>
 80067fe:	4603      	mov	r3, r0
 8006800:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	22ff      	movs	r2, #255	@ 0xff
 8006808:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800680a:	7cfb      	ldrb	r3, [r7, #19]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006820:	7cfb      	ldrb	r3, [r7, #19]
}
 8006822:	4618      	mov	r0, r3
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}

0800682a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800682a:	b590      	push	{r4, r7, lr}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_RTC_SetDate+0x1a>
 8006840:	2302      	movs	r3, #2
 8006842:	e075      	b.n	8006930 <HAL_RTC_SetDate+0x106>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10e      	bne.n	8006878 <HAL_RTC_SetDate+0x4e>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	b2db      	uxtb	r3, r3
 8006870:	330a      	adds	r3, #10
 8006872:	b2da      	uxtb	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11c      	bne.n	80068b8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	78db      	ldrb	r3, [r3, #3]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb30 	bl	8006ee8 <RTC_ByteToBcd2>
 8006888:	4603      	mov	r3, r0
 800688a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fb29 	bl	8006ee8 <RTC_ByteToBcd2>
 8006896:	4603      	mov	r3, r0
 8006898:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800689a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fb21 	bl	8006ee8 <RTC_ByteToBcd2>
 80068a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e00e      	b.n	80068d6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068c4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	22ca      	movs	r2, #202	@ 0xca
 80068dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2253      	movs	r2, #83	@ 0x53
 80068e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fa8c 	bl	8006e04 <RTC_EnterInitMode>
 80068ec:	4603      	mov	r3, r0
 80068ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80068f0:	7cfb      	ldrb	r3, [r7, #19]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006900:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006904:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fab0 	bl	8006e6c <RTC_ExitInitMode>
 800690c:	4603      	mov	r3, r0
 800690e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	22ff      	movs	r2, #255	@ 0xff
 8006916:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800692e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd90      	pop	{r4, r7, pc}

08006938 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b089      	sub	sp, #36	@ 0x24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_RTC_SetAlarm_IT+0x1a>
 800694e:	2302      	movs	r3, #2
 8006950:	e127      	b.n	8006ba2 <HAL_RTC_SetAlarm_IT+0x26a>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d137      	bne.n	80069d8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fab1 	bl	8006ee8 <RTC_ByteToBcd2>
 8006986:	4603      	mov	r3, r0
 8006988:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 faaa 	bl	8006ee8 <RTC_ByteToBcd2>
 8006994:	4603      	mov	r3, r0
 8006996:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006998:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	789b      	ldrb	r3, [r3, #2]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 faa2 	bl	8006ee8 <RTC_ByteToBcd2>
 80069a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	78db      	ldrb	r3, [r3, #3]
 80069ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80069b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa94 	bl	8006ee8 <RTC_ByteToBcd2>
 80069c0:	4603      	mov	r3, r0
 80069c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80069c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80069cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	e023      	b.n	8006a20 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006a06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	22ca      	movs	r2, #202	@ 0xca
 8006a32:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2253      	movs	r2, #83	@ 0x53
 8006a3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a44:	d14a      	bne.n	8006adc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a54:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006a66:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8006a68:	f7fc fa96 	bl	8002f98 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006a6e:	e015      	b.n	8006a9c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a70:	f7fc fa92 	bl	8002f98 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a7e:	d90d      	bls.n	8006a9c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	22ff      	movs	r2, #255	@ 0xff
 8006a86:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e082      	b.n	8006ba2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0e2      	beq.n	8006a70 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ad8:	609a      	str	r2, [r3, #8]
 8006ada:	e049      	b.n	8006b70 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006aea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006afc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006afe:	f7fc fa4b 	bl	8002f98 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006b04:	e015      	b.n	8006b32 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b06:	f7fc fa47 	bl	8002f98 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b14:	d90d      	bls.n	8006b32 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	22ff      	movs	r2, #255	@ 0xff
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2203      	movs	r2, #3
 8006b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e037      	b.n	8006ba2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0e2      	beq.n	8006b06 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b70:	4b0e      	ldr	r3, [pc, #56]	@ (8006bac <HAL_RTC_SetAlarm_IT+0x274>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <HAL_RTC_SetAlarm_IT+0x274>)
 8006b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b7a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <HAL_RTC_SetAlarm_IT+0x274>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	@ (8006bac <HAL_RTC_SetAlarm_IT+0x274>)
 8006b82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b86:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	22ff      	movs	r2, #255	@ 0xff
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3724      	adds	r7, #36	@ 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40010400 	.word	0x40010400

08006bb0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc4:	d143      	bne.n	8006c4e <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bcc:	629a      	str	r2, [r3, #40]	@ 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006be0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	0d9b      	lsrs	r3, r3, #22
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	615a      	str	r2, [r3, #20]
 8006c4c:	e042      	b.n	8006cd4 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c54:	629a      	str	r2, [r3, #40]	@ 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c68:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	0d9b      	lsrs	r3, r3, #22
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	0e1b      	lsrs	r3, r3, #24
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d125      	bne.n	8006d26 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f922 	bl	8006f28 <RTC_Bcd2ToByte>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f919 	bl	8006f28 <RTC_Bcd2ToByte>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	789b      	ldrb	r3, [r3, #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f910 	bl	8006f28 <RTC_Bcd2ToByte>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f906 	bl	8006f28 <RTC_Bcd2ToByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006d38:	4b1f      	ldr	r3, [pc, #124]	@ (8006db8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006d3a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006d3e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d012      	beq.n	8006d74 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006d6c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa ffaa 	bl	8001cc8 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d012      	beq.n	8006da8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006da0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f8da 	bl	8006f5c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40010400 	.word	0x40010400

08006dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8006e00 <HAL_RTC_WaitForSynchro+0x44>)
 8006dca:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006dcc:	f7fc f8e4 	bl	8002f98 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dd2:	e009      	b.n	8006de8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dd4:	f7fc f8e0 	bl	8002f98 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006de2:	d901      	bls.n	8006de8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e007      	b.n	8006df8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ee      	beq.n	8006dd4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	0003ff5f 	.word	0x0003ff5f

08006e04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d120      	bne.n	8006e60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e28:	f7fc f8b6 	bl	8002f98 <HAL_GetTick>
 8006e2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e2e:	e00d      	b.n	8006e4c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e30:	f7fc f8b2 	bl	8002f98 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e3e:	d905      	bls.n	8006e4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2203      	movs	r2, #3
 8006e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <RTC_EnterInitMode+0x5c>
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d1e7      	bne.n	8006e30 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006e78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e82:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e84:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10c      	bne.n	8006eaa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff ff93 	bl	8006dbc <HAL_RTC_WaitForSynchro>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	73fb      	strb	r3, [r7, #15]
 8006ea8:	e017      	b.n	8006eda <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006eb0:	f023 0320 	bic.w	r3, r3, #32
 8006eb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff80 	bl	8006dbc <HAL_RTC_WaitForSynchro>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ece:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	4a04      	ldr	r2, [pc, #16]	@ (8006ee4 <RTC_ExitInitMode+0x78>)
 8006ed4:	f043 0320 	orr.w	r3, r3, #32
 8006ed8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40002800 	.word	0x40002800

08006ee8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006efa:	e005      	b.n	8006f08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	3b0a      	subs	r3, #10
 8006f06:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	2b09      	cmp	r3, #9
 8006f0c:	d8f6      	bhi.n	8006efc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	b2db      	uxtb	r3, r3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <siprintf>:
 8006f70:	b40e      	push	{r1, r2, r3}
 8006f72:	b500      	push	{lr}
 8006f74:	b09c      	sub	sp, #112	@ 0x70
 8006f76:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f78:	9002      	str	r0, [sp, #8]
 8006f7a:	9006      	str	r0, [sp, #24]
 8006f7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f80:	4809      	ldr	r0, [pc, #36]	@ (8006fa8 <siprintf+0x38>)
 8006f82:	9107      	str	r1, [sp, #28]
 8006f84:	9104      	str	r1, [sp, #16]
 8006f86:	4909      	ldr	r1, [pc, #36]	@ (8006fac <siprintf+0x3c>)
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	a902      	add	r1, sp, #8
 8006f94:	f000 f9b6 	bl	8007304 <_svfiprintf_r>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	b01c      	add	sp, #112	@ 0x70
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	4770      	bx	lr
 8006fa8:	200000ec 	.word	0x200000ec
 8006fac:	ffff0208 	.word	0xffff0208

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <strncpy>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	3901      	subs	r1, #1
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	b132      	cbz	r2, 8006fd6 <strncpy+0x16>
 8006fc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fcc:	f803 4b01 	strb.w	r4, [r3], #1
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	2c00      	cmp	r4, #0
 8006fd4:	d1f7      	bne.n	8006fc6 <strncpy+0x6>
 8006fd6:	441a      	add	r2, r3
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d100      	bne.n	8006fe0 <strncpy+0x20>
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe4:	e7f9      	b.n	8006fda <strncpy+0x1a>
	...

08006fe8 <__errno>:
 8006fe8:	4b01      	ldr	r3, [pc, #4]	@ (8006ff0 <__errno+0x8>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	200000ec 	.word	0x200000ec

08006ff4 <__libc_init_array>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800702c <__libc_init_array+0x38>)
 8006ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8007030 <__libc_init_array+0x3c>)
 8006ffa:	1b64      	subs	r4, r4, r5
 8006ffc:	10a4      	asrs	r4, r4, #2
 8006ffe:	2600      	movs	r6, #0
 8007000:	42a6      	cmp	r6, r4
 8007002:	d109      	bne.n	8007018 <__libc_init_array+0x24>
 8007004:	4d0b      	ldr	r5, [pc, #44]	@ (8007034 <__libc_init_array+0x40>)
 8007006:	4c0c      	ldr	r4, [pc, #48]	@ (8007038 <__libc_init_array+0x44>)
 8007008:	f001 fbc4 	bl	8008794 <_init>
 800700c:	1b64      	subs	r4, r4, r5
 800700e:	10a4      	asrs	r4, r4, #2
 8007010:	2600      	movs	r6, #0
 8007012:	42a6      	cmp	r6, r4
 8007014:	d105      	bne.n	8007022 <__libc_init_array+0x2e>
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	f855 3b04 	ldr.w	r3, [r5], #4
 800701c:	4798      	blx	r3
 800701e:	3601      	adds	r6, #1
 8007020:	e7ee      	b.n	8007000 <__libc_init_array+0xc>
 8007022:	f855 3b04 	ldr.w	r3, [r5], #4
 8007026:	4798      	blx	r3
 8007028:	3601      	adds	r6, #1
 800702a:	e7f2      	b.n	8007012 <__libc_init_array+0x1e>
 800702c:	08008a68 	.word	0x08008a68
 8007030:	08008a68 	.word	0x08008a68
 8007034:	08008a68 	.word	0x08008a68
 8007038:	08008a6c 	.word	0x08008a6c

0800703c <__retarget_lock_acquire_recursive>:
 800703c:	4770      	bx	lr

0800703e <__retarget_lock_release_recursive>:
 800703e:	4770      	bx	lr

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007056:	4291      	cmp	r1, r2
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <_free_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4605      	mov	r5, r0
 8007060:	2900      	cmp	r1, #0
 8007062:	d041      	beq.n	80070e8 <_free_r+0x8c>
 8007064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007068:	1f0c      	subs	r4, r1, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfb8      	it	lt
 800706e:	18e4      	addlt	r4, r4, r3
 8007070:	f000 f8e0 	bl	8007234 <__malloc_lock>
 8007074:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <_free_r+0x90>)
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	b933      	cbnz	r3, 8007088 <_free_r+0x2c>
 800707a:	6063      	str	r3, [r4, #4]
 800707c:	6014      	str	r4, [r2, #0]
 800707e:	4628      	mov	r0, r5
 8007080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007084:	f000 b8dc 	b.w	8007240 <__malloc_unlock>
 8007088:	42a3      	cmp	r3, r4
 800708a:	d908      	bls.n	800709e <_free_r+0x42>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	1821      	adds	r1, r4, r0
 8007090:	428b      	cmp	r3, r1
 8007092:	bf01      	itttt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	1809      	addeq	r1, r1, r0
 800709a:	6021      	streq	r1, [r4, #0]
 800709c:	e7ed      	b.n	800707a <_free_r+0x1e>
 800709e:	461a      	mov	r2, r3
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b10b      	cbz	r3, 80070a8 <_free_r+0x4c>
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d9fa      	bls.n	800709e <_free_r+0x42>
 80070a8:	6811      	ldr	r1, [r2, #0]
 80070aa:	1850      	adds	r0, r2, r1
 80070ac:	42a0      	cmp	r0, r4
 80070ae:	d10b      	bne.n	80070c8 <_free_r+0x6c>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	4401      	add	r1, r0
 80070b4:	1850      	adds	r0, r2, r1
 80070b6:	4283      	cmp	r3, r0
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	d1e0      	bne.n	800707e <_free_r+0x22>
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	6053      	str	r3, [r2, #4]
 80070c2:	4408      	add	r0, r1
 80070c4:	6010      	str	r0, [r2, #0]
 80070c6:	e7da      	b.n	800707e <_free_r+0x22>
 80070c8:	d902      	bls.n	80070d0 <_free_r+0x74>
 80070ca:	230c      	movs	r3, #12
 80070cc:	602b      	str	r3, [r5, #0]
 80070ce:	e7d6      	b.n	800707e <_free_r+0x22>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	1821      	adds	r1, r4, r0
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf04      	itt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	bf04      	itt	eq
 80070e0:	1809      	addeq	r1, r1, r0
 80070e2:	6021      	streq	r1, [r4, #0]
 80070e4:	6054      	str	r4, [r2, #4]
 80070e6:	e7ca      	b.n	800707e <_free_r+0x22>
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	200006c8 	.word	0x200006c8

080070f0 <sbrk_aligned>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007130 <sbrk_aligned+0x40>)
 80070f4:	460c      	mov	r4, r1
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	4605      	mov	r5, r0
 80070fa:	b911      	cbnz	r1, 8007102 <sbrk_aligned+0x12>
 80070fc:	f000 fba6 	bl	800784c <_sbrk_r>
 8007100:	6030      	str	r0, [r6, #0]
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fba1 	bl	800784c <_sbrk_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d103      	bne.n	8007116 <sbrk_aligned+0x26>
 800710e:	f04f 34ff 	mov.w	r4, #4294967295
 8007112:	4620      	mov	r0, r4
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	1cc4      	adds	r4, r0, #3
 8007118:	f024 0403 	bic.w	r4, r4, #3
 800711c:	42a0      	cmp	r0, r4
 800711e:	d0f8      	beq.n	8007112 <sbrk_aligned+0x22>
 8007120:	1a21      	subs	r1, r4, r0
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fb92 	bl	800784c <_sbrk_r>
 8007128:	3001      	adds	r0, #1
 800712a:	d1f2      	bne.n	8007112 <sbrk_aligned+0x22>
 800712c:	e7ef      	b.n	800710e <sbrk_aligned+0x1e>
 800712e:	bf00      	nop
 8007130:	200006c4 	.word	0x200006c4

08007134 <_malloc_r>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	1ccd      	adds	r5, r1, #3
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	2d00      	cmp	r5, #0
 8007148:	4606      	mov	r6, r0
 800714a:	db01      	blt.n	8007150 <_malloc_r+0x1c>
 800714c:	42a9      	cmp	r1, r5
 800714e:	d904      	bls.n	800715a <_malloc_r+0x26>
 8007150:	230c      	movs	r3, #12
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	2000      	movs	r0, #0
 8007156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007230 <_malloc_r+0xfc>
 800715e:	f000 f869 	bl	8007234 <__malloc_lock>
 8007162:	f8d8 3000 	ldr.w	r3, [r8]
 8007166:	461c      	mov	r4, r3
 8007168:	bb44      	cbnz	r4, 80071bc <_malloc_r+0x88>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ffbf 	bl	80070f0 <sbrk_aligned>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	4604      	mov	r4, r0
 8007176:	d158      	bne.n	800722a <_malloc_r+0xf6>
 8007178:	f8d8 4000 	ldr.w	r4, [r8]
 800717c:	4627      	mov	r7, r4
 800717e:	2f00      	cmp	r7, #0
 8007180:	d143      	bne.n	800720a <_malloc_r+0xd6>
 8007182:	2c00      	cmp	r4, #0
 8007184:	d04b      	beq.n	800721e <_malloc_r+0xea>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	4639      	mov	r1, r7
 800718a:	4630      	mov	r0, r6
 800718c:	eb04 0903 	add.w	r9, r4, r3
 8007190:	f000 fb5c 	bl	800784c <_sbrk_r>
 8007194:	4581      	cmp	r9, r0
 8007196:	d142      	bne.n	800721e <_malloc_r+0xea>
 8007198:	6821      	ldr	r1, [r4, #0]
 800719a:	1a6d      	subs	r5, r5, r1
 800719c:	4629      	mov	r1, r5
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffa6 	bl	80070f0 <sbrk_aligned>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d03a      	beq.n	800721e <_malloc_r+0xea>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	442b      	add	r3, r5
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	f8d8 3000 	ldr.w	r3, [r8]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	bb62      	cbnz	r2, 8007210 <_malloc_r+0xdc>
 80071b6:	f8c8 7000 	str.w	r7, [r8]
 80071ba:	e00f      	b.n	80071dc <_malloc_r+0xa8>
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	1b52      	subs	r2, r2, r5
 80071c0:	d420      	bmi.n	8007204 <_malloc_r+0xd0>
 80071c2:	2a0b      	cmp	r2, #11
 80071c4:	d917      	bls.n	80071f6 <_malloc_r+0xc2>
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	6025      	str	r5, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	6059      	strne	r1, [r3, #4]
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	bf08      	it	eq
 80071d4:	f8c8 1000 	streq.w	r1, [r8]
 80071d8:	5162      	str	r2, [r4, r5]
 80071da:	604b      	str	r3, [r1, #4]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f82f 	bl	8007240 <__malloc_unlock>
 80071e2:	f104 000b 	add.w	r0, r4, #11
 80071e6:	1d23      	adds	r3, r4, #4
 80071e8:	f020 0007 	bic.w	r0, r0, #7
 80071ec:	1ac2      	subs	r2, r0, r3
 80071ee:	bf1c      	itt	ne
 80071f0:	1a1b      	subne	r3, r3, r0
 80071f2:	50a3      	strne	r3, [r4, r2]
 80071f4:	e7af      	b.n	8007156 <_malloc_r+0x22>
 80071f6:	6862      	ldr	r2, [r4, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	bf0c      	ite	eq
 80071fc:	f8c8 2000 	streq.w	r2, [r8]
 8007200:	605a      	strne	r2, [r3, #4]
 8007202:	e7eb      	b.n	80071dc <_malloc_r+0xa8>
 8007204:	4623      	mov	r3, r4
 8007206:	6864      	ldr	r4, [r4, #4]
 8007208:	e7ae      	b.n	8007168 <_malloc_r+0x34>
 800720a:	463c      	mov	r4, r7
 800720c:	687f      	ldr	r7, [r7, #4]
 800720e:	e7b6      	b.n	800717e <_malloc_r+0x4a>
 8007210:	461a      	mov	r2, r3
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	42a3      	cmp	r3, r4
 8007216:	d1fb      	bne.n	8007210 <_malloc_r+0xdc>
 8007218:	2300      	movs	r3, #0
 800721a:	6053      	str	r3, [r2, #4]
 800721c:	e7de      	b.n	80071dc <_malloc_r+0xa8>
 800721e:	230c      	movs	r3, #12
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f80c 	bl	8007240 <__malloc_unlock>
 8007228:	e794      	b.n	8007154 <_malloc_r+0x20>
 800722a:	6005      	str	r5, [r0, #0]
 800722c:	e7d6      	b.n	80071dc <_malloc_r+0xa8>
 800722e:	bf00      	nop
 8007230:	200006c8 	.word	0x200006c8

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__malloc_lock+0x8>)
 8007236:	f7ff bf01 	b.w	800703c <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	200006c0 	.word	0x200006c0

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_unlock+0x8>)
 8007242:	f7ff befc 	b.w	800703e <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	200006c0 	.word	0x200006c0

0800724c <__ssputs_r>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	688e      	ldr	r6, [r1, #8]
 8007252:	461f      	mov	r7, r3
 8007254:	42be      	cmp	r6, r7
 8007256:	680b      	ldr	r3, [r1, #0]
 8007258:	4682      	mov	sl, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4690      	mov	r8, r2
 800725e:	d82d      	bhi.n	80072bc <__ssputs_r+0x70>
 8007260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007268:	d026      	beq.n	80072b8 <__ssputs_r+0x6c>
 800726a:	6965      	ldr	r5, [r4, #20]
 800726c:	6909      	ldr	r1, [r1, #16]
 800726e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007272:	eba3 0901 	sub.w	r9, r3, r1
 8007276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800727a:	1c7b      	adds	r3, r7, #1
 800727c:	444b      	add	r3, r9
 800727e:	106d      	asrs	r5, r5, #1
 8007280:	429d      	cmp	r5, r3
 8007282:	bf38      	it	cc
 8007284:	461d      	movcc	r5, r3
 8007286:	0553      	lsls	r3, r2, #21
 8007288:	d527      	bpl.n	80072da <__ssputs_r+0x8e>
 800728a:	4629      	mov	r1, r5
 800728c:	f7ff ff52 	bl	8007134 <_malloc_r>
 8007290:	4606      	mov	r6, r0
 8007292:	b360      	cbz	r0, 80072ee <__ssputs_r+0xa2>
 8007294:	6921      	ldr	r1, [r4, #16]
 8007296:	464a      	mov	r2, r9
 8007298:	f7ff fed2 	bl	8007040 <memcpy>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	6126      	str	r6, [r4, #16]
 80072aa:	6165      	str	r5, [r4, #20]
 80072ac:	444e      	add	r6, r9
 80072ae:	eba5 0509 	sub.w	r5, r5, r9
 80072b2:	6026      	str	r6, [r4, #0]
 80072b4:	60a5      	str	r5, [r4, #8]
 80072b6:	463e      	mov	r6, r7
 80072b8:	42be      	cmp	r6, r7
 80072ba:	d900      	bls.n	80072be <__ssputs_r+0x72>
 80072bc:	463e      	mov	r6, r7
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	4632      	mov	r2, r6
 80072c2:	4641      	mov	r1, r8
 80072c4:	f000 faa8 	bl	8007818 <memmove>
 80072c8:	68a3      	ldr	r3, [r4, #8]
 80072ca:	1b9b      	subs	r3, r3, r6
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	4433      	add	r3, r6
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	2000      	movs	r0, #0
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	462a      	mov	r2, r5
 80072dc:	f000 fac6 	bl	800786c <_realloc_r>
 80072e0:	4606      	mov	r6, r0
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d1e0      	bne.n	80072a8 <__ssputs_r+0x5c>
 80072e6:	6921      	ldr	r1, [r4, #16]
 80072e8:	4650      	mov	r0, sl
 80072ea:	f7ff feb7 	bl	800705c <_free_r>
 80072ee:	230c      	movs	r3, #12
 80072f0:	f8ca 3000 	str.w	r3, [sl]
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	e7e9      	b.n	80072d6 <__ssputs_r+0x8a>
	...

08007304 <_svfiprintf_r>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	4698      	mov	r8, r3
 800730a:	898b      	ldrh	r3, [r1, #12]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	b09d      	sub	sp, #116	@ 0x74
 8007310:	4607      	mov	r7, r0
 8007312:	460d      	mov	r5, r1
 8007314:	4614      	mov	r4, r2
 8007316:	d510      	bpl.n	800733a <_svfiprintf_r+0x36>
 8007318:	690b      	ldr	r3, [r1, #16]
 800731a:	b973      	cbnz	r3, 800733a <_svfiprintf_r+0x36>
 800731c:	2140      	movs	r1, #64	@ 0x40
 800731e:	f7ff ff09 	bl	8007134 <_malloc_r>
 8007322:	6028      	str	r0, [r5, #0]
 8007324:	6128      	str	r0, [r5, #16]
 8007326:	b930      	cbnz	r0, 8007336 <_svfiprintf_r+0x32>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b01d      	add	sp, #116	@ 0x74
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	2340      	movs	r3, #64	@ 0x40
 8007338:	616b      	str	r3, [r5, #20]
 800733a:	2300      	movs	r3, #0
 800733c:	9309      	str	r3, [sp, #36]	@ 0x24
 800733e:	2320      	movs	r3, #32
 8007340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007344:	f8cd 800c 	str.w	r8, [sp, #12]
 8007348:	2330      	movs	r3, #48	@ 0x30
 800734a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074e8 <_svfiprintf_r+0x1e4>
 800734e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007352:	f04f 0901 	mov.w	r9, #1
 8007356:	4623      	mov	r3, r4
 8007358:	469a      	mov	sl, r3
 800735a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735e:	b10a      	cbz	r2, 8007364 <_svfiprintf_r+0x60>
 8007360:	2a25      	cmp	r2, #37	@ 0x25
 8007362:	d1f9      	bne.n	8007358 <_svfiprintf_r+0x54>
 8007364:	ebba 0b04 	subs.w	fp, sl, r4
 8007368:	d00b      	beq.n	8007382 <_svfiprintf_r+0x7e>
 800736a:	465b      	mov	r3, fp
 800736c:	4622      	mov	r2, r4
 800736e:	4629      	mov	r1, r5
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ff6b 	bl	800724c <__ssputs_r>
 8007376:	3001      	adds	r0, #1
 8007378:	f000 80a7 	beq.w	80074ca <_svfiprintf_r+0x1c6>
 800737c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737e:	445a      	add	r2, fp
 8007380:	9209      	str	r2, [sp, #36]	@ 0x24
 8007382:	f89a 3000 	ldrb.w	r3, [sl]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 809f 	beq.w	80074ca <_svfiprintf_r+0x1c6>
 800738c:	2300      	movs	r3, #0
 800738e:	f04f 32ff 	mov.w	r2, #4294967295
 8007392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007396:	f10a 0a01 	add.w	sl, sl, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9307      	str	r3, [sp, #28]
 800739e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073a4:	4654      	mov	r4, sl
 80073a6:	2205      	movs	r2, #5
 80073a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ac:	484e      	ldr	r0, [pc, #312]	@ (80074e8 <_svfiprintf_r+0x1e4>)
 80073ae:	f7f8 ff27 	bl	8000200 <memchr>
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	b9d8      	cbnz	r0, 80073ee <_svfiprintf_r+0xea>
 80073b6:	06d0      	lsls	r0, r2, #27
 80073b8:	bf44      	itt	mi
 80073ba:	2320      	movmi	r3, #32
 80073bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c0:	0711      	lsls	r1, r2, #28
 80073c2:	bf44      	itt	mi
 80073c4:	232b      	movmi	r3, #43	@ 0x2b
 80073c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d0:	d015      	beq.n	80073fe <_svfiprintf_r+0xfa>
 80073d2:	9a07      	ldr	r2, [sp, #28]
 80073d4:	4654      	mov	r4, sl
 80073d6:	2000      	movs	r0, #0
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4621      	mov	r1, r4
 80073de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e2:	3b30      	subs	r3, #48	@ 0x30
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	d94b      	bls.n	8007480 <_svfiprintf_r+0x17c>
 80073e8:	b1b0      	cbz	r0, 8007418 <_svfiprintf_r+0x114>
 80073ea:	9207      	str	r2, [sp, #28]
 80073ec:	e014      	b.n	8007418 <_svfiprintf_r+0x114>
 80073ee:	eba0 0308 	sub.w	r3, r0, r8
 80073f2:	fa09 f303 	lsl.w	r3, r9, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	46a2      	mov	sl, r4
 80073fc:	e7d2      	b.n	80073a4 <_svfiprintf_r+0xa0>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9103      	str	r1, [sp, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfbb      	ittet	lt
 800740a:	425b      	neglt	r3, r3
 800740c:	f042 0202 	orrlt.w	r2, r2, #2
 8007410:	9307      	strge	r3, [sp, #28]
 8007412:	9307      	strlt	r3, [sp, #28]
 8007414:	bfb8      	it	lt
 8007416:	9204      	strlt	r2, [sp, #16]
 8007418:	7823      	ldrb	r3, [r4, #0]
 800741a:	2b2e      	cmp	r3, #46	@ 0x2e
 800741c:	d10a      	bne.n	8007434 <_svfiprintf_r+0x130>
 800741e:	7863      	ldrb	r3, [r4, #1]
 8007420:	2b2a      	cmp	r3, #42	@ 0x2a
 8007422:	d132      	bne.n	800748a <_svfiprintf_r+0x186>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9203      	str	r2, [sp, #12]
 800742c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007430:	3402      	adds	r4, #2
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074f8 <_svfiprintf_r+0x1f4>
 8007438:	7821      	ldrb	r1, [r4, #0]
 800743a:	2203      	movs	r2, #3
 800743c:	4650      	mov	r0, sl
 800743e:	f7f8 fedf 	bl	8000200 <memchr>
 8007442:	b138      	cbz	r0, 8007454 <_svfiprintf_r+0x150>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	eba0 000a 	sub.w	r0, r0, sl
 800744a:	2240      	movs	r2, #64	@ 0x40
 800744c:	4082      	lsls	r2, r0
 800744e:	4313      	orrs	r3, r2
 8007450:	3401      	adds	r4, #1
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007458:	4824      	ldr	r0, [pc, #144]	@ (80074ec <_svfiprintf_r+0x1e8>)
 800745a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800745e:	2206      	movs	r2, #6
 8007460:	f7f8 fece 	bl	8000200 <memchr>
 8007464:	2800      	cmp	r0, #0
 8007466:	d036      	beq.n	80074d6 <_svfiprintf_r+0x1d2>
 8007468:	4b21      	ldr	r3, [pc, #132]	@ (80074f0 <_svfiprintf_r+0x1ec>)
 800746a:	bb1b      	cbnz	r3, 80074b4 <_svfiprintf_r+0x1b0>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	3307      	adds	r3, #7
 8007470:	f023 0307 	bic.w	r3, r3, #7
 8007474:	3308      	adds	r3, #8
 8007476:	9303      	str	r3, [sp, #12]
 8007478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747a:	4433      	add	r3, r6
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	e76a      	b.n	8007356 <_svfiprintf_r+0x52>
 8007480:	fb0c 3202 	mla	r2, ip, r2, r3
 8007484:	460c      	mov	r4, r1
 8007486:	2001      	movs	r0, #1
 8007488:	e7a8      	b.n	80073dc <_svfiprintf_r+0xd8>
 800748a:	2300      	movs	r3, #0
 800748c:	3401      	adds	r4, #1
 800748e:	9305      	str	r3, [sp, #20]
 8007490:	4619      	mov	r1, r3
 8007492:	f04f 0c0a 	mov.w	ip, #10
 8007496:	4620      	mov	r0, r4
 8007498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749c:	3a30      	subs	r2, #48	@ 0x30
 800749e:	2a09      	cmp	r2, #9
 80074a0:	d903      	bls.n	80074aa <_svfiprintf_r+0x1a6>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0c6      	beq.n	8007434 <_svfiprintf_r+0x130>
 80074a6:	9105      	str	r1, [sp, #20]
 80074a8:	e7c4      	b.n	8007434 <_svfiprintf_r+0x130>
 80074aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ae:	4604      	mov	r4, r0
 80074b0:	2301      	movs	r3, #1
 80074b2:	e7f0      	b.n	8007496 <_svfiprintf_r+0x192>
 80074b4:	ab03      	add	r3, sp, #12
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	462a      	mov	r2, r5
 80074ba:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <_svfiprintf_r+0x1f0>)
 80074bc:	a904      	add	r1, sp, #16
 80074be:	4638      	mov	r0, r7
 80074c0:	f3af 8000 	nop.w
 80074c4:	1c42      	adds	r2, r0, #1
 80074c6:	4606      	mov	r6, r0
 80074c8:	d1d6      	bne.n	8007478 <_svfiprintf_r+0x174>
 80074ca:	89ab      	ldrh	r3, [r5, #12]
 80074cc:	065b      	lsls	r3, r3, #25
 80074ce:	f53f af2d 	bmi.w	800732c <_svfiprintf_r+0x28>
 80074d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074d4:	e72c      	b.n	8007330 <_svfiprintf_r+0x2c>
 80074d6:	ab03      	add	r3, sp, #12
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	462a      	mov	r2, r5
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <_svfiprintf_r+0x1f0>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	4638      	mov	r0, r7
 80074e2:	f000 f879 	bl	80075d8 <_printf_i>
 80074e6:	e7ed      	b.n	80074c4 <_svfiprintf_r+0x1c0>
 80074e8:	080089f8 	.word	0x080089f8
 80074ec:	08008a02 	.word	0x08008a02
 80074f0:	00000000 	.word	0x00000000
 80074f4:	0800724d 	.word	0x0800724d
 80074f8:	080089fe 	.word	0x080089fe

080074fc <_printf_common>:
 80074fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	4616      	mov	r6, r2
 8007502:	4698      	mov	r8, r3
 8007504:	688a      	ldr	r2, [r1, #8]
 8007506:	690b      	ldr	r3, [r1, #16]
 8007508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800750c:	4293      	cmp	r3, r2
 800750e:	bfb8      	it	lt
 8007510:	4613      	movlt	r3, r2
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007518:	4607      	mov	r7, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b10a      	cbz	r2, 8007522 <_printf_common+0x26>
 800751e:	3301      	adds	r3, #1
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	0699      	lsls	r1, r3, #26
 8007526:	bf42      	ittt	mi
 8007528:	6833      	ldrmi	r3, [r6, #0]
 800752a:	3302      	addmi	r3, #2
 800752c:	6033      	strmi	r3, [r6, #0]
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	f015 0506 	ands.w	r5, r5, #6
 8007534:	d106      	bne.n	8007544 <_printf_common+0x48>
 8007536:	f104 0a19 	add.w	sl, r4, #25
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	6832      	ldr	r2, [r6, #0]
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	42ab      	cmp	r3, r5
 8007542:	dc26      	bgt.n	8007592 <_printf_common+0x96>
 8007544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	3b00      	subs	r3, #0
 800754c:	bf18      	it	ne
 800754e:	2301      	movne	r3, #1
 8007550:	0692      	lsls	r2, r2, #26
 8007552:	d42b      	bmi.n	80075ac <_printf_common+0xb0>
 8007554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007558:	4641      	mov	r1, r8
 800755a:	4638      	mov	r0, r7
 800755c:	47c8      	blx	r9
 800755e:	3001      	adds	r0, #1
 8007560:	d01e      	beq.n	80075a0 <_printf_common+0xa4>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	f003 0306 	and.w	r3, r3, #6
 800756a:	2b04      	cmp	r3, #4
 800756c:	bf02      	ittt	eq
 800756e:	68e5      	ldreq	r5, [r4, #12]
 8007570:	6833      	ldreq	r3, [r6, #0]
 8007572:	1aed      	subeq	r5, r5, r3
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	bf0c      	ite	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	2500      	movne	r5, #0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfc4      	itt	gt
 8007582:	1a9b      	subgt	r3, r3, r2
 8007584:	18ed      	addgt	r5, r5, r3
 8007586:	2600      	movs	r6, #0
 8007588:	341a      	adds	r4, #26
 800758a:	42b5      	cmp	r5, r6
 800758c:	d11a      	bne.n	80075c4 <_printf_common+0xc8>
 800758e:	2000      	movs	r0, #0
 8007590:	e008      	b.n	80075a4 <_printf_common+0xa8>
 8007592:	2301      	movs	r3, #1
 8007594:	4652      	mov	r2, sl
 8007596:	4641      	mov	r1, r8
 8007598:	4638      	mov	r0, r7
 800759a:	47c8      	blx	r9
 800759c:	3001      	adds	r0, #1
 800759e:	d103      	bne.n	80075a8 <_printf_common+0xac>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	3501      	adds	r5, #1
 80075aa:	e7c6      	b.n	800753a <_printf_common+0x3e>
 80075ac:	18e1      	adds	r1, r4, r3
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	2030      	movs	r0, #48	@ 0x30
 80075b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075b6:	4422      	add	r2, r4
 80075b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075c0:	3302      	adds	r3, #2
 80075c2:	e7c7      	b.n	8007554 <_printf_common+0x58>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4622      	mov	r2, r4
 80075c8:	4641      	mov	r1, r8
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c8      	blx	r9
 80075ce:	3001      	adds	r0, #1
 80075d0:	d0e6      	beq.n	80075a0 <_printf_common+0xa4>
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7d9      	b.n	800758a <_printf_common+0x8e>
	...

080075d8 <_printf_i>:
 80075d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	7e0f      	ldrb	r7, [r1, #24]
 80075de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075e0:	2f78      	cmp	r7, #120	@ 0x78
 80075e2:	4691      	mov	r9, r2
 80075e4:	4680      	mov	r8, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	469a      	mov	sl, r3
 80075ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ee:	d807      	bhi.n	8007600 <_printf_i+0x28>
 80075f0:	2f62      	cmp	r7, #98	@ 0x62
 80075f2:	d80a      	bhi.n	800760a <_printf_i+0x32>
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	f000 80d2 	beq.w	800779e <_printf_i+0x1c6>
 80075fa:	2f58      	cmp	r7, #88	@ 0x58
 80075fc:	f000 80b9 	beq.w	8007772 <_printf_i+0x19a>
 8007600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007608:	e03a      	b.n	8007680 <_printf_i+0xa8>
 800760a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800760e:	2b15      	cmp	r3, #21
 8007610:	d8f6      	bhi.n	8007600 <_printf_i+0x28>
 8007612:	a101      	add	r1, pc, #4	@ (adr r1, 8007618 <_printf_i+0x40>)
 8007614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007618:	08007671 	.word	0x08007671
 800761c:	08007685 	.word	0x08007685
 8007620:	08007601 	.word	0x08007601
 8007624:	08007601 	.word	0x08007601
 8007628:	08007601 	.word	0x08007601
 800762c:	08007601 	.word	0x08007601
 8007630:	08007685 	.word	0x08007685
 8007634:	08007601 	.word	0x08007601
 8007638:	08007601 	.word	0x08007601
 800763c:	08007601 	.word	0x08007601
 8007640:	08007601 	.word	0x08007601
 8007644:	08007785 	.word	0x08007785
 8007648:	080076af 	.word	0x080076af
 800764c:	0800773f 	.word	0x0800773f
 8007650:	08007601 	.word	0x08007601
 8007654:	08007601 	.word	0x08007601
 8007658:	080077a7 	.word	0x080077a7
 800765c:	08007601 	.word	0x08007601
 8007660:	080076af 	.word	0x080076af
 8007664:	08007601 	.word	0x08007601
 8007668:	08007601 	.word	0x08007601
 800766c:	08007747 	.word	0x08007747
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6032      	str	r2, [r6, #0]
 8007678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800767c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007680:	2301      	movs	r3, #1
 8007682:	e09d      	b.n	80077c0 <_printf_i+0x1e8>
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	6820      	ldr	r0, [r4, #0]
 8007688:	1d19      	adds	r1, r3, #4
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	0606      	lsls	r6, r0, #24
 800768e:	d501      	bpl.n	8007694 <_printf_i+0xbc>
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	e003      	b.n	800769c <_printf_i+0xc4>
 8007694:	0645      	lsls	r5, r0, #25
 8007696:	d5fb      	bpl.n	8007690 <_printf_i+0xb8>
 8007698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800769c:	2d00      	cmp	r5, #0
 800769e:	da03      	bge.n	80076a8 <_printf_i+0xd0>
 80076a0:	232d      	movs	r3, #45	@ 0x2d
 80076a2:	426d      	negs	r5, r5
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a8:	4859      	ldr	r0, [pc, #356]	@ (8007810 <_printf_i+0x238>)
 80076aa:	230a      	movs	r3, #10
 80076ac:	e011      	b.n	80076d2 <_printf_i+0xfa>
 80076ae:	6821      	ldr	r1, [r4, #0]
 80076b0:	6833      	ldr	r3, [r6, #0]
 80076b2:	0608      	lsls	r0, r1, #24
 80076b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80076b8:	d402      	bmi.n	80076c0 <_printf_i+0xe8>
 80076ba:	0649      	lsls	r1, r1, #25
 80076bc:	bf48      	it	mi
 80076be:	b2ad      	uxthmi	r5, r5
 80076c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80076c2:	4853      	ldr	r0, [pc, #332]	@ (8007810 <_printf_i+0x238>)
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	bf14      	ite	ne
 80076c8:	230a      	movne	r3, #10
 80076ca:	2308      	moveq	r3, #8
 80076cc:	2100      	movs	r1, #0
 80076ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076d2:	6866      	ldr	r6, [r4, #4]
 80076d4:	60a6      	str	r6, [r4, #8]
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	bfa2      	ittt	ge
 80076da:	6821      	ldrge	r1, [r4, #0]
 80076dc:	f021 0104 	bicge.w	r1, r1, #4
 80076e0:	6021      	strge	r1, [r4, #0]
 80076e2:	b90d      	cbnz	r5, 80076e8 <_printf_i+0x110>
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	d04b      	beq.n	8007780 <_printf_i+0x1a8>
 80076e8:	4616      	mov	r6, r2
 80076ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ee:	fb03 5711 	mls	r7, r3, r1, r5
 80076f2:	5dc7      	ldrb	r7, [r0, r7]
 80076f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076f8:	462f      	mov	r7, r5
 80076fa:	42bb      	cmp	r3, r7
 80076fc:	460d      	mov	r5, r1
 80076fe:	d9f4      	bls.n	80076ea <_printf_i+0x112>
 8007700:	2b08      	cmp	r3, #8
 8007702:	d10b      	bne.n	800771c <_printf_i+0x144>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	07df      	lsls	r7, r3, #31
 8007708:	d508      	bpl.n	800771c <_printf_i+0x144>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	4299      	cmp	r1, r3
 8007710:	bfde      	ittt	le
 8007712:	2330      	movle	r3, #48	@ 0x30
 8007714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800771c:	1b92      	subs	r2, r2, r6
 800771e:	6122      	str	r2, [r4, #16]
 8007720:	f8cd a000 	str.w	sl, [sp]
 8007724:	464b      	mov	r3, r9
 8007726:	aa03      	add	r2, sp, #12
 8007728:	4621      	mov	r1, r4
 800772a:	4640      	mov	r0, r8
 800772c:	f7ff fee6 	bl	80074fc <_printf_common>
 8007730:	3001      	adds	r0, #1
 8007732:	d14a      	bne.n	80077ca <_printf_i+0x1f2>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b004      	add	sp, #16
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f043 0320 	orr.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	4833      	ldr	r0, [pc, #204]	@ (8007814 <_printf_i+0x23c>)
 8007748:	2778      	movs	r7, #120	@ 0x78
 800774a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	6831      	ldr	r1, [r6, #0]
 8007752:	061f      	lsls	r7, r3, #24
 8007754:	f851 5b04 	ldr.w	r5, [r1], #4
 8007758:	d402      	bmi.n	8007760 <_printf_i+0x188>
 800775a:	065f      	lsls	r7, r3, #25
 800775c:	bf48      	it	mi
 800775e:	b2ad      	uxthmi	r5, r5
 8007760:	6031      	str	r1, [r6, #0]
 8007762:	07d9      	lsls	r1, r3, #31
 8007764:	bf44      	itt	mi
 8007766:	f043 0320 	orrmi.w	r3, r3, #32
 800776a:	6023      	strmi	r3, [r4, #0]
 800776c:	b11d      	cbz	r5, 8007776 <_printf_i+0x19e>
 800776e:	2310      	movs	r3, #16
 8007770:	e7ac      	b.n	80076cc <_printf_i+0xf4>
 8007772:	4827      	ldr	r0, [pc, #156]	@ (8007810 <_printf_i+0x238>)
 8007774:	e7e9      	b.n	800774a <_printf_i+0x172>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	f023 0320 	bic.w	r3, r3, #32
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	e7f6      	b.n	800776e <_printf_i+0x196>
 8007780:	4616      	mov	r6, r2
 8007782:	e7bd      	b.n	8007700 <_printf_i+0x128>
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	6825      	ldr	r5, [r4, #0]
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	1d18      	adds	r0, r3, #4
 800778c:	6030      	str	r0, [r6, #0]
 800778e:	062e      	lsls	r6, r5, #24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	d501      	bpl.n	8007798 <_printf_i+0x1c0>
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e002      	b.n	800779e <_printf_i+0x1c6>
 8007798:	0668      	lsls	r0, r5, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0x1bc>
 800779c:	8019      	strh	r1, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	4616      	mov	r6, r2
 80077a4:	e7bc      	b.n	8007720 <_printf_i+0x148>
 80077a6:	6833      	ldr	r3, [r6, #0]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	6032      	str	r2, [r6, #0]
 80077ac:	681e      	ldr	r6, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	2100      	movs	r1, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7f8 fd24 	bl	8000200 <memchr>
 80077b8:	b108      	cbz	r0, 80077be <_printf_i+0x1e6>
 80077ba:	1b80      	subs	r0, r0, r6
 80077bc:	6060      	str	r0, [r4, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c8:	e7aa      	b.n	8007720 <_printf_i+0x148>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	4632      	mov	r2, r6
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	47d0      	blx	sl
 80077d4:	3001      	adds	r0, #1
 80077d6:	d0ad      	beq.n	8007734 <_printf_i+0x15c>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	079b      	lsls	r3, r3, #30
 80077dc:	d413      	bmi.n	8007806 <_printf_i+0x22e>
 80077de:	68e0      	ldr	r0, [r4, #12]
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	4298      	cmp	r0, r3
 80077e4:	bfb8      	it	lt
 80077e6:	4618      	movlt	r0, r3
 80077e8:	e7a6      	b.n	8007738 <_printf_i+0x160>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d09d      	beq.n	8007734 <_printf_i+0x15c>
 80077f8:	3501      	adds	r5, #1
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	9903      	ldr	r1, [sp, #12]
 80077fe:	1a5b      	subs	r3, r3, r1
 8007800:	42ab      	cmp	r3, r5
 8007802:	dcf2      	bgt.n	80077ea <_printf_i+0x212>
 8007804:	e7eb      	b.n	80077de <_printf_i+0x206>
 8007806:	2500      	movs	r5, #0
 8007808:	f104 0619 	add.w	r6, r4, #25
 800780c:	e7f5      	b.n	80077fa <_printf_i+0x222>
 800780e:	bf00      	nop
 8007810:	08008a09 	.word	0x08008a09
 8007814:	08008a1a 	.word	0x08008a1a

08007818 <memmove>:
 8007818:	4288      	cmp	r0, r1
 800781a:	b510      	push	{r4, lr}
 800781c:	eb01 0402 	add.w	r4, r1, r2
 8007820:	d902      	bls.n	8007828 <memmove+0x10>
 8007822:	4284      	cmp	r4, r0
 8007824:	4623      	mov	r3, r4
 8007826:	d807      	bhi.n	8007838 <memmove+0x20>
 8007828:	1e43      	subs	r3, r0, #1
 800782a:	42a1      	cmp	r1, r4
 800782c:	d008      	beq.n	8007840 <memmove+0x28>
 800782e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007836:	e7f8      	b.n	800782a <memmove+0x12>
 8007838:	4402      	add	r2, r0
 800783a:	4601      	mov	r1, r0
 800783c:	428a      	cmp	r2, r1
 800783e:	d100      	bne.n	8007842 <memmove+0x2a>
 8007840:	bd10      	pop	{r4, pc}
 8007842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800784a:	e7f7      	b.n	800783c <memmove+0x24>

0800784c <_sbrk_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4d06      	ldr	r5, [pc, #24]	@ (8007868 <_sbrk_r+0x1c>)
 8007850:	2300      	movs	r3, #0
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7fb f88a 	bl	8002970 <_sbrk>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_sbrk_r+0x1a>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_sbrk_r+0x1a>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	200006bc 	.word	0x200006bc

0800786c <_realloc_r>:
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4680      	mov	r8, r0
 8007872:	4615      	mov	r5, r2
 8007874:	460c      	mov	r4, r1
 8007876:	b921      	cbnz	r1, 8007882 <_realloc_r+0x16>
 8007878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787c:	4611      	mov	r1, r2
 800787e:	f7ff bc59 	b.w	8007134 <_malloc_r>
 8007882:	b92a      	cbnz	r2, 8007890 <_realloc_r+0x24>
 8007884:	f7ff fbea 	bl	800705c <_free_r>
 8007888:	2400      	movs	r4, #0
 800788a:	4620      	mov	r0, r4
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	f000 f81a 	bl	80078c8 <_malloc_usable_size_r>
 8007894:	4285      	cmp	r5, r0
 8007896:	4606      	mov	r6, r0
 8007898:	d802      	bhi.n	80078a0 <_realloc_r+0x34>
 800789a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800789e:	d8f4      	bhi.n	800788a <_realloc_r+0x1e>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4640      	mov	r0, r8
 80078a4:	f7ff fc46 	bl	8007134 <_malloc_r>
 80078a8:	4607      	mov	r7, r0
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0ec      	beq.n	8007888 <_realloc_r+0x1c>
 80078ae:	42b5      	cmp	r5, r6
 80078b0:	462a      	mov	r2, r5
 80078b2:	4621      	mov	r1, r4
 80078b4:	bf28      	it	cs
 80078b6:	4632      	movcs	r2, r6
 80078b8:	f7ff fbc2 	bl	8007040 <memcpy>
 80078bc:	4621      	mov	r1, r4
 80078be:	4640      	mov	r0, r8
 80078c0:	f7ff fbcc 	bl	800705c <_free_r>
 80078c4:	463c      	mov	r4, r7
 80078c6:	e7e0      	b.n	800788a <_realloc_r+0x1e>

080078c8 <_malloc_usable_size_r>:
 80078c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078cc:	1f18      	subs	r0, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bfbc      	itt	lt
 80078d2:	580b      	ldrlt	r3, [r1, r0]
 80078d4:	18c0      	addlt	r0, r0, r3
 80078d6:	4770      	bx	lr

080078d8 <pow>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	ed2d 8b02 	vpush	{d8}
 80078de:	eeb0 8a40 	vmov.f32	s16, s0
 80078e2:	eef0 8a60 	vmov.f32	s17, s1
 80078e6:	ec55 4b11 	vmov	r4, r5, d1
 80078ea:	f000 f871 	bl	80079d0 <__ieee754_pow>
 80078ee:	4622      	mov	r2, r4
 80078f0:	462b      	mov	r3, r5
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	ec57 6b10 	vmov	r6, r7, d0
 80078fa:	f7f9 f927 	bl	8000b4c <__aeabi_dcmpun>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d13b      	bne.n	800797a <pow+0xa2>
 8007902:	ec51 0b18 	vmov	r0, r1, d8
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	f7f9 f8ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800790e:	b1b8      	cbz	r0, 8007940 <pow+0x68>
 8007910:	2200      	movs	r2, #0
 8007912:	2300      	movs	r3, #0
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f8e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800791c:	2800      	cmp	r0, #0
 800791e:	d146      	bne.n	80079ae <pow+0xd6>
 8007920:	ec45 4b10 	vmov	d0, r4, r5
 8007924:	f000 f848 	bl	80079b8 <finite>
 8007928:	b338      	cbz	r0, 800797a <pow+0xa2>
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f9 f8e3 	bl	8000afc <__aeabi_dcmplt>
 8007936:	b300      	cbz	r0, 800797a <pow+0xa2>
 8007938:	f7ff fb56 	bl	8006fe8 <__errno>
 800793c:	2322      	movs	r3, #34	@ 0x22
 800793e:	e01b      	b.n	8007978 <pow+0xa0>
 8007940:	ec47 6b10 	vmov	d0, r6, r7
 8007944:	f000 f838 	bl	80079b8 <finite>
 8007948:	b9e0      	cbnz	r0, 8007984 <pow+0xac>
 800794a:	eeb0 0a48 	vmov.f32	s0, s16
 800794e:	eef0 0a68 	vmov.f32	s1, s17
 8007952:	f000 f831 	bl	80079b8 <finite>
 8007956:	b1a8      	cbz	r0, 8007984 <pow+0xac>
 8007958:	ec45 4b10 	vmov	d0, r4, r5
 800795c:	f000 f82c 	bl	80079b8 <finite>
 8007960:	b180      	cbz	r0, 8007984 <pow+0xac>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4630      	mov	r0, r6
 8007968:	4639      	mov	r1, r7
 800796a:	f7f9 f8ef 	bl	8000b4c <__aeabi_dcmpun>
 800796e:	2800      	cmp	r0, #0
 8007970:	d0e2      	beq.n	8007938 <pow+0x60>
 8007972:	f7ff fb39 	bl	8006fe8 <__errno>
 8007976:	2321      	movs	r3, #33	@ 0x21
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	ecbd 8b02 	vpop	{d8}
 800797e:	ec47 6b10 	vmov	d0, r6, r7
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8007990:	2800      	cmp	r0, #0
 8007992:	d0f2      	beq.n	800797a <pow+0xa2>
 8007994:	eeb0 0a48 	vmov.f32	s0, s16
 8007998:	eef0 0a68 	vmov.f32	s1, s17
 800799c:	f000 f80c 	bl	80079b8 <finite>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d0ea      	beq.n	800797a <pow+0xa2>
 80079a4:	ec45 4b10 	vmov	d0, r4, r5
 80079a8:	f000 f806 	bl	80079b8 <finite>
 80079ac:	e7c3      	b.n	8007936 <pow+0x5e>
 80079ae:	4f01      	ldr	r7, [pc, #4]	@ (80079b4 <pow+0xdc>)
 80079b0:	2600      	movs	r6, #0
 80079b2:	e7e2      	b.n	800797a <pow+0xa2>
 80079b4:	3ff00000 	.word	0x3ff00000

080079b8 <finite>:
 80079b8:	b082      	sub	sp, #8
 80079ba:	ed8d 0b00 	vstr	d0, [sp]
 80079be:	9801      	ldr	r0, [sp, #4]
 80079c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80079c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80079c8:	0fc0      	lsrs	r0, r0, #31
 80079ca:	b002      	add	sp, #8
 80079cc:	4770      	bx	lr
	...

080079d0 <__ieee754_pow>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	b091      	sub	sp, #68	@ 0x44
 80079d6:	ed8d 1b00 	vstr	d1, [sp]
 80079da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80079de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80079e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80079e6:	ec57 6b10 	vmov	r6, r7, d0
 80079ea:	d113      	bne.n	8007a14 <__ieee754_pow+0x44>
 80079ec:	19b3      	adds	r3, r6, r6
 80079ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80079f2:	4152      	adcs	r2, r2
 80079f4:	4298      	cmp	r0, r3
 80079f6:	4b98      	ldr	r3, [pc, #608]	@ (8007c58 <__ieee754_pow+0x288>)
 80079f8:	4193      	sbcs	r3, r2
 80079fa:	f080 84ea 	bcs.w	80083d2 <__ieee754_pow+0xa02>
 80079fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fc51 	bl	80002ac <__adddf3>
 8007a0a:	ec41 0b10 	vmov	d0, r0, r1
 8007a0e:	b011      	add	sp, #68	@ 0x44
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	4a91      	ldr	r2, [pc, #580]	@ (8007c5c <__ieee754_pow+0x28c>)
 8007a16:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007a1a:	4590      	cmp	r8, r2
 8007a1c:	463d      	mov	r5, r7
 8007a1e:	4633      	mov	r3, r6
 8007a20:	d806      	bhi.n	8007a30 <__ieee754_pow+0x60>
 8007a22:	d101      	bne.n	8007a28 <__ieee754_pow+0x58>
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	d1ea      	bne.n	80079fe <__ieee754_pow+0x2e>
 8007a28:	4592      	cmp	sl, r2
 8007a2a:	d801      	bhi.n	8007a30 <__ieee754_pow+0x60>
 8007a2c:	d10e      	bne.n	8007a4c <__ieee754_pow+0x7c>
 8007a2e:	b169      	cbz	r1, 8007a4c <__ieee754_pow+0x7c>
 8007a30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007a34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007a38:	431d      	orrs	r5, r3
 8007a3a:	d1e0      	bne.n	80079fe <__ieee754_pow+0x2e>
 8007a3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a40:	18db      	adds	r3, r3, r3
 8007a42:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007a46:	4152      	adcs	r2, r2
 8007a48:	429d      	cmp	r5, r3
 8007a4a:	e7d4      	b.n	80079f6 <__ieee754_pow+0x26>
 8007a4c:	2d00      	cmp	r5, #0
 8007a4e:	46c3      	mov	fp, r8
 8007a50:	da3a      	bge.n	8007ac8 <__ieee754_pow+0xf8>
 8007a52:	4a83      	ldr	r2, [pc, #524]	@ (8007c60 <__ieee754_pow+0x290>)
 8007a54:	4592      	cmp	sl, r2
 8007a56:	d84d      	bhi.n	8007af4 <__ieee754_pow+0x124>
 8007a58:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007a5c:	4592      	cmp	sl, r2
 8007a5e:	f240 84c7 	bls.w	80083f0 <__ieee754_pow+0xa20>
 8007a62:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007a66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007a6a:	2a14      	cmp	r2, #20
 8007a6c:	dd0f      	ble.n	8007a8e <__ieee754_pow+0xbe>
 8007a6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007a72:	fa21 f402 	lsr.w	r4, r1, r2
 8007a76:	fa04 f202 	lsl.w	r2, r4, r2
 8007a7a:	428a      	cmp	r2, r1
 8007a7c:	f040 84b8 	bne.w	80083f0 <__ieee754_pow+0xa20>
 8007a80:	f004 0401 	and.w	r4, r4, #1
 8007a84:	f1c4 0402 	rsb	r4, r4, #2
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d158      	bne.n	8007b3e <__ieee754_pow+0x16e>
 8007a8c:	e00e      	b.n	8007aac <__ieee754_pow+0xdc>
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d154      	bne.n	8007b3c <__ieee754_pow+0x16c>
 8007a92:	f1c2 0214 	rsb	r2, r2, #20
 8007a96:	fa4a f402 	asr.w	r4, sl, r2
 8007a9a:	fa04 f202 	lsl.w	r2, r4, r2
 8007a9e:	4552      	cmp	r2, sl
 8007aa0:	f040 84a3 	bne.w	80083ea <__ieee754_pow+0xa1a>
 8007aa4:	f004 0401 	and.w	r4, r4, #1
 8007aa8:	f1c4 0402 	rsb	r4, r4, #2
 8007aac:	4a6d      	ldr	r2, [pc, #436]	@ (8007c64 <__ieee754_pow+0x294>)
 8007aae:	4592      	cmp	sl, r2
 8007ab0:	d12e      	bne.n	8007b10 <__ieee754_pow+0x140>
 8007ab2:	f1b9 0f00 	cmp.w	r9, #0
 8007ab6:	f280 8494 	bge.w	80083e2 <__ieee754_pow+0xa12>
 8007aba:	496a      	ldr	r1, [pc, #424]	@ (8007c64 <__ieee754_pow+0x294>)
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f8 fed3 	bl	800086c <__aeabi_ddiv>
 8007ac6:	e7a0      	b.n	8007a0a <__ieee754_pow+0x3a>
 8007ac8:	2400      	movs	r4, #0
 8007aca:	bbc1      	cbnz	r1, 8007b3e <__ieee754_pow+0x16e>
 8007acc:	4a63      	ldr	r2, [pc, #396]	@ (8007c5c <__ieee754_pow+0x28c>)
 8007ace:	4592      	cmp	sl, r2
 8007ad0:	d1ec      	bne.n	8007aac <__ieee754_pow+0xdc>
 8007ad2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007ad6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007ada:	431a      	orrs	r2, r3
 8007adc:	f000 8479 	beq.w	80083d2 <__ieee754_pow+0xa02>
 8007ae0:	4b61      	ldr	r3, [pc, #388]	@ (8007c68 <__ieee754_pow+0x298>)
 8007ae2:	4598      	cmp	r8, r3
 8007ae4:	d908      	bls.n	8007af8 <__ieee754_pow+0x128>
 8007ae6:	f1b9 0f00 	cmp.w	r9, #0
 8007aea:	f2c0 8476 	blt.w	80083da <__ieee754_pow+0xa0a>
 8007aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af2:	e78a      	b.n	8007a0a <__ieee754_pow+0x3a>
 8007af4:	2402      	movs	r4, #2
 8007af6:	e7e8      	b.n	8007aca <__ieee754_pow+0xfa>
 8007af8:	f1b9 0f00 	cmp.w	r9, #0
 8007afc:	f04f 0000 	mov.w	r0, #0
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	da81      	bge.n	8007a0a <__ieee754_pow+0x3a>
 8007b06:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007b0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007b0e:	e77c      	b.n	8007a0a <__ieee754_pow+0x3a>
 8007b10:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007b14:	d106      	bne.n	8007b24 <__ieee754_pow+0x154>
 8007b16:	4632      	mov	r2, r6
 8007b18:	463b      	mov	r3, r7
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 fd7b 	bl	8000618 <__aeabi_dmul>
 8007b22:	e772      	b.n	8007a0a <__ieee754_pow+0x3a>
 8007b24:	4a51      	ldr	r2, [pc, #324]	@ (8007c6c <__ieee754_pow+0x29c>)
 8007b26:	4591      	cmp	r9, r2
 8007b28:	d109      	bne.n	8007b3e <__ieee754_pow+0x16e>
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	db07      	blt.n	8007b3e <__ieee754_pow+0x16e>
 8007b2e:	ec47 6b10 	vmov	d0, r6, r7
 8007b32:	b011      	add	sp, #68	@ 0x44
 8007b34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	f000 bd52 	b.w	80085e0 <__ieee754_sqrt>
 8007b3c:	2400      	movs	r4, #0
 8007b3e:	ec47 6b10 	vmov	d0, r6, r7
 8007b42:	9302      	str	r3, [sp, #8]
 8007b44:	f000 fc88 	bl	8008458 <fabs>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	ec51 0b10 	vmov	r0, r1, d0
 8007b4e:	bb53      	cbnz	r3, 8007ba6 <__ieee754_pow+0x1d6>
 8007b50:	4b44      	ldr	r3, [pc, #272]	@ (8007c64 <__ieee754_pow+0x294>)
 8007b52:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d002      	beq.n	8007b60 <__ieee754_pow+0x190>
 8007b5a:	f1b8 0f00 	cmp.w	r8, #0
 8007b5e:	d122      	bne.n	8007ba6 <__ieee754_pow+0x1d6>
 8007b60:	f1b9 0f00 	cmp.w	r9, #0
 8007b64:	da05      	bge.n	8007b72 <__ieee754_pow+0x1a2>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	493d      	ldr	r1, [pc, #244]	@ (8007c64 <__ieee754_pow+0x294>)
 8007b6e:	f7f8 fe7d 	bl	800086c <__aeabi_ddiv>
 8007b72:	2d00      	cmp	r5, #0
 8007b74:	f6bf af49 	bge.w	8007a0a <__ieee754_pow+0x3a>
 8007b78:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007b7c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007b80:	ea58 0804 	orrs.w	r8, r8, r4
 8007b84:	d108      	bne.n	8007b98 <__ieee754_pow+0x1c8>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f7f8 fb8b 	bl	80002a8 <__aeabi_dsub>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e794      	b.n	8007ac2 <__ieee754_pow+0xf2>
 8007b98:	2c01      	cmp	r4, #1
 8007b9a:	f47f af36 	bne.w	8007a0a <__ieee754_pow+0x3a>
 8007b9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	e731      	b.n	8007a0a <__ieee754_pow+0x3a>
 8007ba6:	0feb      	lsrs	r3, r5, #31
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	ea53 0204 	orrs.w	r2, r3, r4
 8007bae:	d102      	bne.n	8007bb6 <__ieee754_pow+0x1e6>
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	e7e9      	b.n	8007b8a <__ieee754_pow+0x1ba>
 8007bb6:	3c01      	subs	r4, #1
 8007bb8:	431c      	orrs	r4, r3
 8007bba:	d016      	beq.n	8007bea <__ieee754_pow+0x21a>
 8007bbc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007c48 <__ieee754_pow+0x278>
 8007bc0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007bc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bc8:	f240 8112 	bls.w	8007df0 <__ieee754_pow+0x420>
 8007bcc:	4b28      	ldr	r3, [pc, #160]	@ (8007c70 <__ieee754_pow+0x2a0>)
 8007bce:	459a      	cmp	sl, r3
 8007bd0:	4b25      	ldr	r3, [pc, #148]	@ (8007c68 <__ieee754_pow+0x298>)
 8007bd2:	d916      	bls.n	8007c02 <__ieee754_pow+0x232>
 8007bd4:	4598      	cmp	r8, r3
 8007bd6:	d80b      	bhi.n	8007bf0 <__ieee754_pow+0x220>
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	da0b      	bge.n	8007bf6 <__ieee754_pow+0x226>
 8007bde:	2000      	movs	r0, #0
 8007be0:	b011      	add	sp, #68	@ 0x44
 8007be2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be6:	f000 bcf3 	b.w	80085d0 <__math_oflow>
 8007bea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007c50 <__ieee754_pow+0x280>
 8007bee:	e7e7      	b.n	8007bc0 <__ieee754_pow+0x1f0>
 8007bf0:	f1b9 0f00 	cmp.w	r9, #0
 8007bf4:	dcf3      	bgt.n	8007bde <__ieee754_pow+0x20e>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	b011      	add	sp, #68	@ 0x44
 8007bfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfe:	f000 bcdf 	b.w	80085c0 <__math_uflow>
 8007c02:	4598      	cmp	r8, r3
 8007c04:	d20c      	bcs.n	8007c20 <__ieee754_pow+0x250>
 8007c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f7f8 ff75 	bl	8000afc <__aeabi_dcmplt>
 8007c12:	3800      	subs	r0, #0
 8007c14:	bf18      	it	ne
 8007c16:	2001      	movne	r0, #1
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	daec      	bge.n	8007bf8 <__ieee754_pow+0x228>
 8007c1e:	e7df      	b.n	8007be0 <__ieee754_pow+0x210>
 8007c20:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <__ieee754_pow+0x294>)
 8007c22:	4598      	cmp	r8, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	d924      	bls.n	8007c74 <__ieee754_pow+0x2a4>
 8007c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f7f8 ff64 	bl	8000afc <__aeabi_dcmplt>
 8007c34:	3800      	subs	r0, #0
 8007c36:	bf18      	it	ne
 8007c38:	2001      	movne	r0, #1
 8007c3a:	f1b9 0f00 	cmp.w	r9, #0
 8007c3e:	dccf      	bgt.n	8007be0 <__ieee754_pow+0x210>
 8007c40:	e7da      	b.n	8007bf8 <__ieee754_pow+0x228>
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	00000000 	.word	0x00000000
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	00000000 	.word	0x00000000
 8007c54:	bff00000 	.word	0xbff00000
 8007c58:	fff00000 	.word	0xfff00000
 8007c5c:	7ff00000 	.word	0x7ff00000
 8007c60:	433fffff 	.word	0x433fffff
 8007c64:	3ff00000 	.word	0x3ff00000
 8007c68:	3fefffff 	.word	0x3fefffff
 8007c6c:	3fe00000 	.word	0x3fe00000
 8007c70:	43f00000 	.word	0x43f00000
 8007c74:	4b5a      	ldr	r3, [pc, #360]	@ (8007de0 <__ieee754_pow+0x410>)
 8007c76:	f7f8 fb17 	bl	80002a8 <__aeabi_dsub>
 8007c7a:	a351      	add	r3, pc, #324	@ (adr r3, 8007dc0 <__ieee754_pow+0x3f0>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	f7f8 fcc8 	bl	8000618 <__aeabi_dmul>
 8007c88:	a34f      	add	r3, pc, #316	@ (adr r3, 8007dc8 <__ieee754_pow+0x3f8>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	4620      	mov	r0, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7f8 fcbf 	bl	8000618 <__aeabi_dmul>
 8007c9a:	4b52      	ldr	r3, [pc, #328]	@ (8007de4 <__ieee754_pow+0x414>)
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	468b      	mov	fp, r1
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7f8 fcb7 	bl	8000618 <__aeabi_dmul>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	a148      	add	r1, pc, #288	@ (adr r1, 8007dd0 <__ieee754_pow+0x400>)
 8007cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb4:	f7f8 faf8 	bl	80002a8 <__aeabi_dsub>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	f7f8 fcac 	bl	8000618 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4948      	ldr	r1, [pc, #288]	@ (8007de8 <__ieee754_pow+0x418>)
 8007cc8:	f7f8 faee 	bl	80002a8 <__aeabi_dsub>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4680      	mov	r8, r0
 8007cd0:	4689      	mov	r9, r1
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fc9e 	bl	8000618 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 fc98 	bl	8000618 <__aeabi_dmul>
 8007ce8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007dd8 <__ieee754_pow+0x408>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fc93 	bl	8000618 <__aeabi_dmul>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 fad5 	bl	80002a8 <__aeabi_dsub>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4680      	mov	r8, r0
 8007d04:	4689      	mov	r9, r1
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 facf 	bl	80002ac <__adddf3>
 8007d0e:	2400      	movs	r4, #0
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	4620      	mov	r0, r4
 8007d16:	460d      	mov	r5, r1
 8007d18:	f7f8 fac6 	bl	80002a8 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fac0 	bl	80002a8 <__aeabi_dsub>
 8007d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d30:	2300      	movs	r3, #0
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	465b      	mov	r3, fp
 8007d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d44:	f7f8 fab0 	bl	80002a8 <__aeabi_dsub>
 8007d48:	4622      	mov	r2, r4
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	f7f8 fc64 	bl	8000618 <__aeabi_dmul>
 8007d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d54:	4680      	mov	r8, r0
 8007d56:	4689      	mov	r9, r1
 8007d58:	4630      	mov	r0, r6
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f7f8 fc5c 	bl	8000618 <__aeabi_dmul>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 faa0 	bl	80002ac <__adddf3>
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	4606      	mov	r6, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fc4e 	bl	8000618 <__aeabi_dmul>
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4602      	mov	r2, r0
 8007d80:	4680      	mov	r8, r0
 8007d82:	4689      	mov	r9, r1
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fa90 	bl	80002ac <__adddf3>
 8007d8c:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <__ieee754_pow+0x41c>)
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	468a      	mov	sl, r1
 8007d96:	468b      	mov	fp, r1
 8007d98:	f340 82ef 	ble.w	800837a <__ieee754_pow+0x9aa>
 8007d9c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007da0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007da4:	4303      	orrs	r3, r0
 8007da6:	f000 81e8 	beq.w	800817a <__ieee754_pow+0x7aa>
 8007daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	2300      	movs	r3, #0
 8007db2:	f7f8 fea3 	bl	8000afc <__aeabi_dcmplt>
 8007db6:	3800      	subs	r0, #0
 8007db8:	bf18      	it	ne
 8007dba:	2001      	movne	r0, #1
 8007dbc:	e710      	b.n	8007be0 <__ieee754_pow+0x210>
 8007dbe:	bf00      	nop
 8007dc0:	60000000 	.word	0x60000000
 8007dc4:	3ff71547 	.word	0x3ff71547
 8007dc8:	f85ddf44 	.word	0xf85ddf44
 8007dcc:	3e54ae0b 	.word	0x3e54ae0b
 8007dd0:	55555555 	.word	0x55555555
 8007dd4:	3fd55555 	.word	0x3fd55555
 8007dd8:	652b82fe 	.word	0x652b82fe
 8007ddc:	3ff71547 	.word	0x3ff71547
 8007de0:	3ff00000 	.word	0x3ff00000
 8007de4:	3fd00000 	.word	0x3fd00000
 8007de8:	3fe00000 	.word	0x3fe00000
 8007dec:	408fffff 	.word	0x408fffff
 8007df0:	4bd5      	ldr	r3, [pc, #852]	@ (8008148 <__ieee754_pow+0x778>)
 8007df2:	402b      	ands	r3, r5
 8007df4:	2200      	movs	r2, #0
 8007df6:	b92b      	cbnz	r3, 8007e04 <__ieee754_pow+0x434>
 8007df8:	4bd4      	ldr	r3, [pc, #848]	@ (800814c <__ieee754_pow+0x77c>)
 8007dfa:	f7f8 fc0d 	bl	8000618 <__aeabi_dmul>
 8007dfe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007e02:	468b      	mov	fp, r1
 8007e04:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007e08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007e0c:	4413      	add	r3, r2
 8007e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e10:	4bcf      	ldr	r3, [pc, #828]	@ (8008150 <__ieee754_pow+0x780>)
 8007e12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007e16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007e1a:	459b      	cmp	fp, r3
 8007e1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e20:	dd08      	ble.n	8007e34 <__ieee754_pow+0x464>
 8007e22:	4bcc      	ldr	r3, [pc, #816]	@ (8008154 <__ieee754_pow+0x784>)
 8007e24:	459b      	cmp	fp, r3
 8007e26:	f340 81a5 	ble.w	8008174 <__ieee754_pow+0x7a4>
 8007e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e3e:	4bc6      	ldr	r3, [pc, #792]	@ (8008158 <__ieee754_pow+0x788>)
 8007e40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e44:	ed93 7b00 	vldr	d7, [r3]
 8007e48:	4629      	mov	r1, r5
 8007e4a:	ec53 2b17 	vmov	r2, r3, d7
 8007e4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e56:	f7f8 fa27 	bl	80002a8 <__aeabi_dsub>
 8007e5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e66:	f7f8 fa21 	bl	80002ac <__adddf3>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	2000      	movs	r0, #0
 8007e70:	49ba      	ldr	r1, [pc, #744]	@ (800815c <__ieee754_pow+0x78c>)
 8007e72:	f7f8 fcfb 	bl	800086c <__aeabi_ddiv>
 8007e76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fbc9 	bl	8000618 <__aeabi_dmul>
 8007e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007e8e:	106d      	asrs	r5, r5, #1
 8007e90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007e94:	f04f 0b00 	mov.w	fp, #0
 8007e98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007e9c:	4661      	mov	r1, ip
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	46e1      	mov	r9, ip
 8007ea8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007eac:	4614      	mov	r4, r2
 8007eae:	461d      	mov	r5, r3
 8007eb0:	f7f8 fbb2 	bl	8000618 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 f9f4 	bl	80002a8 <__aeabi_dsub>
 8007ec0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	460f      	mov	r7, r1
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7f8 f9ec 	bl	80002a8 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ed8:	f7f8 f9e6 	bl	80002a8 <__aeabi_dsub>
 8007edc:	465a      	mov	r2, fp
 8007ede:	464b      	mov	r3, r9
 8007ee0:	f7f8 fb9a 	bl	8000618 <__aeabi_dmul>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 f9dc 	bl	80002a8 <__aeabi_dsub>
 8007ef0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ef4:	f7f8 fb90 	bl	8000618 <__aeabi_dmul>
 8007ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	f7f8 fb88 	bl	8000618 <__aeabi_dmul>
 8007f08:	a37d      	add	r3, pc, #500	@ (adr r3, 8008100 <__ieee754_pow+0x730>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	4604      	mov	r4, r0
 8007f10:	460d      	mov	r5, r1
 8007f12:	f7f8 fb81 	bl	8000618 <__aeabi_dmul>
 8007f16:	a37c      	add	r3, pc, #496	@ (adr r3, 8008108 <__ieee754_pow+0x738>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f9c6 	bl	80002ac <__adddf3>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	f7f8 fb78 	bl	8000618 <__aeabi_dmul>
 8007f28:	a379      	add	r3, pc, #484	@ (adr r3, 8008110 <__ieee754_pow+0x740>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f9bd 	bl	80002ac <__adddf3>
 8007f32:	4622      	mov	r2, r4
 8007f34:	462b      	mov	r3, r5
 8007f36:	f7f8 fb6f 	bl	8000618 <__aeabi_dmul>
 8007f3a:	a377      	add	r3, pc, #476	@ (adr r3, 8008118 <__ieee754_pow+0x748>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 f9b4 	bl	80002ac <__adddf3>
 8007f44:	4622      	mov	r2, r4
 8007f46:	462b      	mov	r3, r5
 8007f48:	f7f8 fb66 	bl	8000618 <__aeabi_dmul>
 8007f4c:	a374      	add	r3, pc, #464	@ (adr r3, 8008120 <__ieee754_pow+0x750>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 f9ab 	bl	80002ac <__adddf3>
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	f7f8 fb5d 	bl	8000618 <__aeabi_dmul>
 8007f5e:	a372      	add	r3, pc, #456	@ (adr r3, 8008128 <__ieee754_pow+0x758>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 f9a2 	bl	80002ac <__adddf3>
 8007f68:	4622      	mov	r2, r4
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	462b      	mov	r3, r5
 8007f70:	4620      	mov	r0, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	f7f8 fb50 	bl	8000618 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 fb4a 	bl	8000618 <__aeabi_dmul>
 8007f84:	465a      	mov	r2, fp
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f90:	f7f8 f98c 	bl	80002ac <__adddf3>
 8007f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f98:	f7f8 fb3e 	bl	8000618 <__aeabi_dmul>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f7f8 f984 	bl	80002ac <__adddf3>
 8007fa4:	465a      	mov	r2, fp
 8007fa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007faa:	464b      	mov	r3, r9
 8007fac:	4658      	mov	r0, fp
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fb32 	bl	8000618 <__aeabi_dmul>
 8007fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8008160 <__ieee754_pow+0x790>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	f7f8 f976 	bl	80002ac <__adddf3>
 8007fc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fc4:	f7f8 f972 	bl	80002ac <__adddf3>
 8007fc8:	46d8      	mov	r8, fp
 8007fca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007fce:	460d      	mov	r5, r1
 8007fd0:	465a      	mov	r2, fp
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007fdc:	f7f8 fb1c 	bl	8000618 <__aeabi_dmul>
 8007fe0:	465c      	mov	r4, fp
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8008160 <__ieee754_pow+0x790>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7f8 f95b 	bl	80002a8 <__aeabi_dsub>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	f7f8 f957 	bl	80002a8 <__aeabi_dsub>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008002:	f7f8 f951 	bl	80002a8 <__aeabi_dsub>
 8008006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800800a:	f7f8 fb05 	bl	8000618 <__aeabi_dmul>
 800800e:	4622      	mov	r2, r4
 8008010:	4606      	mov	r6, r0
 8008012:	460f      	mov	r7, r1
 8008014:	462b      	mov	r3, r5
 8008016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800801a:	f7f8 fafd 	bl	8000618 <__aeabi_dmul>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 f941 	bl	80002ac <__adddf3>
 800802a:	4606      	mov	r6, r0
 800802c:	460f      	mov	r7, r1
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	f7f8 f939 	bl	80002ac <__adddf3>
 800803a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800803e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008130 <__ieee754_pow+0x760>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	4658      	mov	r0, fp
 8008046:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800804a:	460d      	mov	r5, r1
 800804c:	f7f8 fae4 	bl	8000618 <__aeabi_dmul>
 8008050:	465c      	mov	r4, fp
 8008052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	4620      	mov	r0, r4
 800805c:	4629      	mov	r1, r5
 800805e:	f7f8 f923 	bl	80002a8 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f91d 	bl	80002a8 <__aeabi_dsub>
 800806e:	a332      	add	r3, pc, #200	@ (adr r3, 8008138 <__ieee754_pow+0x768>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 fad0 	bl	8000618 <__aeabi_dmul>
 8008078:	a331      	add	r3, pc, #196	@ (adr r3, 8008140 <__ieee754_pow+0x770>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	4606      	mov	r6, r0
 8008080:	460f      	mov	r7, r1
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fac7 	bl	8000618 <__aeabi_dmul>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 f90b 	bl	80002ac <__adddf3>
 8008096:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008098:	4b32      	ldr	r3, [pc, #200]	@ (8008164 <__ieee754_pow+0x794>)
 800809a:	4413      	add	r3, r2
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 f904 	bl	80002ac <__adddf3>
 80080a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080aa:	f7f8 fa4b 	bl	8000544 <__aeabi_i2d>
 80080ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008168 <__ieee754_pow+0x798>)
 80080b2:	4413      	add	r3, r2
 80080b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080b8:	4606      	mov	r6, r0
 80080ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080be:	460f      	mov	r7, r1
 80080c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c4:	f7f8 f8f2 	bl	80002ac <__adddf3>
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	f7f8 f8ee 	bl	80002ac <__adddf3>
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	f7f8 f8ea 	bl	80002ac <__adddf3>
 80080d8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	4658      	mov	r0, fp
 80080e2:	460d      	mov	r5, r1
 80080e4:	f7f8 f8e0 	bl	80002a8 <__aeabi_dsub>
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	f7f8 f8dc 	bl	80002a8 <__aeabi_dsub>
 80080f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f4:	f7f8 f8d8 	bl	80002a8 <__aeabi_dsub>
 80080f8:	465c      	mov	r4, fp
 80080fa:	4602      	mov	r2, r0
 80080fc:	e036      	b.n	800816c <__ieee754_pow+0x79c>
 80080fe:	bf00      	nop
 8008100:	4a454eef 	.word	0x4a454eef
 8008104:	3fca7e28 	.word	0x3fca7e28
 8008108:	93c9db65 	.word	0x93c9db65
 800810c:	3fcd864a 	.word	0x3fcd864a
 8008110:	a91d4101 	.word	0xa91d4101
 8008114:	3fd17460 	.word	0x3fd17460
 8008118:	518f264d 	.word	0x518f264d
 800811c:	3fd55555 	.word	0x3fd55555
 8008120:	db6fabff 	.word	0xdb6fabff
 8008124:	3fdb6db6 	.word	0x3fdb6db6
 8008128:	33333303 	.word	0x33333303
 800812c:	3fe33333 	.word	0x3fe33333
 8008130:	e0000000 	.word	0xe0000000
 8008134:	3feec709 	.word	0x3feec709
 8008138:	dc3a03fd 	.word	0xdc3a03fd
 800813c:	3feec709 	.word	0x3feec709
 8008140:	145b01f5 	.word	0x145b01f5
 8008144:	be3e2fe0 	.word	0xbe3e2fe0
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	43400000 	.word	0x43400000
 8008150:	0003988e 	.word	0x0003988e
 8008154:	000bb679 	.word	0x000bb679
 8008158:	08008a50 	.word	0x08008a50
 800815c:	3ff00000 	.word	0x3ff00000
 8008160:	40080000 	.word	0x40080000
 8008164:	08008a30 	.word	0x08008a30
 8008168:	08008a40 	.word	0x08008a40
 800816c:	460b      	mov	r3, r1
 800816e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008172:	e5d7      	b.n	8007d24 <__ieee754_pow+0x354>
 8008174:	f04f 0a01 	mov.w	sl, #1
 8008178:	e65e      	b.n	8007e38 <__ieee754_pow+0x468>
 800817a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800844c <__ieee754_pow+0xa7c>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 f892 	bl	80002ac <__adddf3>
 8008188:	4642      	mov	r2, r8
 800818a:	e9cd 0100 	strd	r0, r1, [sp]
 800818e:	464b      	mov	r3, r9
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 f888 	bl	80002a8 <__aeabi_dsub>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081a0:	f7f8 fcca 	bl	8000b38 <__aeabi_dcmpgt>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f47f ae00 	bne.w	8007daa <__ieee754_pow+0x3da>
 80081aa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80081ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80081b2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80081b6:	fa43 fa0a 	asr.w	sl, r3, sl
 80081ba:	44da      	add	sl, fp
 80081bc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80081c0:	489d      	ldr	r0, [pc, #628]	@ (8008438 <__ieee754_pow+0xa68>)
 80081c2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80081c6:	4108      	asrs	r0, r1
 80081c8:	ea00 030a 	and.w	r3, r0, sl
 80081cc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80081d0:	f1c1 0114 	rsb	r1, r1, #20
 80081d4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80081d8:	fa4a fa01 	asr.w	sl, sl, r1
 80081dc:	f1bb 0f00 	cmp.w	fp, #0
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	bfb8      	it	lt
 80081ea:	f1ca 0a00 	rsblt	sl, sl, #0
 80081ee:	f7f8 f85b 	bl	80002a8 <__aeabi_dsub>
 80081f2:	4680      	mov	r8, r0
 80081f4:	4689      	mov	r9, r1
 80081f6:	4632      	mov	r2, r6
 80081f8:	463b      	mov	r3, r7
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f855 	bl	80002ac <__adddf3>
 8008202:	2400      	movs	r4, #0
 8008204:	a37c      	add	r3, pc, #496	@ (adr r3, 80083f8 <__ieee754_pow+0xa28>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	4620      	mov	r0, r4
 800820c:	460d      	mov	r5, r1
 800820e:	f7f8 fa03 	bl	8000618 <__aeabi_dmul>
 8008212:	4642      	mov	r2, r8
 8008214:	e9cd 0100 	strd	r0, r1, [sp]
 8008218:	464b      	mov	r3, r9
 800821a:	4620      	mov	r0, r4
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 f843 	bl	80002a8 <__aeabi_dsub>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 f83d 	bl	80002a8 <__aeabi_dsub>
 800822e:	a374      	add	r3, pc, #464	@ (adr r3, 8008400 <__ieee754_pow+0xa30>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 f9f0 	bl	8000618 <__aeabi_dmul>
 8008238:	a373      	add	r3, pc, #460	@ (adr r3, 8008408 <__ieee754_pow+0xa38>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	4620      	mov	r0, r4
 8008244:	4629      	mov	r1, r5
 8008246:	f7f8 f9e7 	bl	8000618 <__aeabi_dmul>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4640      	mov	r0, r8
 8008250:	4649      	mov	r1, r9
 8008252:	f7f8 f82b 	bl	80002ac <__adddf3>
 8008256:	4604      	mov	r4, r0
 8008258:	460d      	mov	r5, r1
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008262:	f7f8 f823 	bl	80002ac <__adddf3>
 8008266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826a:	4680      	mov	r8, r0
 800826c:	4689      	mov	r9, r1
 800826e:	f7f8 f81b 	bl	80002a8 <__aeabi_dsub>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f8 f815 	bl	80002a8 <__aeabi_dsub>
 800827e:	4642      	mov	r2, r8
 8008280:	4606      	mov	r6, r0
 8008282:	460f      	mov	r7, r1
 8008284:	464b      	mov	r3, r9
 8008286:	4640      	mov	r0, r8
 8008288:	4649      	mov	r1, r9
 800828a:	f7f8 f9c5 	bl	8000618 <__aeabi_dmul>
 800828e:	a360      	add	r3, pc, #384	@ (adr r3, 8008410 <__ieee754_pow+0xa40>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	f7f8 f9be 	bl	8000618 <__aeabi_dmul>
 800829c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008418 <__ieee754_pow+0xa48>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f8 f801 	bl	80002a8 <__aeabi_dsub>
 80082a6:	4622      	mov	r2, r4
 80082a8:	462b      	mov	r3, r5
 80082aa:	f7f8 f9b5 	bl	8000618 <__aeabi_dmul>
 80082ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8008420 <__ieee754_pow+0xa50>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f7 fffa 	bl	80002ac <__adddf3>
 80082b8:	4622      	mov	r2, r4
 80082ba:	462b      	mov	r3, r5
 80082bc:	f7f8 f9ac 	bl	8000618 <__aeabi_dmul>
 80082c0:	a359      	add	r3, pc, #356	@ (adr r3, 8008428 <__ieee754_pow+0xa58>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f7 ffef 	bl	80002a8 <__aeabi_dsub>
 80082ca:	4622      	mov	r2, r4
 80082cc:	462b      	mov	r3, r5
 80082ce:	f7f8 f9a3 	bl	8000618 <__aeabi_dmul>
 80082d2:	a357      	add	r3, pc, #348	@ (adr r3, 8008430 <__ieee754_pow+0xa60>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f7f7 ffe8 	bl	80002ac <__adddf3>
 80082dc:	4622      	mov	r2, r4
 80082de:	462b      	mov	r3, r5
 80082e0:	f7f8 f99a 	bl	8000618 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f7 ffdc 	bl	80002a8 <__aeabi_dsub>
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4640      	mov	r0, r8
 80082fa:	4649      	mov	r1, r9
 80082fc:	f7f8 f98c 	bl	8000618 <__aeabi_dmul>
 8008300:	2200      	movs	r2, #0
 8008302:	e9cd 0100 	strd	r0, r1, [sp]
 8008306:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f7 ffcb 	bl	80002a8 <__aeabi_dsub>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	f7f8 faa7 	bl	800086c <__aeabi_ddiv>
 800831e:	4632      	mov	r2, r6
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	463b      	mov	r3, r7
 8008326:	4640      	mov	r0, r8
 8008328:	4649      	mov	r1, r9
 800832a:	f7f8 f975 	bl	8000618 <__aeabi_dmul>
 800832e:	4632      	mov	r2, r6
 8008330:	463b      	mov	r3, r7
 8008332:	f7f7 ffbb 	bl	80002ac <__adddf3>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4620      	mov	r0, r4
 800833c:	4629      	mov	r1, r5
 800833e:	f7f7 ffb3 	bl	80002a8 <__aeabi_dsub>
 8008342:	4642      	mov	r2, r8
 8008344:	464b      	mov	r3, r9
 8008346:	f7f7 ffaf 	bl	80002a8 <__aeabi_dsub>
 800834a:	460b      	mov	r3, r1
 800834c:	4602      	mov	r2, r0
 800834e:	493b      	ldr	r1, [pc, #236]	@ (800843c <__ieee754_pow+0xa6c>)
 8008350:	2000      	movs	r0, #0
 8008352:	f7f7 ffa9 	bl	80002a8 <__aeabi_dsub>
 8008356:	ec41 0b10 	vmov	d0, r0, r1
 800835a:	ee10 3a90 	vmov	r3, s1
 800835e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008366:	da30      	bge.n	80083ca <__ieee754_pow+0x9fa>
 8008368:	4650      	mov	r0, sl
 800836a:	f000 f87d 	bl	8008468 <scalbn>
 800836e:	ec51 0b10 	vmov	r0, r1, d0
 8008372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008376:	f7ff bbd2 	b.w	8007b1e <__ieee754_pow+0x14e>
 800837a:	4c31      	ldr	r4, [pc, #196]	@ (8008440 <__ieee754_pow+0xa70>)
 800837c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008380:	42a3      	cmp	r3, r4
 8008382:	d91a      	bls.n	80083ba <__ieee754_pow+0x9ea>
 8008384:	4b2f      	ldr	r3, [pc, #188]	@ (8008444 <__ieee754_pow+0xa74>)
 8008386:	440b      	add	r3, r1
 8008388:	4303      	orrs	r3, r0
 800838a:	d009      	beq.n	80083a0 <__ieee754_pow+0x9d0>
 800838c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	f7f8 fbb2 	bl	8000afc <__aeabi_dcmplt>
 8008398:	3800      	subs	r0, #0
 800839a:	bf18      	it	ne
 800839c:	2001      	movne	r0, #1
 800839e:	e42b      	b.n	8007bf8 <__ieee754_pow+0x228>
 80083a0:	4642      	mov	r2, r8
 80083a2:	464b      	mov	r3, r9
 80083a4:	f7f7 ff80 	bl	80002a8 <__aeabi_dsub>
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	f7f8 fbba 	bl	8000b24 <__aeabi_dcmpge>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d1eb      	bne.n	800838c <__ieee754_pow+0x9bc>
 80083b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008454 <__ieee754_pow+0xa84>
 80083b8:	e6f7      	b.n	80081aa <__ieee754_pow+0x7da>
 80083ba:	469a      	mov	sl, r3
 80083bc:	4b22      	ldr	r3, [pc, #136]	@ (8008448 <__ieee754_pow+0xa78>)
 80083be:	459a      	cmp	sl, r3
 80083c0:	f63f aef3 	bhi.w	80081aa <__ieee754_pow+0x7da>
 80083c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80083c8:	e715      	b.n	80081f6 <__ieee754_pow+0x826>
 80083ca:	ec51 0b10 	vmov	r0, r1, d0
 80083ce:	4619      	mov	r1, r3
 80083d0:	e7cf      	b.n	8008372 <__ieee754_pow+0x9a2>
 80083d2:	491a      	ldr	r1, [pc, #104]	@ (800843c <__ieee754_pow+0xa6c>)
 80083d4:	2000      	movs	r0, #0
 80083d6:	f7ff bb18 	b.w	8007a0a <__ieee754_pow+0x3a>
 80083da:	2000      	movs	r0, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	f7ff bb14 	b.w	8007a0a <__ieee754_pow+0x3a>
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7ff bb10 	b.w	8007a0a <__ieee754_pow+0x3a>
 80083ea:	460c      	mov	r4, r1
 80083ec:	f7ff bb5e 	b.w	8007aac <__ieee754_pow+0xdc>
 80083f0:	2400      	movs	r4, #0
 80083f2:	f7ff bb49 	b.w	8007a88 <__ieee754_pow+0xb8>
 80083f6:	bf00      	nop
 80083f8:	00000000 	.word	0x00000000
 80083fc:	3fe62e43 	.word	0x3fe62e43
 8008400:	fefa39ef 	.word	0xfefa39ef
 8008404:	3fe62e42 	.word	0x3fe62e42
 8008408:	0ca86c39 	.word	0x0ca86c39
 800840c:	be205c61 	.word	0xbe205c61
 8008410:	72bea4d0 	.word	0x72bea4d0
 8008414:	3e663769 	.word	0x3e663769
 8008418:	c5d26bf1 	.word	0xc5d26bf1
 800841c:	3ebbbd41 	.word	0x3ebbbd41
 8008420:	af25de2c 	.word	0xaf25de2c
 8008424:	3f11566a 	.word	0x3f11566a
 8008428:	16bebd93 	.word	0x16bebd93
 800842c:	3f66c16c 	.word	0x3f66c16c
 8008430:	5555553e 	.word	0x5555553e
 8008434:	3fc55555 	.word	0x3fc55555
 8008438:	fff00000 	.word	0xfff00000
 800843c:	3ff00000 	.word	0x3ff00000
 8008440:	4090cbff 	.word	0x4090cbff
 8008444:	3f6f3400 	.word	0x3f6f3400
 8008448:	3fe00000 	.word	0x3fe00000
 800844c:	652b82fe 	.word	0x652b82fe
 8008450:	3c971547 	.word	0x3c971547
 8008454:	4090cc00 	.word	0x4090cc00

08008458 <fabs>:
 8008458:	ec51 0b10 	vmov	r0, r1, d0
 800845c:	4602      	mov	r2, r0
 800845e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008462:	ec43 2b10 	vmov	d0, r2, r3
 8008466:	4770      	bx	lr

08008468 <scalbn>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	ec55 4b10 	vmov	r4, r5, d0
 800846e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008472:	4606      	mov	r6, r0
 8008474:	462b      	mov	r3, r5
 8008476:	b991      	cbnz	r1, 800849e <scalbn+0x36>
 8008478:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800847c:	4323      	orrs	r3, r4
 800847e:	d03d      	beq.n	80084fc <scalbn+0x94>
 8008480:	4b35      	ldr	r3, [pc, #212]	@ (8008558 <scalbn+0xf0>)
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	2200      	movs	r2, #0
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	4b33      	ldr	r3, [pc, #204]	@ (800855c <scalbn+0xf4>)
 800848e:	429e      	cmp	r6, r3
 8008490:	4604      	mov	r4, r0
 8008492:	460d      	mov	r5, r1
 8008494:	da0f      	bge.n	80084b6 <scalbn+0x4e>
 8008496:	a328      	add	r3, pc, #160	@ (adr r3, 8008538 <scalbn+0xd0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	e01e      	b.n	80084dc <scalbn+0x74>
 800849e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80084a2:	4291      	cmp	r1, r2
 80084a4:	d10b      	bne.n	80084be <scalbn+0x56>
 80084a6:	4622      	mov	r2, r4
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f7 fefe 	bl	80002ac <__adddf3>
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	e022      	b.n	80084fc <scalbn+0x94>
 80084b6:	460b      	mov	r3, r1
 80084b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80084bc:	3936      	subs	r1, #54	@ 0x36
 80084be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80084c2:	4296      	cmp	r6, r2
 80084c4:	dd0d      	ble.n	80084e2 <scalbn+0x7a>
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008540 <scalbn+0xd8>)
 80084ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ce:	da02      	bge.n	80084d6 <scalbn+0x6e>
 80084d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008548 <scalbn+0xe0>)
 80084d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008540 <scalbn+0xd8>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f8 f89c 	bl	8000618 <__aeabi_dmul>
 80084e0:	e7e6      	b.n	80084b0 <scalbn+0x48>
 80084e2:	1872      	adds	r2, r6, r1
 80084e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80084e8:	428a      	cmp	r2, r1
 80084ea:	dcec      	bgt.n	80084c6 <scalbn+0x5e>
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	dd08      	ble.n	8008502 <scalbn+0x9a>
 80084f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80084f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80084f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084fc:	ec45 4b10 	vmov	d0, r4, r5
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008506:	da08      	bge.n	800851a <scalbn+0xb2>
 8008508:	2d00      	cmp	r5, #0
 800850a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008538 <scalbn+0xd0>)
 800850c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008510:	dac1      	bge.n	8008496 <scalbn+0x2e>
 8008512:	a10f      	add	r1, pc, #60	@ (adr r1, 8008550 <scalbn+0xe8>)
 8008514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008518:	e7bd      	b.n	8008496 <scalbn+0x2e>
 800851a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800851e:	3236      	adds	r2, #54	@ 0x36
 8008520:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008524:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008528:	4620      	mov	r0, r4
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <scalbn+0xf8>)
 800852c:	4629      	mov	r1, r5
 800852e:	2200      	movs	r2, #0
 8008530:	e7d4      	b.n	80084dc <scalbn+0x74>
 8008532:	bf00      	nop
 8008534:	f3af 8000 	nop.w
 8008538:	c2f8f359 	.word	0xc2f8f359
 800853c:	01a56e1f 	.word	0x01a56e1f
 8008540:	8800759c 	.word	0x8800759c
 8008544:	7e37e43c 	.word	0x7e37e43c
 8008548:	8800759c 	.word	0x8800759c
 800854c:	fe37e43c 	.word	0xfe37e43c
 8008550:	c2f8f359 	.word	0xc2f8f359
 8008554:	81a56e1f 	.word	0x81a56e1f
 8008558:	43500000 	.word	0x43500000
 800855c:	ffff3cb0 	.word	0xffff3cb0
 8008560:	3c900000 	.word	0x3c900000

08008564 <with_errno>:
 8008564:	b510      	push	{r4, lr}
 8008566:	ed2d 8b02 	vpush	{d8}
 800856a:	eeb0 8a40 	vmov.f32	s16, s0
 800856e:	eef0 8a60 	vmov.f32	s17, s1
 8008572:	4604      	mov	r4, r0
 8008574:	f7fe fd38 	bl	8006fe8 <__errno>
 8008578:	eeb0 0a48 	vmov.f32	s0, s16
 800857c:	eef0 0a68 	vmov.f32	s1, s17
 8008580:	ecbd 8b02 	vpop	{d8}
 8008584:	6004      	str	r4, [r0, #0]
 8008586:	bd10      	pop	{r4, pc}

08008588 <xflow>:
 8008588:	4603      	mov	r3, r0
 800858a:	b507      	push	{r0, r1, r2, lr}
 800858c:	ec51 0b10 	vmov	r0, r1, d0
 8008590:	b183      	cbz	r3, 80085b4 <xflow+0x2c>
 8008592:	4602      	mov	r2, r0
 8008594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008598:	e9cd 2300 	strd	r2, r3, [sp]
 800859c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085a0:	f7f8 f83a 	bl	8000618 <__aeabi_dmul>
 80085a4:	ec41 0b10 	vmov	d0, r0, r1
 80085a8:	2022      	movs	r0, #34	@ 0x22
 80085aa:	b003      	add	sp, #12
 80085ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80085b0:	f7ff bfd8 	b.w	8008564 <with_errno>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	e7ee      	b.n	8008598 <xflow+0x10>
 80085ba:	0000      	movs	r0, r0
 80085bc:	0000      	movs	r0, r0
	...

080085c0 <__math_uflow>:
 80085c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085c8 <__math_uflow+0x8>
 80085c4:	f7ff bfe0 	b.w	8008588 <xflow>
 80085c8:	00000000 	.word	0x00000000
 80085cc:	10000000 	.word	0x10000000

080085d0 <__math_oflow>:
 80085d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085d8 <__math_oflow+0x8>
 80085d4:	f7ff bfd8 	b.w	8008588 <xflow>
 80085d8:	00000000 	.word	0x00000000
 80085dc:	70000000 	.word	0x70000000

080085e0 <__ieee754_sqrt>:
 80085e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	4a68      	ldr	r2, [pc, #416]	@ (8008788 <__ieee754_sqrt+0x1a8>)
 80085e6:	ec55 4b10 	vmov	r4, r5, d0
 80085ea:	43aa      	bics	r2, r5
 80085ec:	462b      	mov	r3, r5
 80085ee:	4621      	mov	r1, r4
 80085f0:	d110      	bne.n	8008614 <__ieee754_sqrt+0x34>
 80085f2:	4622      	mov	r2, r4
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f8 f80e 	bl	8000618 <__aeabi_dmul>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4620      	mov	r0, r4
 8008602:	4629      	mov	r1, r5
 8008604:	f7f7 fe52 	bl	80002ac <__adddf3>
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	ec45 4b10 	vmov	d0, r4, r5
 8008610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	2d00      	cmp	r5, #0
 8008616:	dc0e      	bgt.n	8008636 <__ieee754_sqrt+0x56>
 8008618:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800861c:	4322      	orrs	r2, r4
 800861e:	d0f5      	beq.n	800860c <__ieee754_sqrt+0x2c>
 8008620:	b19d      	cbz	r5, 800864a <__ieee754_sqrt+0x6a>
 8008622:	4622      	mov	r2, r4
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f7 fe3e 	bl	80002a8 <__aeabi_dsub>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	f7f8 f91c 	bl	800086c <__aeabi_ddiv>
 8008634:	e7e8      	b.n	8008608 <__ieee754_sqrt+0x28>
 8008636:	152a      	asrs	r2, r5, #20
 8008638:	d115      	bne.n	8008666 <__ieee754_sqrt+0x86>
 800863a:	2000      	movs	r0, #0
 800863c:	e009      	b.n	8008652 <__ieee754_sqrt+0x72>
 800863e:	0acb      	lsrs	r3, r1, #11
 8008640:	3a15      	subs	r2, #21
 8008642:	0549      	lsls	r1, r1, #21
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0fa      	beq.n	800863e <__ieee754_sqrt+0x5e>
 8008648:	e7f7      	b.n	800863a <__ieee754_sqrt+0x5a>
 800864a:	462a      	mov	r2, r5
 800864c:	e7fa      	b.n	8008644 <__ieee754_sqrt+0x64>
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	3001      	adds	r0, #1
 8008652:	02dc      	lsls	r4, r3, #11
 8008654:	d5fb      	bpl.n	800864e <__ieee754_sqrt+0x6e>
 8008656:	1e44      	subs	r4, r0, #1
 8008658:	1b12      	subs	r2, r2, r4
 800865a:	f1c0 0420 	rsb	r4, r0, #32
 800865e:	fa21 f404 	lsr.w	r4, r1, r4
 8008662:	4323      	orrs	r3, r4
 8008664:	4081      	lsls	r1, r0
 8008666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800866a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800866e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008672:	07d2      	lsls	r2, r2, #31
 8008674:	bf5c      	itt	pl
 8008676:	005b      	lslpl	r3, r3, #1
 8008678:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800867c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008680:	bf58      	it	pl
 8008682:	0049      	lslpl	r1, r1, #1
 8008684:	2600      	movs	r6, #0
 8008686:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800868a:	106d      	asrs	r5, r5, #1
 800868c:	0049      	lsls	r1, r1, #1
 800868e:	2016      	movs	r0, #22
 8008690:	4632      	mov	r2, r6
 8008692:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008696:	1917      	adds	r7, r2, r4
 8008698:	429f      	cmp	r7, r3
 800869a:	bfde      	ittt	le
 800869c:	193a      	addle	r2, r7, r4
 800869e:	1bdb      	suble	r3, r3, r7
 80086a0:	1936      	addle	r6, r6, r4
 80086a2:	0fcf      	lsrs	r7, r1, #31
 80086a4:	3801      	subs	r0, #1
 80086a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80086aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80086ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80086b2:	d1f0      	bne.n	8008696 <__ieee754_sqrt+0xb6>
 80086b4:	4604      	mov	r4, r0
 80086b6:	2720      	movs	r7, #32
 80086b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80086bc:	429a      	cmp	r2, r3
 80086be:	eb00 0e0c 	add.w	lr, r0, ip
 80086c2:	db02      	blt.n	80086ca <__ieee754_sqrt+0xea>
 80086c4:	d113      	bne.n	80086ee <__ieee754_sqrt+0x10e>
 80086c6:	458e      	cmp	lr, r1
 80086c8:	d811      	bhi.n	80086ee <__ieee754_sqrt+0x10e>
 80086ca:	f1be 0f00 	cmp.w	lr, #0
 80086ce:	eb0e 000c 	add.w	r0, lr, ip
 80086d2:	da42      	bge.n	800875a <__ieee754_sqrt+0x17a>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	db40      	blt.n	800875a <__ieee754_sqrt+0x17a>
 80086d8:	f102 0801 	add.w	r8, r2, #1
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	458e      	cmp	lr, r1
 80086e0:	bf88      	it	hi
 80086e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80086e6:	eba1 010e 	sub.w	r1, r1, lr
 80086ea:	4464      	add	r4, ip
 80086ec:	4642      	mov	r2, r8
 80086ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80086f2:	3f01      	subs	r7, #1
 80086f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80086f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80086fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008700:	d1dc      	bne.n	80086bc <__ieee754_sqrt+0xdc>
 8008702:	4319      	orrs	r1, r3
 8008704:	d01b      	beq.n	800873e <__ieee754_sqrt+0x15e>
 8008706:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800878c <__ieee754_sqrt+0x1ac>
 800870a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008790 <__ieee754_sqrt+0x1b0>
 800870e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008712:	e9db 2300 	ldrd	r2, r3, [fp]
 8008716:	f7f7 fdc7 	bl	80002a8 <__aeabi_dsub>
 800871a:	e9da 8900 	ldrd	r8, r9, [sl]
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	f7f8 f9f3 	bl	8000b10 <__aeabi_dcmple>
 800872a:	b140      	cbz	r0, 800873e <__ieee754_sqrt+0x15e>
 800872c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008730:	e9da 0100 	ldrd	r0, r1, [sl]
 8008734:	e9db 2300 	ldrd	r2, r3, [fp]
 8008738:	d111      	bne.n	800875e <__ieee754_sqrt+0x17e>
 800873a:	3601      	adds	r6, #1
 800873c:	463c      	mov	r4, r7
 800873e:	1072      	asrs	r2, r6, #1
 8008740:	0863      	lsrs	r3, r4, #1
 8008742:	07f1      	lsls	r1, r6, #31
 8008744:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008748:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800874c:	bf48      	it	mi
 800874e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008752:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008756:	4618      	mov	r0, r3
 8008758:	e756      	b.n	8008608 <__ieee754_sqrt+0x28>
 800875a:	4690      	mov	r8, r2
 800875c:	e7be      	b.n	80086dc <__ieee754_sqrt+0xfc>
 800875e:	f7f7 fda5 	bl	80002ac <__adddf3>
 8008762:	e9da 8900 	ldrd	r8, r9, [sl]
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f8 f9c5 	bl	8000afc <__aeabi_dcmplt>
 8008772:	b120      	cbz	r0, 800877e <__ieee754_sqrt+0x19e>
 8008774:	1ca0      	adds	r0, r4, #2
 8008776:	bf08      	it	eq
 8008778:	3601      	addeq	r6, #1
 800877a:	3402      	adds	r4, #2
 800877c:	e7df      	b.n	800873e <__ieee754_sqrt+0x15e>
 800877e:	1c63      	adds	r3, r4, #1
 8008780:	f023 0401 	bic.w	r4, r3, #1
 8008784:	e7db      	b.n	800873e <__ieee754_sqrt+0x15e>
 8008786:	bf00      	nop
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	20000148 	.word	0x20000148
 8008790:	20000140 	.word	0x20000140

08008794 <_init>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr

080087a0 <_fini>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr
