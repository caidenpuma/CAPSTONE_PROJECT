
soilsense_breadboard_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008868  08008868  00009868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab8  08008ab8  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac0  08008ac0  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac0  08008ac0  00009ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08008ac8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000150  08008c18  0000a150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08008c18  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016697  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003676  00000000  00000000  00020817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00023e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a647  00000000  00000000  00026308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a49f  00000000  00000000  0004094f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3688  00000000  00000000  0005adee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  000fe4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00104464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800884c 	.word	0x0800884c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800884c 	.word	0x0800884c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <adc_channel_conv>:
 * Parameters:
 * - chan: channel number
 * - adc: initialized ADC
 * Returns: raw ADC reading from selected channel (0-4)
 */
uint16_t adc_channel_conv(uint8_t chan, ADC_HandleTypeDef adc){
 8000f48:	b084      	sub	sp, #16
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4604      	mov	r4, r0
 8000f52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_raw;
	ADC_CH_Cfg.Rank =  1;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <adc_channel_conv+0x70>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
	ADC_CH_Cfg.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <adc_channel_conv+0x70>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	ADC_CH_Cfg.Channel = ADC_Channels[chan];        // select ADC channel
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <adc_channel_conv+0x74>)
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	4a11      	ldr	r2, [pc, #68]	@ (8000fb8 <adc_channel_conv+0x70>)
 8000f74:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&adc, &ADC_CH_Cfg);   	// configure selected channel
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	490f      	ldr	r1, [pc, #60]	@ (8000fb8 <adc_channel_conv+0x70>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fd7b 	bl	8003a78 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&adc);                        	// start ADC conversion
 8000f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fc2a 	bl	80037e0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adc, 1);         	// poll ADC channel with 1ms timeout
 8000f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f90:	2101      	movs	r1, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fcd8 	bl	8003948 <HAL_ADC_PollForConversion>
	adc_raw = HAL_ADC_GetValue(&adc);
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fd5e 	bl	8003a5e <HAL_ADC_GetValue>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	81fb      	strh	r3, [r7, #14]
	return adc_raw;
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000016c 	.word	0x2000016c
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <DWT_Delay_Init>:
/**
  * @brief Initialize DWT for precise delay
  * @retval 0 if successful, 1 otherwise
  */
uint32_t DWT_Delay_Init(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // Disable TRC
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <DWT_Delay_Init+0x58>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <DWT_Delay_Init+0x58>)
 8000fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000fce:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // Enable TRC
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <DWT_Delay_Init+0x58>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <DWT_Delay_Init+0x58>)
 8000fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fda:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; // Disable clock cycle counter
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <DWT_Delay_Init+0x5c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <DWT_Delay_Init+0x5c>)
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; // Enable clock cycle counter
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <DWT_Delay_Init+0x5c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <DWT_Delay_Init+0x5c>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0; // Reset the clock cycle counter value
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <DWT_Delay_Init+0x5c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]

  __ASM volatile ("NOP");
 8000ffa:	bf00      	nop
  __ASM volatile ("NOP");
 8000ffc:	bf00      	nop
  __ASM volatile ("NOP");
 8000ffe:	bf00      	nop

  return DWT->CYCCNT ? 0 : 1; // Check if clock cycle counter started
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <DWT_Delay_Init+0x5c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000edf0 	.word	0xe000edf0
 800101c:	e0001000 	.word	0xe0001000

08001020 <delay>:
/**
  * @brief Microsecond delay using DWT
  * @param microseconds: Number of microseconds to delay
  */
__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <delay+0x40>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800102e:	f004 feb3 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8001032:	4603      	mov	r3, r0
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <delay+0x44>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001044:	bf00      	nop
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <delay+0x40>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad2      	subs	r2, r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3f8      	bcc.n	8001046 <delay+0x26>
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e0001000 	.word	0xe0001000
 8001064:	431bde83 	.word	0x431bde83

08001068 <Set_Pin_Output>:

/**
  * @brief Set GPIO pin as output
  */
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f003 f81e 	bl	80040d8 <HAL_GPIO_Init>
}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <Set_Pin_Input>:

/**
  * @brief Set GPIO pin as input
  */
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f003 f800 	bl	80040d8 <HAL_GPIO_Init>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <DHT_Start>:

/**
  * @brief Start signal for DHT sensor
  */
void DHT_Start(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010e4:	f7ff ff6c 	bl	8000fc0 <DWT_Delay_Init>
	Set_Pin_Output(DHT_PORT, DHT_PIN);  // Set pin as output
 80010e8:	2140      	movs	r1, #64	@ 0x40
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <DHT_Start+0x40>)
 80010ec:	f7ff ffbc 	bl	8001068 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 0);   // Pull pin low
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	@ 0x40
 80010f4:	480a      	ldr	r0, [pc, #40]	@ (8001120 <DHT_Start+0x40>)
 80010f6:	f003 f98b 	bl	8004410 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay(18000);   // Wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay(1200);  // >1ms delay
 80010fa:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80010fe:	f7ff ff8f 	bl	8001020 <delay>
#endif

    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 1);   // Pull pin high
 8001102:	2201      	movs	r2, #1
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	4806      	ldr	r0, [pc, #24]	@ (8001120 <DHT_Start+0x40>)
 8001108:	f003 f982 	bl	8004410 <HAL_GPIO_WritePin>
    delay(20);   // Wait for 20 us
 800110c:	2014      	movs	r0, #20
 800110e:	f7ff ff87 	bl	8001020 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // Set pin as input
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <DHT_Start+0x40>)
 8001116:	f7ff ffc5 	bl	80010a4 <Set_Pin_Input>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020000 	.word	0x40020000

08001124 <DHT_Read>:
/**
  * @brief Read data from DHT sensor
  * @retval 8-bit data read from sensor
  */
uint8_t DHT_Read(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
 800112e:	e037      	b.n	80011a0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));   // Wait for pin to go high
 8001130:	bf00      	nop
 8001132:	2140      	movs	r1, #64	@ 0x40
 8001134:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <DHT_Read+0x8c>)
 8001136:	f003 f953 	bl	80043e0 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f8      	beq.n	8001132 <DHT_Read+0xe>
		delay(40);   // Wait for 40 us
 8001140:	2028      	movs	r0, #40	@ 0x28
 8001142:	f7ff ff6d 	bl	8001020 <delay>
		if (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))   // If pin is low
 8001146:	2140      	movs	r1, #64	@ 0x40
 8001148:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <DHT_Read+0x8c>)
 800114a:	f003 f949 	bl	80043e0 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10e      	bne.n	8001172 <DHT_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // Write 0
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2201      	movs	r2, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	b25a      	sxtb	r2, r3
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	4013      	ands	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e00b      	b.n	800118a <DHT_Read+0x66>
		}
		else i |= (1 << (7 - j));  // If pin is high, write 1
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	f1c3 0307 	rsb	r3, r3, #7
 8001178:	2201      	movs	r2, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	b25a      	sxtb	r2, r3
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4313      	orrs	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)));  // Wait for pin to go low
 800118a:	bf00      	nop
 800118c:	2140      	movs	r1, #64	@ 0x40
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <DHT_Read+0x8c>)
 8001190:	f003 f926 	bl	80043e0 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f8      	bne.n	800118c <DHT_Read+0x68>
	for (j = 0; j < 8; j++)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	3301      	adds	r3, #1
 800119e:	71bb      	strb	r3, [r7, #6]
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d9c4      	bls.n	8001130 <DHT_Read+0xc>
	}
	return i;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020000 	.word	0x40020000

080011b4 <DHT_GetData>:
/**
  * @brief Get temperature and humidity data from DHT sensor
  * @param DHT_Data: Pointer to DHT_DataTypedef structure to store temperature and humidity
  */
void DHT_GetData(DHT_DataTypedef *DHT_Data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    DHT_Start();
 80011bc:	f7ff ff90 	bl	80010e0 <DHT_Start>
	//uint8_t Presence = DHT_Check_Response();
	uint8_t Rh_byte1 = DHT_Read();
 80011c0:	f7ff ffb0 	bl	8001124 <DHT_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
	uint8_t Rh_byte2 = DHT_Read();
 80011c8:	f7ff ffac 	bl	8001124 <DHT_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp_byte1 = DHT_Read();
 80011d0:	f7ff ffa8 	bl	8001124 <DHT_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_byte2 = DHT_Read();
 80011d8:	f7ff ffa4 	bl	8001124 <DHT_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	733b      	strb	r3, [r7, #12]
	uint8_t SUM = DHT_Read();
 80011e0:	f7ff ffa0 	bl	8001124 <DHT_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	72fb      	strb	r3, [r7, #11]

	if (SUM == ((Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2) & 0x00FF))
 80011e8:	7afa      	ldrb	r2, [r7, #11]
 80011ea:	7bf9      	ldrb	r1, [r7, #15]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	4419      	add	r1, r3
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	4419      	add	r1, r3
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	440b      	add	r3, r1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d129      	bne.n	8001252 <DHT_GetData+0x9e>
			DHT_Data->Temperature = (float)Temp_byte1;
			DHT_Data->Humidity = (float)Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1 << 8) | Temp_byte2) / 10.0;
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f99c 	bl	8000544 <__aeabi_i2d>
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <DHT_GetData+0xa8>)
 8001212:	f7ff fb2b 	bl	800086c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fccb 	bl	8000bb8 <__aeabi_d2f>
 8001222:	4602      	mov	r2, r0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = ((Rh_byte1 << 8) | Rh_byte2) / 10.0;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	021a      	lsls	r2, r3, #8
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	4313      	orrs	r3, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <DHT_GetData+0xa8>)
 800123c:	f7ff fb16 	bl	800086c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcb6 	bl	8000bb8 <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
		#endif
	}
	//return Temp_byte2;
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40240000 	.word	0x40240000

08001260 <convert_to_lux>:
 * Parameters:
 * - veml_raw: raw output of VEML7700 I2C read
 * Returns: lux value corresponding to input
 * Note: correction formula output doesn't match what is in datasheet but does match exactly with calculator
 */
static uint32_t convert_to_lux(uint16_t veml_raw){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	uint32_t lux;
	// for ALS gain = 1/4 and integration time = 100ms
	lux = veml_raw * 0.2688;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f969 	bl	8000544 <__aeabi_i2d>
 8001272:	a34b      	add	r3, pc, #300	@ (adr r3, 80013a0 <convert_to_lux+0x140>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f9ce 	bl	8000618 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc78 	bl	8000b78 <__aeabi_d2uiz>
 8001288:	4603      	mov	r3, r0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(lux>1000){ // correction formula
 800128c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001292:	d973      	bls.n	800137c <convert_to_lux+0x11c>
		double lux_a = pow(6.0135,-13);
 8001294:	a344      	add	r3, pc, #272	@ (adr r3, 80013a8 <convert_to_lux+0x148>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double lux_b = pow(-9.3924,-9);
 800129e:	a344      	add	r3, pc, #272	@ (adr r3, 80013b0 <convert_to_lux+0x150>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double lux_c = pow(8.1488,-5);
 80012a8:	a343      	add	r3, pc, #268	@ (adr r3, 80013b8 <convert_to_lux+0x158>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double lux_d = 1.0023;
 80012b2:	a343      	add	r3, pc, #268	@ (adr r3, 80013c0 <convert_to_lux+0x160>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		lux = lux_a*pow((double)lux,4) + lux_b*pow((double)lux,3) + lux_c*pow((double)lux,2) + lux_d*lux;
 80012bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012be:	f7ff f931 	bl	8000524 <__aeabi_ui2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001388 <convert_to_lux+0x128>
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f006 fb5d 	bl	800798c <pow>
 80012d2:	ec51 0b10 	vmov	r0, r1, d0
 80012d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012da:	f7ff f99d 	bl	8000618 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012e8:	f7ff f91c 	bl	8000524 <__aeabi_ui2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001390 <convert_to_lux+0x130>
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f006 fb48 	bl	800798c <pow>
 80012fc:	ec51 0b10 	vmov	r0, r1, d0
 8001300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001304:	f7ff f988 	bl	8000618 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffcc 	bl	80002ac <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800131e:	f7ff f901 	bl	8000524 <__aeabi_ui2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001398 <convert_to_lux+0x138>
 800132a:	ec43 2b10 	vmov	d0, r2, r3
 800132e:	f006 fb2d 	bl	800798c <pow>
 8001332:	ec51 0b10 	vmov	r0, r1, d0
 8001336:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800133a:	f7ff f96d 	bl	8000618 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffb1 	bl	80002ac <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4614      	mov	r4, r2
 8001350:	461d      	mov	r5, r3
 8001352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001354:	f7ff f8e6 	bl	8000524 <__aeabi_ui2d>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	f7ff f95c 	bl	8000618 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7fe ffa0 	bl	80002ac <__adddf3>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc00 	bl	8000b78 <__aeabi_d2uiz>
 8001378:	4603      	mov	r3, r0
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	return lux;
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800137e:	4618      	mov	r0, r3
 8001380:	3730      	adds	r7, #48	@ 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bdb0      	pop	{r4, r5, r7, pc}
 8001386:	bf00      	nop
 8001388:	00000000 	.word	0x00000000
 800138c:	40100000 	.word	0x40100000
 8001390:	00000000 	.word	0x00000000
 8001394:	40080000 	.word	0x40080000
 8001398:	00000000 	.word	0x00000000
 800139c:	40000000 	.word	0x40000000
 80013a0:	ea4a8c15 	.word	0xea4a8c15
 80013a4:	3fd13404 	.word	0x3fd13404
 80013a8:	b2f699ff 	.word	0xb2f699ff
 80013ac:	3dd470af 	.word	0x3dd470af
 80013b0:	2af63239 	.word	0x2af63239
 80013b4:	be1e339f 	.word	0xbe1e339f
 80013b8:	80fe91e8 	.word	0x80fe91e8
 80013bc:	3efd2ee0 	.word	0x3efd2ee0
 80013c0:	b98c7e28 	.word	0xb98c7e28
 80013c4:	3ff0096b 	.word	0x3ff0096b

080013c8 <light_i2c_read>:
/* Reads values of light sensor
 * Parameters:
 * - veml: pointer to initialized veml
 * Returns: raw ADC reading
 */
static uint16_t light_i2c_read(veml7700 *veml){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint16_t als_raw;
	veml7700_power_on(veml);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f002 f8c2 	bl	800355a <veml7700_power_on>
	// according to datasheet should need delay of 2.5 ms after wakeup
	HAL_Delay(115); // experimentally: doesn't work at 112, does work at 115
 80013d6:	2073      	movs	r0, #115	@ 0x73
 80013d8:	f002 f99a 	bl	8003710 <HAL_Delay>
	als_raw = veml7700_read_als(veml);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f002 f8ee 	bl	80035be <veml7700_read_als>
 80013e2:	4603      	mov	r3, r0
 80013e4:	81fb      	strh	r3, [r7, #14]
	// turn off to save power
	veml7700_shutdown(veml);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f002 f8d0 	bl	800358c <veml7700_shutdown>
	return als_raw;
 80013ec:	89fb      	ldrh	r3, [r7, #14]

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <light_level_to_lux_high>:
/* Takes light level category of plant and outputs high end of light range
 * Parameters:
 * - light_level: light level parameter of user's selected plant
 * Returns: int corresponding to upper bound of acceptable lux range
 */
static uint32_t light_level_to_lux_high(uint8_t light_level){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
    switch(light_level) {
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	3b01      	subs	r3, #1
 8001406:	2b03      	cmp	r3, #3
 8001408:	d815      	bhi.n	8001436 <light_level_to_lux_high+0x3e>
 800140a:	a201      	add	r2, pc, #4	@ (adr r2, 8001410 <light_level_to_lux_high+0x18>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001421 	.word	0x08001421
 8001414:	08001427 	.word	0x08001427
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001433 	.word	0x08001433
        case 1:
            return 1076; // low light
 8001420:	f240 4334 	movw	r3, #1076	@ 0x434
 8001424:	e008      	b.n	8001438 <light_level_to_lux_high+0x40>
            break;
        case 2:
            return 5382; // medium light
 8001426:	f241 5306 	movw	r3, #5382	@ 0x1506
 800142a:	e005      	b.n	8001438 <light_level_to_lux_high+0x40>
            break;
        case 3:
            return 10764; // bright indirect light
 800142c:	f642 230c 	movw	r3, #10764	@ 0x2a0c
 8001430:	e002      	b.n	8001438 <light_level_to_lux_high+0x40>
            break;
        case 4:
            return 99999; // direct light
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <light_level_to_lux_high+0x4c>)
 8001434:	e000      	b.n	8001438 <light_level_to_lux_high+0x40>
            break;
        default:
        	return 0;
 8001436:	2300      	movs	r3, #0
        	break;
    }
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	0001869f 	.word	0x0001869f

08001448 <light_level_to_lux_low>:
/* Takes light level category of plant and outputs low end of light range
 * Parameters:
 * - light_level: light level parameter of user's selected plant
 * Returns: int corresponding to lower bound of acceptable lux range
 */
static uint32_t light_level_to_lux_low(uint8_t light_level){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    switch(light_level) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3b01      	subs	r3, #1
 8001456:	2b03      	cmp	r3, #3
 8001458:	d816      	bhi.n	8001488 <light_level_to_lux_low+0x40>
 800145a:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <light_level_to_lux_low+0x18>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001471 	.word	0x08001471
 8001464:	08001477 	.word	0x08001477
 8001468:	0800147d 	.word	0x0800147d
 800146c:	08001483 	.word	0x08001483
        case 1:
            return 270; // low light
 8001470:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8001474:	e009      	b.n	800148a <light_level_to_lux_low+0x42>
            break;
        case 2:
            return 1076; // medium light
 8001476:	f240 4334 	movw	r3, #1076	@ 0x434
 800147a:	e006      	b.n	800148a <light_level_to_lux_low+0x42>
            break;
        case 3:
            return 5382; // bright indirect light
 800147c:	f241 5306 	movw	r3, #5382	@ 0x1506
 8001480:	e003      	b.n	800148a <light_level_to_lux_low+0x42>
            break;
        case 4:
            return 10750; // direct light
 8001482:	f642 13fe 	movw	r3, #10750	@ 0x29fe
 8001486:	e000      	b.n	800148a <light_level_to_lux_low+0x42>
            break;
        default:
        	return 0;
 8001488:	2300      	movs	r3, #0
        	break;
    }
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <average_optimal_light_ints>:
}

/* Calculates average max light intensity in optimal light range
 * Returns: average max light intensity in optimal light range over last 3 days, in lux
 */
static uint32_t average_optimal_light_ints(){
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
	uint32_t sum, avg;
	sum = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<3; i++){
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	e009      	b.n	80014bc <average_optimal_light_ints+0x24>
        sum += daily_max_ints[i];
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <average_optimal_light_ints+0x44>)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<3; i++){
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	ddf2      	ble.n	80014a8 <average_optimal_light_ints+0x10>
    }
    avg = sum/3;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <average_optimal_light_ints+0x48>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	607b      	str	r3, [r7, #4]
    return avg;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200003bc 	.word	0x200003bc
 80014e0:	aaaaaaab 	.word	0xaaaaaaab

080014e4 <get_light_value>:

/* Takes 3 readings of light meter 2 seconds apart and averages them to get value
 * Stores values in array light_int_24_hrs
 */
void get_light_value(veml7700 *veml){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    uint32_t sum, avg, lux;
    uint16_t reading;
    sum = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<3; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e014      	b.n	8001520 <get_light_value+0x3c>
        reading = light_i2c_read(veml);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff66 	bl	80013c8 <light_i2c_read>
 80014fc:	4603      	mov	r3, r0
 80014fe:	827b      	strh	r3, [r7, #18]
        lux = convert_to_lux(reading);
 8001500:	8a7b      	ldrh	r3, [r7, #18]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff feac 	bl	8001260 <convert_to_lux>
 8001508:	60f8      	str	r0, [r7, #12]
        sum += lux;
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]
        HAL_Delay(2000);
 8001512:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001516:	f002 f8fb 	bl	8003710 <HAL_Delay>
    for(int i=0; i<3; i++) {
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	3301      	adds	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b02      	cmp	r3, #2
 8001524:	dde7      	ble.n	80014f6 <get_light_value+0x12>
    }
    avg = sum/3;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <get_light_value+0x64>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    light_int_24_hrs[light_24h_counter] = avg;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <get_light_value+0x68>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4906      	ldr	r1, [pc, #24]	@ (8001550 <get_light_value+0x6c>)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	aaaaaaab 	.word	0xaaaaaaab
 800154c:	200003c8 	.word	0x200003c8
 8001550:	2000017c 	.word	0x2000017c

08001554 <check_light_intensity>:
    }
}

/* Check if 3-day average light intensity in acceptable range
 */
void check_light_intensity(){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	uint32_t max_ok_light, min_ok_light, avg_intensity;
	max_ok_light = light_level_to_lux_high(user_selected_plant.light_level);
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <check_light_intensity+0x60>)
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff4a 	bl	80013f8 <light_level_to_lux_high>
 8001564:	60f8      	str	r0, [r7, #12]
	min_ok_light = light_level_to_lux_low(user_selected_plant.light_level);
 8001566:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <check_light_intensity+0x60>)
 8001568:	7d1b      	ldrb	r3, [r3, #20]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff6c 	bl	8001448 <light_level_to_lux_low>
 8001570:	60b8      	str	r0, [r7, #8]
	avg_intensity = average_optimal_light_ints();
 8001572:	f7ff ff91 	bl	8001498 <average_optimal_light_ints>
 8001576:	6078      	str	r0, [r7, #4]
    if (avg_intensity>max_ok_light){ // too bright
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d904      	bls.n	800158a <check_light_intensity+0x36>
        update_alert(3,1);
 8001580:	2101      	movs	r1, #1
 8001582:	2003      	movs	r0, #3
 8001584:	f001 fe9e 	bl	80032c4 <update_alert>
 8001588:	e003      	b.n	8001592 <check_light_intensity+0x3e>
    } else {
    	update_alert(3,0);
 800158a:	2100      	movs	r1, #0
 800158c:	2003      	movs	r0, #3
 800158e:	f001 fe99 	bl	80032c4 <update_alert>
    }
    if (avg_intensity<min_ok_light){ // too dark
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	429a      	cmp	r2, r3
 8001598:	d204      	bcs.n	80015a4 <check_light_intensity+0x50>
        update_alert(2,1);
 800159a:	2101      	movs	r1, #1
 800159c:	2002      	movs	r0, #2
 800159e:	f001 fe91 	bl	80032c4 <update_alert>
    }
    else {
        update_alert(2,0);
    }
}
 80015a2:	e003      	b.n	80015ac <check_light_intensity+0x58>
        update_alert(2,0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2002      	movs	r0, #2
 80015a8:	f001 fe8c 	bl	80032c4 <update_alert>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000080 	.word	0x20000080

080015b8 <HD44780_Init>:
uint8_t special3[8] = {
    0b00100, 0b01110, 0b10101, 0b00000,
    0b00000, 0b00000, 0b00000, 0b00000
};

void HD44780_Init(uint8_t rows) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80015c2:	4a3a      	ldr	r2, [pc, #232]	@ (80016ac <HD44780_Init+0xf4>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	7013      	strb	r3, [r2, #0]
  dpBacklight = LCD_BACKLIGHT;
 80015c8:	4b39      	ldr	r3, [pc, #228]	@ (80016b0 <HD44780_Init+0xf8>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	701a      	strb	r2, [r3, #0]
  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HD44780_Init+0xfc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80015d4:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <HD44780_Init+0xf4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d907      	bls.n	80015ec <HD44780_Init+0x34>
    dpFunction |= LCD_2LINE;
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <HD44780_Init+0xfc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HD44780_Init+0xfc>)
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e006      	b.n	80015fa <HD44780_Init+0x42>
  else
    dpFunction |= LCD_5x10DOTS;
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HD44780_Init+0xfc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HD44780_Init+0xfc>)
 80015f8:	701a      	strb	r2, [r3, #0]

  DelayInit();
 80015fa:	f000 f9a3 	bl	8001944 <DelayInit>
  HAL_Delay(50);
 80015fe:	2032      	movs	r0, #50	@ 0x32
 8001600:	f002 f886 	bl	8003710 <HAL_Delay>
  ExpanderWrite(dpBacklight);
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HD44780_Init+0xf8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f961 	bl	80018d0 <ExpanderWrite>
  HAL_Delay(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f002 f87d 	bl	8003710 <HAL_Delay>

  Write4Bits(0x03 << 4); DelayUS(4500);
 8001616:	2030      	movs	r0, #48	@ 0x30
 8001618:	f000 f949 	bl	80018ae <Write4Bits>
 800161c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001620:	f000 f9ae 	bl	8001980 <DelayUS>
  Write4Bits(0x03 << 4); DelayUS(4500);
 8001624:	2030      	movs	r0, #48	@ 0x30
 8001626:	f000 f942 	bl	80018ae <Write4Bits>
 800162a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800162e:	f000 f9a7 	bl	8001980 <DelayUS>
  Write4Bits(0x03 << 4); DelayUS(4500);
 8001632:	2030      	movs	r0, #48	@ 0x30
 8001634:	f000 f93b 	bl	80018ae <Write4Bits>
 8001638:	f241 1094 	movw	r0, #4500	@ 0x1194
 800163c:	f000 f9a0 	bl	8001980 <DelayUS>
  Write4Bits(0x02 << 4); DelayUS(100);
 8001640:	2020      	movs	r0, #32
 8001642:	f000 f934 	bl	80018ae <Write4Bits>
 8001646:	2064      	movs	r0, #100	@ 0x64
 8001648:	f000 f99a 	bl	8001980 <DelayUS>

  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HD44780_Init+0xfc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f8ec 	bl	8001834 <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <HD44780_Init+0x100>)
 800165e:	2204      	movs	r2, #4
 8001660:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001662:	f000 f87b 	bl	800175c <HD44780_Display>
  HD44780_Clear();
 8001666:	f000 f831 	bl	80016cc <HD44780_Clear>

  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HD44780_Init+0x104>)
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HD44780_Init+0x104>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f8da 	bl	8001834 <SendCommand>
  DelayUS(4500);
 8001680:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001684:	f000 f97c 	bl	8001980 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001688:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <HD44780_Init+0x108>)
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f87c 	bl	8001788 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <HD44780_Init+0x10c>)
 8001692:	2001      	movs	r0, #1
 8001694:	f000 f878 	bl	8001788 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, special3);
 8001698:	490b      	ldr	r1, [pc, #44]	@ (80016c8 <HD44780_Init+0x110>)
 800169a:	2002      	movs	r0, #2
 800169c:	f000 f874 	bl	8001788 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80016a0:	f000 f81f 	bl	80016e2 <HD44780_Home>

}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200003cf 	.word	0x200003cf
 80016b0:	200003d0 	.word	0x200003d0
 80016b4:	200003cc 	.word	0x200003cc
 80016b8:	200003cd 	.word	0x200003cd
 80016bc:	200003ce 	.word	0x200003ce
 80016c0:	20000014 	.word	0x20000014
 80016c4:	2000001c 	.word	0x2000001c
 80016c8:	20000024 	.word	0x20000024

080016cc <HD44780_Clear>:

void HD44780_Clear() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 f8af 	bl	8001834 <SendCommand>
  DelayUS(2000);
 80016d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016da:	f000 f951 	bl	8001980 <DelayUS>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HD44780_Home>:

void HD44780_Home() {
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80016e6:	2002      	movs	r0, #2
 80016e8:	f000 f8a4 	bl	8001834 <SendCommand>
  DelayUS(2000);
 80016ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016f0:	f000 f946 	bl	8001980 <DelayUS>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HD44780_SetCursor+0x5c>)
 800170a:	f107 0408 	add.w	r4, r7, #8
 800170e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows) row = dpRows - 1;
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HD44780_SetCursor+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	79ba      	ldrb	r2, [r7, #6]
 800171a:	429a      	cmp	r2, r3
 800171c:	d303      	bcc.n	8001726 <HD44780_SetCursor+0x2e>
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HD44780_SetCursor+0x60>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	71bb      	strb	r3, [r7, #6]
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	3318      	adds	r3, #24
 800172c:	443b      	add	r3, r7
 800172e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b25b      	sxtb	r3, r3
 800173c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001740:	b25b      	sxtb	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f875 	bl	8001834 <SendCommand>
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	08008868 	.word	0x08008868
 8001758:	200003cf 	.word	0x200003cf

0800175c <HD44780_Display>:

void HD44780_Display()         { dpControl |= LCD_DISPLAYON; SendCommand(LCD_DISPLAYCONTROL | dpControl); }
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HD44780_Display+0x28>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HD44780_Display+0x28>)
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HD44780_Display+0x28>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f85b 	bl	8001834 <SendCommand>
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003cd 	.word	0x200003cd

08001788 <HD44780_CreateSpecialChar>:
void HD44780_LeftToRight()     { dpMode |= LCD_ENTRYLEFT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_RightToLeft()     { dpMode &= ~LCD_ENTRYLEFT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_AutoScroll()      { dpMode |= LCD_ENTRYSHIFTINCREMENT; SendCommand(LCD_ENTRYMODESET | dpMode); }
void HD44780_NoAutoScroll()    { dpMode &= ~LCD_ENTRYSHIFTINCREMENT; SendCommand(LCD_ENTRYMODESET | dpMode); }

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f842 	bl	8001834 <SendCommand>
  for (int i = 0; i < 8; i++) SendChar(charmap[i]);
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e009      	b.n	80017ca <HD44780_CreateSpecialChar+0x42>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f846 	bl	8001850 <SendChar>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	ddf2      	ble.n	80017b6 <HD44780_CreateSpecialChar+0x2e>
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  while (*c) SendChar(*c++);
 80017e2:	e006      	b.n	80017f2 <HD44780_PrintStr+0x18>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f82f 	bl	8001850 <SendChar>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f4      	bne.n	80017e4 <HD44780_PrintStr+0xa>
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HD44780_NoBacklight>:
void HD44780_SetBacklight(uint8_t new_val) {
  if (new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  dpBacklight = LCD_NOBACKLIGHT;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HD44780_NoBacklight+0x14>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f85e 	bl	80018d0 <ExpanderWrite>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200003d0 	.word	0x200003d0

0800181c <HD44780_Backlight>:

void HD44780_Backlight(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  dpBacklight = LCD_BACKLIGHT;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HD44780_Backlight+0x14>)
 8001822:	2208      	movs	r2, #8
 8001824:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f852 	bl	80018d0 <ExpanderWrite>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200003d0 	.word	0x200003d0

08001834 <SendCommand>:

static void SendCommand(uint8_t cmd) { Send(cmd, 0); }
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f812 	bl	800186c <Send>
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <SendChar>:
static void SendChar(uint8_t ch)     { Send(ch, RS); }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f804 	bl	800186c <Send>
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <Send>:
static void Send(uint8_t value, uint8_t mode) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	460a      	mov	r2, r1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f023 030f 	bic.w	r3, r3, #15
 8001882:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value << 4) & 0xF0;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	73bb      	strb	r3, [r7, #14]
  Write4Bits(highnib | mode);
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	4313      	orrs	r3, r2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f80b 	bl	80018ae <Write4Bits>
  Write4Bits(lownib | mode);
 8001898:	7bba      	ldrb	r2, [r7, #14]
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	4313      	orrs	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f804 	bl	80018ae <Write4Bits>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <Write4Bits>:

static void Write4Bits(uint8_t value) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f808 	bl	80018d0 <ExpanderWrite>
  PulseEnable(value);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f820 	bl	8001908 <PulseEnable>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <ExpanderWrite+0x30>)
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80018e6:	f107 020f 	add.w	r2, r7, #15
 80018ea:	230a      	movs	r3, #10
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	214e      	movs	r1, #78	@ 0x4e
 80018f2:	4804      	ldr	r0, [pc, #16]	@ (8001904 <ExpanderWrite+0x34>)
 80018f4:	f002 ff1c 	bl	8004730 <HAL_I2C_Master_Transmit>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200003d0 	.word	0x200003d0
 8001904:	20000444 	.word	0x20000444

08001908 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ffd8 	bl	80018d0 <ExpanderWrite>
  DelayUS(20);
 8001920:	2014      	movs	r0, #20
 8001922:	f000 f82d 	bl	8001980 <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ffce 	bl	80018d0 <ExpanderWrite>
  DelayUS(20);
 8001934:	2014      	movs	r0, #20
 8001936:	f000 f823 	bl	8001980 <DelayUS>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <DelayInit>:

static void DelayInit(void) {
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <DelayInit+0x34>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <DelayInit+0x34>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <DelayInit+0x38>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a08      	ldr	r2, [pc, #32]	@ (800197c <DelayInit+0x38>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <DelayInit+0x38>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  __ASM volatile ("NOP\nNOP\nNOP");
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	bf00      	nop
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000edf0 	.word	0xe000edf0
 800197c:	e0001000 	.word	0xe0001000

08001980 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <DelayUS+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <DelayUS+0x44>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9a      	lsrs	r2, r3, #18
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t start = DWT->CYCCNT;
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <DelayUS+0x48>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60bb      	str	r3, [r7, #8]
  while ((DWT->CYCCNT - start) < cycles);
 80019a2:	bf00      	nop
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <DelayUS+0x48>)
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d8f8      	bhi.n	80019a4 <DelayUS+0x24>
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	200000ac 	.word	0x200000ac
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	e0001000 	.word	0xe0001000

080019cc <update>:

char line1[17] = "";
char line2[17] = "";

int update(const char *string1, const char *string2) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    return strcmp(string1, line1) != 0 || strcmp(string2, line2) != 0;
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <update+0x34>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7fe fc01 	bl	80001e0 <strcmp>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <update+0x26>
 80019e4:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <update+0x38>)
 80019e6:	6838      	ldr	r0, [r7, #0]
 80019e8:	f7fe fbfa 	bl	80001e0 <strcmp>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <update+0x2a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <update+0x2c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200003d4 	.word	0x200003d4
 8001a04:	200003e8 	.word	0x200003e8

08001a08 <display_message_left>:

void display_message_left(const char *string1, const char *string2) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    if (update(string1, string2)) {
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ffd9 	bl	80019cc <update>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01f      	beq.n	8001a60 <display_message_left+0x58>
        HD44780_Clear();
 8001a20:	f7ff fe54 	bl	80016cc <HD44780_Clear>
        HD44780_SetCursor(0, 0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fe66 	bl	80016f8 <HD44780_SetCursor>
        HD44780_PrintStr(string1);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fed4 	bl	80017da <HD44780_PrintStr>
        HD44780_SetCursor(0, 1);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fe5f 	bl	80016f8 <HD44780_SetCursor>
        HD44780_PrintStr(string2);
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f7ff fecd 	bl	80017da <HD44780_PrintStr>
        strncpy(line1, string1, 16); line1[16] = '\0';
 8001a40:	2210      	movs	r2, #16
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <display_message_left+0x60>)
 8001a46:	f005 fb15 	bl	8007074 <strncpy>
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <display_message_left+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	741a      	strb	r2, [r3, #16]
        strncpy(line2, string2, 16); line2[16] = '\0';
 8001a50:	2210      	movs	r2, #16
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <display_message_left+0x64>)
 8001a56:	f005 fb0d 	bl	8007074 <strncpy>
 8001a5a:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <display_message_left+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	741a      	strb	r2, [r3, #16]
    }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200003d4 	.word	0x200003d4
 8001a6c:	200003e8 	.word	0x200003e8

08001a70 <display_off>:
    convert_float_to_string(num1, buffer1);
    convert_float_to_string(num2, buffer2);
    display_message_center(buffer1, buffer2);
}

void display_off(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  HD44780_Clear();
 8001a74:	f7ff fe2a 	bl	80016cc <HD44780_Clear>
  HD44780_NoBacklight();
 8001a78:	f7ff fec4 	bl	8001804 <HD44780_NoBacklight>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <display_on>:

void display_on(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  HD44780_Backlight();
 8001a84:	f7ff feca 	bl	800181c <HD44780_Backlight>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b08f      	sub	sp, #60	@ 0x3c
 8001a90:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a92:	f001 fdcb 	bl	800362c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a96:	f000 f8c1 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9a:	f000 fab5 	bl	8002008 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a9e:	f000 fa89 	bl	8001fb4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001aa2:	f000 f927 	bl	8001cf4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001aa6:	f000 f977 	bl	8001d98 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001aaa:	f000 fa5f 	bl	8001f6c <MX_TIM10_Init>
  MX_RTC_Init();
 8001aae:	f000 f9cf 	bl	8001e50 <MX_RTC_Init>
  MX_I2C3_Init();
 8001ab2:	f000 f99f 	bl	8001df4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7ff fd7e 	bl	80015b8 <HD44780_Init>
  veml7700_init(&veml, &hi2c3, VEML7700_I2C_ADDRESS);
 8001abc:	2210      	movs	r2, #16
 8001abe:	494d      	ldr	r1, [pc, #308]	@ (8001bf4 <main+0x168>)
 8001ac0:	484d      	ldr	r0, [pc, #308]	@ (8001bf8 <main+0x16c>)
 8001ac2:	f001 fd28 	bl	8003516 <veml7700_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // CHECK SETUP
	  if (user_selected_plant.high_temp==0)  // check if plant has been selected
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <main+0x170>)
 8001ac8:	7c5b      	ldrb	r3, [r3, #17]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <main+0x46>
	  {
		  select_plant();
 8001ace:	f000 fe35 	bl	800273c <select_plant>
	  }
	  if (calibrated_wet_level==0) // check if moisture level calibrated
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c00 <main+0x174>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d111      	bne.n	8001afe <main+0x72>
	  {
		  calibrate_moisture(hadc1);
 8001ada:	4e4a      	ldr	r6, [pc, #296]	@ (8001c04 <main+0x178>)
 8001adc:	466d      	mov	r5, sp
 8001ade:	f106 0410 	add.w	r4, r6, #16
 8001ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001afa:	f000 fe57 	bl	80027ac <calibrate_moisture>
	  }
	  if (pot_depth==0) // check if pot depth has been selected
 8001afe:	4b42      	ldr	r3, [pc, #264]	@ (8001c08 <main+0x17c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <main+0x7e>
	  {
		  select_pot_depth();
 8001b06:	f000 ff1d 	bl	8002944 <select_pot_depth>
	  }
	  if(*flags[1]==1) // user-initiated recalibration
 8001b0a:	4b40      	ldr	r3, [pc, #256]	@ (8001c0c <main+0x180>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d113      	bne.n	8001b3c <main+0xb0>
	  {
		  clear_flags();
 8001b14:	f000 fda2 	bl	800265c <clear_flags>
		  change_setup(hadc1);
 8001b18:	4e3a      	ldr	r6, [pc, #232]	@ (8001c04 <main+0x178>)
 8001b1a:	466d      	mov	r5, sp
 8001b1c:	f106 0410 	add.w	r4, r6, #16
 8001b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b34:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b38:	f000 ff3e 	bl	80029b8 <change_setup>
	  }


	  // OPERATION
	  if (*flags[0])  // if RTC IRQ set (every 1 minute for demo TODO: make sure that's enough time)
 8001b3c:	4b33      	ldr	r3, [pc, #204]	@ (8001c0c <main+0x180>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d030      	beq.n	8001ba8 <main+0x11c>
	  {
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // enable pullup for sensor I2C

		  // TEMP/RH
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		  HAL_Delay(10);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f001 fde2 	bl	8003710 <HAL_Delay>
		  get_temp_and_rh_value();
 8001b4c:	f001 fa7a 	bl	8003044 <get_temp_and_rh_value>
		  check_temp();
 8001b50:	f001 fae6 	bl	8003120 <check_temp>
		  check_rh();
 8001b54:	f001 fb0c 	bl	8003170 <check_rh>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);

		  // LIGHT
		  // Note: for demo just checking light level on every reading
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
		  get_light_value(veml);
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <main+0x16c>)
 8001b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b5e:	f7ff fcc1 	bl	80014e4 <get_light_value>
		  check_light_intensity();
 8001b62:	f7ff fcf7 	bl	8001554 <check_light_intensity>
		  if(light_24h_counter==5) {light_24h_counter=0;}
 8001b66:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <main+0x184>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d103      	bne.n	8001b76 <main+0xea>
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <main+0x184>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e004      	b.n	8001b80 <main+0xf4>
		  else {light_24h_counter++;}
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <main+0x184>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a24      	ldr	r2, [pc, #144]	@ (8001c10 <main+0x184>)
 8001b7e:	6013      	str	r3, [r2, #0]
		  // MOISTURE
		  // Note: for demo checking on every RTC trigger
		  // enable power to moisture sensors
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		  get_moisture_value(hadc1);
 8001b80:	4e20      	ldr	r6, [pc, #128]	@ (8001c04 <main+0x178>)
 8001b82:	466d      	mov	r5, sp
 8001b84:	f106 0410 	add.w	r4, r6, #16
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ba0:	f000 fc86 	bl	80024b0 <get_moisture_value>
		  check_moisture_level();
 8001ba4:	f000 fcec 	bl	8002580 <check_moisture_level>
		  // disable power to moisture sensors
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	  }

	  if(*flags[3]==1) // turn screen on/off
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <main+0x180>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d103      	bne.n	8001bba <main+0x12e>
	  {
		  clear_flags();
 8001bb2:	f000 fd53 	bl	800265c <clear_flags>
		  display_toggle();
 8001bb6:	f001 fc3f 	bl	8003438 <display_toggle>
	  }

	  if (display_is_on)
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <main+0x188>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <main+0x146>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	4814      	ldr	r0, [pc, #80]	@ (8001c18 <main+0x18c>)
 8001bc8:	f002 fc22 	bl	8004410 <HAL_GPIO_WritePin>
		  show_alerts();
 8001bcc:	f001 fbc2 	bl	8003354 <show_alerts>
 8001bd0:	e779      	b.n	8001ac6 <main+0x3a>
	  }
	  else if (count_alerts()!=0)
 8001bd2:	f001 fb8d 	bl	80032f0 <count_alerts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <main+0x15c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2120      	movs	r1, #32
 8001be0:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <main+0x18c>)
 8001be2:	f002 fc15 	bl	8004410 <HAL_GPIO_WritePin>
 8001be6:	e76e      	b.n	8001ac6 <main+0x3a>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	480a      	ldr	r0, [pc, #40]	@ (8001c18 <main+0x18c>)
 8001bee:	f002 fc0f 	bl	8004410 <HAL_GPIO_WritePin>
	  if (user_selected_plant.high_temp==0)  // check if plant has been selected
 8001bf2:	e768      	b.n	8001ac6 <main+0x3a>
 8001bf4:	20000498 	.word	0x20000498
 8001bf8:	2000059c 	.word	0x2000059c
 8001bfc:	20000080 	.word	0x20000080
 8001c00:	200005ac 	.word	0x200005ac
 8001c04:	200003fc 	.word	0x200003fc
 8001c08:	200005ae 	.word	0x200005ae
 8001c0c:	20000098 	.word	0x20000098
 8001c10:	200003c8 	.word	0x200003c8
 8001c14:	200000b0 	.word	0x200000b0
 8001c18:	40020000 	.word	0x40020000

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	@ 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fa1a 	bl	8007064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <SystemClock_Config+0xd0>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a28      	ldr	r2, [pc, #160]	@ (8001cec <SystemClock_Config+0xd0>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c50:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <SystemClock_Config+0xd0>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <SystemClock_Config+0xd4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c68:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <SystemClock_Config+0xd4>)
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <SystemClock_Config+0xd4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c84:	2310      	movs	r3, #16
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c94:	2308      	movs	r3, #8
 8001c96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001c98:	2332      	movs	r3, #50	@ 0x32
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fc11 	bl	80054d0 <HAL_RCC_OscConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cb4:	f000 fac8 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb8:	230f      	movs	r3, #15
 8001cba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fe73 	bl	80059c0 <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ce0:	f000 fab2 	bl	8002248 <Error_Handler>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3750      	adds	r7, #80	@ 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d08:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <MX_ADC1_Init+0x9c>)
 8001d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <MX_ADC1_Init+0xa0>)
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d52:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d54:	f001 fd00 	bl	8003758 <HAL_ADC_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 fa73 	bl	8002248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <MX_ADC1_Init+0x98>)
 8001d74:	f001 fe80 	bl	8003a78 <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d7e:	f000 fa63 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200003fc 	.word	0x200003fc
 8001d90:	40012000 	.word	0x40012000
 8001d94:	0f000001 	.word	0x0f000001

08001d98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <MX_I2C1_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <MX_I2C1_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <MX_I2C1_Init+0x50>)
 8001dd6:	f002 fb67 	bl	80044a8 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 fa32 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000444 	.word	0x20000444
 8001dec:	40005400 	.word	0x40005400
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <MX_I2C3_Init+0x54>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e00:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <MX_I2C3_Init+0x58>)
 8001e02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <MX_I2C3_Init+0x50>)
 8001e32:	f002 fb39 	bl	80044a8 <HAL_I2C_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e3c:	f000 fa04 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000498 	.word	0x20000498
 8001e48:	40005c00 	.word	0x40005c00
 8001e4c:	000186a0 	.word	0x000186a0

08001e50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b090      	sub	sp, #64	@ 0x40
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2228      	movs	r2, #40	@ 0x28
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 f8f7 	bl	8007064 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e76:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e78:	4a3a      	ldr	r2, [pc, #232]	@ (8001f64 <MX_RTC_Init+0x114>)
 8001e7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e7c:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e84:	227f      	movs	r2, #127	@ 0x7f
 8001e86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e88:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e8a:	22ff      	movs	r2, #255	@ 0xff
 8001e8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e8e:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ea0:	482f      	ldr	r0, [pc, #188]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001ea2:	f004 f89b 	bl	8005fdc <HAL_RTC_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001eac:	f000 f9cc 	bl	8002248 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001eca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4823      	ldr	r0, [pc, #140]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001ed4:	f004 f905 	bl	80060e2 <HAL_RTC_SetTime>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001ede:	f000 f9b3 	bl	8002248 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001efe:	2201      	movs	r2, #1
 8001f00:	4619      	mov	r1, r3
 8001f02:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001f04:	f004 f987 	bl	8006216 <HAL_RTC_SetDate>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001f0e:	f000 f99b 	bl	8002248 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_RTC_Init+0x118>)
 8001f2c:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	2201      	movs	r2, #1
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <MX_RTC_Init+0x110>)
 8001f4a:	f004 f9e9 	bl	8006320 <HAL_RTC_SetAlarm_IT>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001f54:	f000 f978 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3740      	adds	r7, #64	@ 0x40
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200004ec 	.word	0x200004ec
 8001f64:	40002800 	.word	0x40002800
 8001f68:	80800080 	.word	0x80800080

08001f6c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <MX_TIM10_Init+0x44>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f78:	2231      	movs	r2, #49	@ 0x31
 8001f7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f98:	f004 fca4 	bl	80068e4 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fa2:	f000 f951 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000050c 	.word	0x2000050c
 8001fb0:	40014400 	.word	0x40014400

08001fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_USART2_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fec:	f004 fd56 	bl	8006a9c <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f927 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000554 	.word	0x20000554
 8002004:	40004400 	.word	0x40004400

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a4c      	ldr	r2, [pc, #304]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b4a      	ldr	r3, [pc, #296]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a45      	ldr	r2, [pc, #276]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <MX_GPIO_Init+0x150>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b3f      	ldr	r3, [pc, #252]	@ (8002158 <MX_GPIO_Init+0x150>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a3e      	ldr	r2, [pc, #248]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b3c      	ldr	r3, [pc, #240]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b38      	ldr	r3, [pc, #224]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a37      	ldr	r2, [pc, #220]	@ (8002158 <MX_GPIO_Init+0x150>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <MX_GPIO_Init+0x150>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	2120      	movs	r1, #32
 8002092:	4832      	ldr	r0, [pc, #200]	@ (800215c <MX_GPIO_Init+0x154>)
 8002094:	f002 f9bc 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800209e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	482c      	ldr	r0, [pc, #176]	@ (8002160 <MX_GPIO_Init+0x158>)
 80020b0:	f002 f812 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020b4:	2320      	movs	r3, #32
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4824      	ldr	r0, [pc, #144]	@ (800215c <MX_GPIO_Init+0x154>)
 80020cc:	f002 f804 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	481e      	ldr	r0, [pc, #120]	@ (800215c <MX_GPIO_Init+0x154>)
 80020e4:	f001 fff8 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80020e8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4819      	ldr	r0, [pc, #100]	@ (8002164 <MX_GPIO_Init+0x15c>)
 8002100:	f001 ffea 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4811      	ldr	r0, [pc, #68]	@ (8002160 <MX_GPIO_Init+0x158>)
 800211c:	f001 ffdc 	bl	80040d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	200a      	movs	r0, #10
 8002126:	f001 ffa0 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800212a:	200a      	movs	r0, #10
 800212c:	f001 ffb9 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2017      	movs	r0, #23
 8002136:	f001 ff98 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800213a:	2017      	movs	r0, #23
 800213c:	f001 ffb1 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2028      	movs	r0, #40	@ 0x28
 8002146:	f001 ff90 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800214a:	2028      	movs	r0, #40	@ 0x28
 800214c:	f001 ffa9 	bl	80040a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	@ 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020800 	.word	0x40020800
 8002164:	40020400 	.word	0x40020400

08002168 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;
	uint32_t current_time = HAL_GetTick();
 8002172:	f001 fac1 	bl	80036f8 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]
	if (current_time - last_interrupt_time < 200)
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_GPIO_EXTI_Callback+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2bc7      	cmp	r3, #199	@ 0xc7
 8002182:	d930      	bls.n	80021e6 <HAL_GPIO_EXTI_Callback+0x7e>
	{
		return;
	}
	last_interrupt_time = current_time;
 8002184:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6013      	str	r3, [r2, #0]

	if(GPIO_Pin == GPIO_PIN_8)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002190:	d107      	bne.n	80021a2 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002192:	2120      	movs	r1, #32
 8002194:	4817      	ldr	r0, [pc, #92]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002196:	f002 f954 	bl	8004442 <HAL_GPIO_TogglePin>
		toggle_flag(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f000 fa36 	bl	800260c <toggle_flag>
 80021a0:	e022      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x80>
	}
	else if(GPIO_Pin == GPIO_PIN_10)
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a8:	d107      	bne.n	80021ba <HAL_GPIO_EXTI_Callback+0x52>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021aa:	2120      	movs	r1, #32
 80021ac:	4811      	ldr	r0, [pc, #68]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80021ae:	f002 f948 	bl	8004442 <HAL_GPIO_TogglePin>
		toggle_flag(2);
 80021b2:	2002      	movs	r0, #2
 80021b4:	f000 fa2a 	bl	800260c <toggle_flag>
 80021b8:	e016      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x80>
	}
	else if(GPIO_Pin == GPIO_PIN_4)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d107      	bne.n	80021d0 <HAL_GPIO_EXTI_Callback+0x68>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021c0:	2120      	movs	r1, #32
 80021c2:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80021c4:	f002 f93d 	bl	8004442 <HAL_GPIO_TogglePin>
		toggle_flag(3);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fa1f 	bl	800260c <toggle_flag>
 80021ce:	e00b      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x80>
	}
	else if(GPIO_Pin == GPIO_PIN_5)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d108      	bne.n	80021e8 <HAL_GPIO_EXTI_Callback+0x80>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021d6:	2120      	movs	r1, #32
 80021d8:	4806      	ldr	r0, [pc, #24]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80021da:	f002 f932 	bl	8004442 <HAL_GPIO_TogglePin>
		toggle_flag(4);
 80021de:	2004      	movs	r0, #4
 80021e0:	f000 fa14 	bl	800260c <toggle_flag>
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x80>
		return;
 80021e6:	bf00      	nop
	}
}
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005a4 	.word	0x200005a4
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	@ 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8002200:	f107 0108 	add.w	r1, r7, #8
 8002204:	2300      	movs	r3, #0
 8002206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f004 f9cc 	bl	80065a8 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Minutes>58) {
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	2b3a      	cmp	r3, #58	@ 0x3a
 8002214:	d902      	bls.n	800221c <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Minutes=0;
 8002216:	2300      	movs	r3, #0
 8002218:	727b      	strb	r3, [r7, #9]
 800221a:	e003      	b.n	8002224 <HAL_RTC_AlarmAEventCallback+0x2c>
  }else{
    sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800221c:	7a7b      	ldrb	r3, [r7, #9]
 800221e:	3301      	adds	r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	727b      	strb	r3, [r7, #9]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002224:	bf00      	nop
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	2200      	movs	r2, #0
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 f876 	bl	8006320 <HAL_RTC_SetAlarm_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f5      	bne.n	8002226 <HAL_RTC_AlarmAEventCallback+0x2e>
    toggle_flag(0);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f9e6 	bl	800260c <toggle_flag>
}
 8002240:	bf00      	nop
 8002242:	3730      	adds	r7, #48	@ 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <Error_Handler+0x8>
 8002254:	0000      	movs	r0, r0
	...

08002258 <adc_to_pct_moisture>:
/* Converts raw ADC value to a percent soil moisture
 * Parameters:
 * - adc_raw: corresponds to raw ADC output
 * Returns: % soil moisture reading from moisture sensor
 */
static uint16_t adc_to_pct_moisture(uint16_t adc_raw){
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
	uint16_t percent_moisture;
	uint32_t step, mvolt;
	mvolt = adc_raw*1000*3.3/4095;
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f969 	bl	8000544 <__aeabi_i2d>
 8002272:	a321      	add	r3, pc, #132	@ (adr r3, 80022f8 <adc_to_pct_moisture+0xa0>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	f7fe f9ce 	bl	8000618 <__aeabi_dmul>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	a31e      	add	r3, pc, #120	@ (adr r3, 8002300 <adc_to_pct_moisture+0xa8>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe faef 	bl	800086c <__aeabi_ddiv>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fc6f 	bl	8000b78 <__aeabi_d2uiz>
 800229a:	4603      	mov	r3, r0
 800229c:	617b      	str	r3, [r7, #20]
	if(mvolt>DRY_ADC_LEVEL){
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <adc_to_pct_moisture+0x98>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d901      	bls.n	80022ac <adc_to_pct_moisture+0x54>
		return 100;
 80022a8:	2364      	movs	r3, #100	@ 0x64
 80022aa:	e01a      	b.n	80022e2 <adc_to_pct_moisture+0x8a>
	} else if (mvolt<calibrated_wet_level){
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <adc_to_pct_moisture+0x9c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d201      	bcs.n	80022bc <adc_to_pct_moisture+0x64>
		return 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e012      	b.n	80022e2 <adc_to_pct_moisture+0x8a>
	} else {
		step = DRY_ADC_LEVEL-calibrated_wet_level;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <adc_to_pct_moisture+0x98>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <adc_to_pct_moisture+0x9c>)
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
		percent_moisture = (mvolt-calibrated_wet_level)*100/step;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <adc_to_pct_moisture+0x9c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	2264      	movs	r2, #100	@ 0x64
 80022d4:	fb03 f202 	mul.w	r2, r3, r2
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	81fb      	strh	r3, [r7, #14]
		return percent_moisture;
 80022e0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	08008a38 	.word	0x08008a38
 80022f4:	200005ac 	.word	0x200005ac
 80022f8:	66666666 	.word	0x66666666
 80022fc:	400a6666 	.word	0x400a6666
 8002300:	00000000 	.word	0x00000000
 8002304:	40affe00 	.word	0x40affe00

08002308 <moisture_at_depth>:
 *              critical depth is found
 * - ms1: reading from higher (0"-2.5") moisture sensor, in raw ADC reading
 * - ms2: reading from lower (1"-3.5") moisture sensor, in raw ADC reading
 * Returns: estimate of moisture at given soil depth, in % moisture
 */
static uint16_t moisture_at_depth(float pct_depth, uint16_t ms1_raw, uint16_t ms2_raw){
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	803b      	strh	r3, [r7, #0]
	uint16_t moisture_at_cd;
	float crit_depth, k;
	uint32_t x = 2.5*(0.7*ms1_raw-0.3*ms2_raw);
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f910 	bl	8000544 <__aeabi_i2d>
 8002324:	a35c      	add	r3, pc, #368	@ (adr r3, 8002498 <moisture_at_depth+0x190>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f7fe f975 	bl	8000618 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	883b      	ldrh	r3, [r7, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f903 	bl	8000544 <__aeabi_i2d>
 800233e:	a358      	add	r3, pc, #352	@ (adr r3, 80024a0 <moisture_at_depth+0x198>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f968 	bl	8000618 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffaa 	bl	80002a8 <__aeabi_dsub>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <moisture_at_depth+0x1a0>)
 8002362:	f7fe f959 	bl	8000618 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc03 	bl	8000b78 <__aeabi_d2uiz>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
	uint32_t y = (ms1_raw+ms2_raw)/2;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	883b      	ldrh	r3, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	0fda      	lsrs	r2, r3, #31
 800237e:	4413      	add	r3, r2
 8002380:	105b      	asrs	r3, r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
	uint32_t z = 2.5*(0.7*ms2_raw-0.3*ms1_raw);
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8dc 	bl	8000544 <__aeabi_i2d>
 800238c:	a342      	add	r3, pc, #264	@ (adr r3, 8002498 <moisture_at_depth+0x190>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe f941 	bl	8000618 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8cf 	bl	8000544 <__aeabi_i2d>
 80023a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80024a0 <moisture_at_depth+0x198>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f934 	bl	8000618 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff76 	bl	80002a8 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <moisture_at_depth+0x1a0>)
 80023ca:	f7fe f925 	bl	8000618 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fbcf 	bl	8000b78 <__aeabi_d2uiz>
 80023da:	4603      	mov	r3, r0
 80023dc:	61bb      	str	r3, [r7, #24]
	int diff = x-y;
 80023de:	6a3a      	ldr	r2, [r7, #32]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    crit_depth = pct_depth*pot_depth;
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <moisture_at_depth+0x1a4>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	edc7 7a04 	vstr	s15, [r7, #16]
    if (crit_depth>3.5) { // have to extrapolate
 80023fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002402:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	dd1d      	ble.n	800244c <moisture_at_depth+0x144>
        k = crit_depth - 3.5;
 8002410:	edd7 7a04 	vldr	s15, [r7, #16]
 8002414:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002418:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800241c:	edc7 7a03 	vstr	s15, [r7, #12]
        moisture_at_cd = z-k*diff;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002434:	edd7 7a03 	vldr	s15, [r7, #12]
 8002438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002444:	ee17 3a90 	vmov	r3, s15
 8002448:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800244a:	e019      	b.n	8002480 <moisture_at_depth+0x178>
    }
    else if(crit_depth>2.5) { // critical depth is in z range
 800244c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002450:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	dd02      	ble.n	8002464 <moisture_at_depth+0x15c>
        moisture_at_cd = z;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002462:	e00d      	b.n	8002480 <moisture_at_depth+0x178>
    }
    else if(crit_depth>1) { // critical depth is in y range
 8002464:	edd7 7a04 	vldr	s15, [r7, #16]
 8002468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800246c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	dd02      	ble.n	800247c <moisture_at_depth+0x174>
        moisture_at_cd = y;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800247a:	e001      	b.n	8002480 <moisture_at_depth+0x178>
    }
    else { // critical depth is in x range
        moisture_at_cd = x;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    return adc_to_pct_moisture(moisture_at_cd);
 8002480:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fee8 	bl	8002258 <adc_to_pct_moisture>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3728      	adds	r7, #40	@ 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
 8002492:	bf00      	nop
 8002494:	f3af 8000 	nop.w
 8002498:	66666666 	.word	0x66666666
 800249c:	3fe66666 	.word	0x3fe66666
 80024a0:	33333333 	.word	0x33333333
 80024a4:	3fd33333 	.word	0x3fd33333
 80024a8:	40040000 	.word	0x40040000
 80024ac:	200005ae 	.word	0x200005ae

080024b0 <get_moisture_value>:
 * Parameters:
 * - adc: initialized ADC
 * Returns: averaged raw ADC value for higher moisture sensor
 * TODO: update return value (extra parameter to chose which? don't return anything?)
 */
uint16_t get_moisture_value(ADC_HandleTypeDef adc){
 80024b0:	b084      	sub	sp, #16
 80024b2:	b5b0      	push	{r4, r5, r7, lr}
 80024b4:	b096      	sub	sp, #88	@ 0x58
 80024b6:	af10      	add	r7, sp, #64	@ 0x40
 80024b8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80024bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t sum1, sum2;
    uint16_t s1, s2, avg1, avg2;
    sum1 = 0; sum2 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
    for(int i=0; i<3; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e037      	b.n	800253e <get_moisture_value+0x8e>
    	s1 = adc_channel_conv(0, adc);
 80024ce:	466d      	mov	r5, sp
 80024d0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80024d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80024e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe fd2a 	bl	8000f48 <adc_channel_conv>
 80024f4:	4603      	mov	r3, r0
 80024f6:	80fb      	strh	r3, [r7, #6]
        sum1 += s1;
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
        s2 = adc_channel_conv(1, adc);
 8002500:	466d      	mov	r5, sp
 8002502:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002516:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800251a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800251e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe fd11 	bl	8000f48 <adc_channel_conv>
 8002526:	4603      	mov	r3, r0
 8002528:	80bb      	strh	r3, [r7, #4]
        sum2 += s2;
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        HAL_Delay(200);
 8002532:	20c8      	movs	r0, #200	@ 0xc8
 8002534:	f001 f8ec 	bl	8003710 <HAL_Delay>
    for(int i=0; i<3; i++) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b02      	cmp	r3, #2
 8002542:	ddc4      	ble.n	80024ce <get_moisture_value+0x1e>
    }
    avg1 = sum1/3;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a0c      	ldr	r2, [pc, #48]	@ (8002578 <get_moisture_value+0xc8>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	817b      	strh	r3, [r7, #10]
    avg2 = sum2/3;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4a09      	ldr	r2, [pc, #36]	@ (8002578 <get_moisture_value+0xc8>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	813b      	strh	r3, [r7, #8]

    moisture_sensor_readings[0] = avg1;
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <get_moisture_value+0xcc>)
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	8013      	strh	r3, [r2, #0]
    moisture_sensor_readings[1] = avg2;
 8002562:	4a06      	ldr	r2, [pc, #24]	@ (800257c <get_moisture_value+0xcc>)
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	8053      	strh	r3, [r2, #2]

    return avg1;
 8002568:	897b      	ldrh	r3, [r7, #10]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002574:	b004      	add	sp, #16
 8002576:	4770      	bx	lr
 8002578:	aaaaaaab 	.word	0xaaaaaaab
 800257c:	200005a8 	.word	0x200005a8

08002580 <check_moisture_level>:

/* Checks if plant needs watering based on pot height and plant type
 * (algorithm is still a work in progress)
 */
void check_moisture_level(){
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
	uint16_t high_moisture, low_moisture, cd_moisture;
	uint16_t ms1_raw, ms2_raw;
	float pct_depth;
	ms1_raw = moisture_sensor_readings[0];
 8002586:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <check_moisture_level+0x78>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	817b      	strh	r3, [r7, #10]
	ms2_raw = moisture_sensor_readings[1];
 800258c:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <check_moisture_level+0x78>)
 800258e:	885b      	ldrh	r3, [r3, #2]
 8002590:	813b      	strh	r3, [r7, #8]
	high_moisture = user_selected_plant.high_moisture;
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <check_moisture_level+0x7c>)
 8002594:	7ddb      	ldrb	r3, [r3, #23]
 8002596:	80fb      	strh	r3, [r7, #6]
	low_moisture = user_selected_plant.low_moisture;
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <check_moisture_level+0x7c>)
 800259a:	7d9b      	ldrb	r3, [r3, #22]
 800259c:	80bb      	strh	r3, [r7, #4]
    pct_depth = 0;
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
    if (high_moisture<21){ // low moisture plants
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	2b14      	cmp	r3, #20
 80025a8:	d802      	bhi.n	80025b0 <check_moisture_level+0x30>
        pct_depth = 0.90;
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <check_moisture_level+0x80>)
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e007      	b.n	80025c0 <check_moisture_level+0x40>
    }
    else if (high_moisture<61){ // medium moisture plants
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80025b4:	d802      	bhi.n	80025bc <check_moisture_level+0x3c>
        pct_depth = 0.33;
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <check_moisture_level+0x84>)
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e001      	b.n	80025c0 <check_moisture_level+0x40>
    }
    else { // high moisture plants
        pct_depth = 0.15;
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <check_moisture_level+0x88>)
 80025be:	60fb      	str	r3, [r7, #12]
    }
    cd_moisture = moisture_at_depth(pct_depth,ms1_raw,ms2_raw);
 80025c0:	893a      	ldrh	r2, [r7, #8]
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80025cc:	f7ff fe9c 	bl	8002308 <moisture_at_depth>
 80025d0:	4603      	mov	r3, r0
 80025d2:	807b      	strh	r3, [r7, #2]
    if (cd_moisture<low_moisture){
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	88bb      	ldrh	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d204      	bcs.n	80025e6 <check_moisture_level+0x66>
        update_alert(8,1);
 80025dc:	2101      	movs	r1, #1
 80025de:	2008      	movs	r0, #8
 80025e0:	f000 fe70 	bl	80032c4 <update_alert>
    }
    else {
        update_alert(8,0); // clears alert if in proper range
    }
}
 80025e4:	e003      	b.n	80025ee <check_moisture_level+0x6e>
        update_alert(8,0); // clears alert if in proper range
 80025e6:	2100      	movs	r1, #0
 80025e8:	2008      	movs	r0, #8
 80025ea:	f000 fe6b 	bl	80032c4 <update_alert>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200005a8 	.word	0x200005a8
 80025fc:	20000080 	.word	0x20000080
 8002600:	3f666666 	.word	0x3f666666
 8002604:	3ea8f5c3 	.word	0x3ea8f5c3
 8002608:	3e19999a 	.word	0x3e19999a

0800260c <toggle_flag>:
 * Button 4: next, toggle alert
 */
volatile int *flags[5] = {&rtc_flag, &flag_1, &flag_2, &flag_3, &flag_4};


void toggle_flag(int button){
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	if(*flags[button] == 0){*flags[button]=1;}
 8002614:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <toggle_flag+0x4c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <toggle_flag+0x24>
 8002622:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <toggle_flag+0x4c>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
	else if (*flags[button] == 1){*flags[button]=0;}
}
 800262e:	e00c      	b.n	800264a <toggle_flag+0x3e>
	else if (*flags[button] == 1){*flags[button]=0;}
 8002630:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <toggle_flag+0x4c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <toggle_flag+0x3e>
 800263e:	4a06      	ldr	r2, [pc, #24]	@ (8002658 <toggle_flag+0x4c>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000098 	.word	0x20000098

0800265c <clear_flags>:

void set_flag(int button){
	*flags[button] = 1;
}

void clear_flags(){
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	*flags[0] = 0;
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <clear_flags+0x38>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
	*flags[1] = 0;
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <clear_flags+0x38>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
	*flags[2] = 0;
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <clear_flags+0x38>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
	*flags[3] = 0;
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <clear_flags+0x38>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
	*flags[4] = 0;
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <clear_flags+0x38>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000098 	.word	0x20000098

08002698 <scroll_plant>:

/* Helper function for select_plant
 * controls display of plant list
 * NOTE: need to update wrapping index when size of plant_list changed
 */
static Plant scroll_plant(){
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  int i = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  while(1){
    display_message_left(plant_list[i]->plant_name,"");
 80026a4:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <scroll_plant+0x98>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	4921      	ldr	r1, [pc, #132]	@ (8002734 <scroll_plant+0x9c>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f9aa 	bl	8001a08 <display_message_left>
    if(*flags[2]){ // if "select" is pressed
 80026b4:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <scroll_plant+0xa0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <scroll_plant+0x4e>
    	clear_flags();
 80026be:	f7ff ffcd 	bl	800265c <clear_flags>
        return *plant_list[i];
 80026c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002730 <scroll_plant+0x98>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6810      	ldr	r0, [r2, #0]
 80026ce:	6851      	ldr	r1, [r2, #4]
 80026d0:	6895      	ldr	r5, [r2, #8]
 80026d2:	68d4      	ldr	r4, [r2, #12]
 80026d4:	6018      	str	r0, [r3, #0]
 80026d6:	6059      	str	r1, [r3, #4]
 80026d8:	609d      	str	r5, [r3, #8]
 80026da:	60dc      	str	r4, [r3, #12]
 80026dc:	6910      	ldr	r0, [r2, #16]
 80026de:	6951      	ldr	r1, [r2, #20]
 80026e0:	6118      	str	r0, [r3, #16]
 80026e2:	6159      	str	r1, [r3, #20]
 80026e4:	e020      	b.n	8002728 <scroll_plant+0x90>
    }
    if(*flags[4]){ // if "next" pressed
 80026e6:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <scroll_plant+0xa0>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <scroll_plant+0x6e>
        clear_flags();
 80026f0:	f7ff ffb4 	bl	800265c <clear_flags>
        if(i==2){i=0;} // wrap to first index
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d102      	bne.n	8002700 <scroll_plant+0x68>
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e002      	b.n	8002706 <scroll_plant+0x6e>
        else {i++;}
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3301      	adds	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
    }
    if(*flags[3]){ // if "back" pressed
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <scroll_plant+0xa0>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0c9      	beq.n	80026a4 <scroll_plant+0xc>
    	clear_flags();
 8002710:	f7ff ffa4 	bl	800265c <clear_flags>
        if(i==0) {i=2;}  // wrap to last index
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <scroll_plant+0x88>
 800271a:	2302      	movs	r3, #2
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e7c1      	b.n	80026a4 <scroll_plant+0xc>
        else {i--;}
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b01      	subs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
    display_message_left(plant_list[i]->plant_name,"");
 8002726:	e7bd      	b.n	80026a4 <scroll_plant+0xc>
    }
  }
}
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bdb0      	pop	{r4, r5, r7, pc}
 8002730:	20000074 	.word	0x20000074
 8002734:	0800887c 	.word	0x0800887c
 8002738:	20000098 	.word	0x20000098

0800273c <select_plant>:

/* User plant selection
 * Displays plant options and sets user_selected_plant
 */
uint32_t select_plant(){
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
    display_message_left("to select plant", "press next");
 8002742:	4916      	ldr	r1, [pc, #88]	@ (800279c <select_plant+0x60>)
 8002744:	4816      	ldr	r0, [pc, #88]	@ (80027a0 <select_plant+0x64>)
 8002746:	f7ff f95f 	bl	8001a08 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 800274a:	e00c      	b.n	8002766 <select_plant+0x2a>
        if(*flags[3] && user_selected_plant.high_humidity!=0){ // exit if "back" pressed and already plant selected
 800274c:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <select_plant+0x68>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <select_plant+0x2a>
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <select_plant+0x6c>)
 8002758:	7cdb      	ldrb	r3, [r3, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <select_plant+0x2a>
        	clear_flags();
 800275e:	f7ff ff7d 	bl	800265c <clear_flags>
            return 0;
 8002762:	2300      	movs	r3, #0
 8002764:	e015      	b.n	8002792 <select_plant+0x56>
    while(!*flags[4]){ // wait for "next" press
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <select_plant+0x68>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ed      	beq.n	800274c <select_plant+0x10>
        }
    };
    clear_flags();
 8002770:	f7ff ff74 	bl	800265c <clear_flags>
    user_selected_plant = scroll_plant();
 8002774:	4c0c      	ldr	r4, [pc, #48]	@ (80027a8 <select_plant+0x6c>)
 8002776:	463b      	mov	r3, r7
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff8d 	bl	8002698 <scroll_plant>
 800277e:	463d      	mov	r5, r7
 8002780:	6828      	ldr	r0, [r5, #0]
 8002782:	6869      	ldr	r1, [r5, #4]
 8002784:	68aa      	ldr	r2, [r5, #8]
 8002786:	68eb      	ldr	r3, [r5, #12]
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	6928      	ldr	r0, [r5, #16]
 800278c:	6969      	ldr	r1, [r5, #20]
 800278e:	c403      	stmia	r4!, {r0, r1}
    return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bdb0      	pop	{r4, r5, r7, pc}
 800279a:	bf00      	nop
 800279c:	08008880 	.word	0x08008880
 80027a0:	0800888c 	.word	0x0800888c
 80027a4:	20000098 	.word	0x20000098
 80027a8:	20000080 	.word	0x20000080

080027ac <calibrate_moisture>:
/* User calibration of moisture sensor reading for wet soil
 * Want wet level to be higher sensor, run 5 mins after watering
 * Parameters:
 * - adc: initialized ADC
 */
uint32_t calibrate_moisture(ADC_HandleTypeDef adc){
 80027ac:	b084      	sub	sp, #16
 80027ae:	b5b0      	push	{r4, r5, r7, lr}
 80027b0:	b08e      	sub	sp, #56	@ 0x38
 80027b2:	af0e      	add	r7, sp, #56	@ 0x38
 80027b4:	f107 0410 	add.w	r4, r7, #16
 80027b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    display_message_left("water plant then", "press calibrate");
 80027bc:	4926      	ldr	r1, [pc, #152]	@ (8002858 <calibrate_moisture+0xac>)
 80027be:	4827      	ldr	r0, [pc, #156]	@ (800285c <calibrate_moisture+0xb0>)
 80027c0:	f7ff f922 	bl	8001a08 <display_message_left>
    while(!*flags[1]){ // wait for "calibrate" press
 80027c4:	e016      	b.n	80027f4 <calibrate_moisture+0x48>
        if(*flags[3] && calibrated_wet_level!=0){ // exit if "back" pressed and already calibrated
 80027c6:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <calibrate_moisture+0xb4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d011      	beq.n	80027f4 <calibrate_moisture+0x48>
 80027d0:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <calibrate_moisture+0xb8>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <calibrate_moisture+0x48>
        	display_message_left("exiting", "calibration");
 80027d8:	4923      	ldr	r1, [pc, #140]	@ (8002868 <calibrate_moisture+0xbc>)
 80027da:	4824      	ldr	r0, [pc, #144]	@ (800286c <calibrate_moisture+0xc0>)
 80027dc:	f7ff f914 	bl	8001a08 <display_message_left>
        	HAL_Delay(2000);
 80027e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027e4:	f000 ff94 	bl	8003710 <HAL_Delay>
        	HD44780_Clear();
 80027e8:	f7fe ff70 	bl	80016cc <HD44780_Clear>
        	clear_flags();
 80027ec:	f7ff ff36 	bl	800265c <clear_flags>
            return 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e02b      	b.n	800284c <calibrate_moisture+0xa0>
    while(!*flags[1]){ // wait for "calibrate" press
 80027f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <calibrate_moisture+0xb4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0e3      	beq.n	80027c6 <calibrate_moisture+0x1a>
        }
    };
    clear_flags();
 80027fe:	f7ff ff2d 	bl	800265c <clear_flags>
    display_message_left("calibrating", "");
 8002802:	491b      	ldr	r1, [pc, #108]	@ (8002870 <calibrate_moisture+0xc4>)
 8002804:	481b      	ldr	r0, [pc, #108]	@ (8002874 <calibrate_moisture+0xc8>)
 8002806:	f7ff f8ff 	bl	8001a08 <display_message_left>
    calibrated_wet_level = get_moisture_value(adc);
 800280a:	466d      	mov	r5, sp
 800280c:	f107 0420 	add.w	r4, r7, #32
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002820:	e885 0003 	stmia.w	r5, {r0, r1}
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282a:	f7ff fe41 	bl	80024b0 <get_moisture_value>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <calibrate_moisture+0xb8>)
 8002834:	801a      	strh	r2, [r3, #0]
    display_message_left("calibration", "saved");
 8002836:	4910      	ldr	r1, [pc, #64]	@ (8002878 <calibrate_moisture+0xcc>)
 8002838:	480b      	ldr	r0, [pc, #44]	@ (8002868 <calibrate_moisture+0xbc>)
 800283a:	f7ff f8e5 	bl	8001a08 <display_message_left>
    HAL_Delay(2000);
 800283e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002842:	f000 ff65 	bl	8003710 <HAL_Delay>
    HD44780_Clear();
 8002846:	f7fe ff41 	bl	80016cc <HD44780_Clear>
    return 0;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002854:	b004      	add	sp, #16
 8002856:	4770      	bx	lr
 8002858:	0800889c 	.word	0x0800889c
 800285c:	080088ac 	.word	0x080088ac
 8002860:	20000098 	.word	0x20000098
 8002864:	200005ac 	.word	0x200005ac
 8002868:	080088c0 	.word	0x080088c0
 800286c:	080088cc 	.word	0x080088cc
 8002870:	0800887c 	.word	0x0800887c
 8002874:	080088d4 	.word	0x080088d4
 8002878:	080088e0 	.word	0x080088e0

0800287c <scroll_depth>:

/* Helper function for select_pot_depth
 * Controls display of depth options
 */
static uint16_t scroll_depth(){
 800287c:	b580      	push	{r7, lr}
 800287e:	b094      	sub	sp, #80	@ 0x50
 8002880:	af00      	add	r7, sp, #0
	uint32_t min_depth = 4;
 8002882:	2304      	movs	r3, #4
 8002884:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t max_depth = 24;
 8002886:	2318      	movs	r3, #24
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t depth = min_depth;
 800288a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800288c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	const char *buf[16];
    while(1){
    	//convert_number_to_string(depth, buf);
    	sprintf(buf, "%d in", depth);
 8002890:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4926      	ldr	r1, [pc, #152]	@ (8002930 <scroll_depth+0xb4>)
 8002898:	4618      	mov	r0, r3
 800289a:	f004 fbc3 	bl	8007024 <siprintf>
    	display_message_left("pot depth:", buf);
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4824      	ldr	r0, [pc, #144]	@ (8002934 <scroll_depth+0xb8>)
 80028a4:	f7ff f8b0 	bl	8001a08 <display_message_left>
        if(*flags[2]){ // if "select" is pressed
 80028a8:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <scroll_depth+0xbc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <scroll_depth+0x54>
        	clear_flags(); // clear "select" flag
 80028b2:	f7ff fed3 	bl	800265c <clear_flags>
        	display_message_left("depth", "selected");
 80028b6:	4921      	ldr	r1, [pc, #132]	@ (800293c <scroll_depth+0xc0>)
 80028b8:	4821      	ldr	r0, [pc, #132]	@ (8002940 <scroll_depth+0xc4>)
 80028ba:	f7ff f8a5 	bl	8001a08 <display_message_left>
        	HAL_Delay(2000);
 80028be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028c2:	f000 ff25 	bl	8003710 <HAL_Delay>
        	HD44780_Clear();
 80028c6:	f7fe ff01 	bl	80016cc <HD44780_Clear>
            return depth;
 80028ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028ce:	e02a      	b.n	8002926 <scroll_depth+0xaa>
        }
        if (*flags[4]){ // if "next" pressed
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <scroll_depth+0xbc>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00f      	beq.n	80028fa <scroll_depth+0x7e>
        	clear_flags(); // clear "next" flag
 80028da:	f7ff febf 	bl	800265c <clear_flags>
            if(depth==max_depth){depth=min_depth;} // wrap
 80028de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <scroll_depth+0x74>
 80028e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80028ee:	e004      	b.n	80028fa <scroll_depth+0x7e>
            else {depth++;}
 80028f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028f4:	3301      	adds	r3, #1
 80028f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        }
        if(*flags[3]){ // if "back" pressed
 80028fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <scroll_depth+0xbc>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0c5      	beq.n	8002890 <scroll_depth+0x14>
        	clear_flags(); // clear "back" flag
 8002904:	f7ff feaa 	bl	800265c <clear_flags>
            if(depth==min_depth) {depth=max_depth;}  // wrap
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800290c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <scroll_depth+0x9e>
 8002912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002914:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002918:	e7ba      	b.n	8002890 <scroll_depth+0x14>
            else {depth--;}
 800291a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800291e:	3b01      	subs	r3, #1
 8002920:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    	sprintf(buf, "%d in", depth);
 8002924:	e7b4      	b.n	8002890 <scroll_depth+0x14>
        }
    }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3750      	adds	r7, #80	@ 0x50
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	080088e8 	.word	0x080088e8
 8002934:	080088f0 	.word	0x080088f0
 8002938:	20000098 	.word	0x20000098
 800293c:	080088fc 	.word	0x080088fc
 8002940:	08008908 	.word	0x08008908

08002944 <select_pot_depth>:

/* User pot depth selection
 */
uint16_t select_pot_depth(){
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
    display_message_left("to select pot", "depth press next");
 8002948:	4915      	ldr	r1, [pc, #84]	@ (80029a0 <select_pot_depth+0x5c>)
 800294a:	4816      	ldr	r0, [pc, #88]	@ (80029a4 <select_pot_depth+0x60>)
 800294c:	f7ff f85c 	bl	8001a08 <display_message_left>
    while(!*flags[4]){ // wait for "next" press
 8002950:	e00c      	b.n	800296c <select_pot_depth+0x28>
        if(*flags[3] && pot_depth!=0){ // exit if "back" pressed and already set depth
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <select_pot_depth+0x64>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <select_pot_depth+0x28>
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <select_pot_depth+0x68>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <select_pot_depth+0x28>
        	clear_flags(); // clear "next" and "back" flags
 8002964:	f7ff fe7a 	bl	800265c <clear_flags>
            return 0;
 8002968:	2300      	movs	r3, #0
 800296a:	e017      	b.n	800299c <select_pot_depth+0x58>
    while(!*flags[4]){ // wait for "next" press
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <select_pot_depth+0x64>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ed      	beq.n	8002952 <select_pot_depth+0xe>
        }
    };
    clear_flags(); // clear "next" flag
 8002976:	f7ff fe71 	bl	800265c <clear_flags>
    pot_depth = scroll_depth();
 800297a:	f7ff ff7f 	bl	800287c <scroll_depth>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <select_pot_depth+0x68>)
 8002984:	801a      	strh	r2, [r3, #0]
    display_message_left("pot depth saved", "");
 8002986:	490a      	ldr	r1, [pc, #40]	@ (80029b0 <select_pot_depth+0x6c>)
 8002988:	480a      	ldr	r0, [pc, #40]	@ (80029b4 <select_pot_depth+0x70>)
 800298a:	f7ff f83d 	bl	8001a08 <display_message_left>
    HAL_Delay(2000);
 800298e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002992:	f000 febd 	bl	8003710 <HAL_Delay>
    HD44780_Clear();
 8002996:	f7fe fe99 	bl	80016cc <HD44780_Clear>
    return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	08008910 	.word	0x08008910
 80029a4:	08008924 	.word	0x08008924
 80029a8:	20000098 	.word	0x20000098
 80029ac:	200005ae 	.word	0x200005ae
 80029b0:	0800887c 	.word	0x0800887c
 80029b4:	08008934 	.word	0x08008934

080029b8 <change_setup>:

/* User recalibration (change one of setup values)
 */
uint32_t change_setup(ADC_HandleTypeDef adc){
 80029b8:	b084      	sub	sp, #16
 80029ba:	b5b0      	push	{r4, r5, r7, lr}
 80029bc:	b090      	sub	sp, #64	@ 0x40
 80029be:	af0e      	add	r7, sp, #56	@ 0x38
 80029c0:	f107 0418 	add.w	r4, r7, #24
 80029c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	607b      	str	r3, [r7, #4]
    while(1){
        if(*flags[2]){ // if "select" is pressed
 80029cc:	4b39      	ldr	r3, [pc, #228]	@ (8002ab4 <change_setup+0xfc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d029      	beq.n	8002a2a <change_setup+0x72>
        	clear_flags(); // clear "select" flag
 80029d6:	f7ff fe41 	bl	800265c <clear_flags>
            switch (i) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d01f      	beq.n	8002a20 <change_setup+0x68>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	dc1f      	bgt.n	8002a26 <change_setup+0x6e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <change_setup+0x3c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <change_setup+0x42>
 80029f2:	e018      	b.n	8002a26 <change_setup+0x6e>
                case (0):
                    select_plant();
 80029f4:	f7ff fea2 	bl	800273c <select_plant>
                    break;
 80029f8:	e015      	b.n	8002a26 <change_setup+0x6e>
                case (1):
                    calibrate_moisture(adc);
 80029fa:	466d      	mov	r5, sp
 80029fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1a:	f7ff fec7 	bl	80027ac <calibrate_moisture>
                    break;
 8002a1e:	e002      	b.n	8002a26 <change_setup+0x6e>
                case (2):
                    select_pot_depth();
 8002a20:	f7ff ff90 	bl	8002944 <select_pot_depth>
                    break;
 8002a24:	bf00      	nop
            }
            return i;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	e03c      	b.n	8002aa4 <change_setup+0xec>
        }
        if (*flags[4]){ // if "next" pressed
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <change_setup+0xfc>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <change_setup+0x92>
        	clear_flags(); // clear "next" flag
 8002a34:	f7ff fe12 	bl	800265c <clear_flags>
            if(i==2){i=0;} // wrap
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d102      	bne.n	8002a44 <change_setup+0x8c>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	e002      	b.n	8002a4a <change_setup+0x92>
            else {i++;}
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3301      	adds	r3, #1
 8002a48:	607b      	str	r3, [r7, #4]
        }
        if(*flags[3]){ // if "back" pressed
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <change_setup+0xfc>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <change_setup+0xb2>
        	clear_flags(); // clear "back" flag
 8002a54:	f7ff fe02 	bl	800265c <clear_flags>
            if(i==0) {i=2;}  // wrap
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <change_setup+0xac>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	e002      	b.n	8002a6a <change_setup+0xb2>
            else {i--;}
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
        }
        switch (i) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d013      	beq.n	8002a98 <change_setup+0xe0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	dcaa      	bgt.n	80029cc <change_setup+0x14>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <change_setup+0xcc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <change_setup+0xd6>
 8002a82:	e00e      	b.n	8002aa2 <change_setup+0xea>
            case (0):
                display_message_left("select new","plant");
 8002a84:	490c      	ldr	r1, [pc, #48]	@ (8002ab8 <change_setup+0x100>)
 8002a86:	480d      	ldr	r0, [pc, #52]	@ (8002abc <change_setup+0x104>)
 8002a88:	f7fe ffbe 	bl	8001a08 <display_message_left>
                break;
 8002a8c:	e009      	b.n	8002aa2 <change_setup+0xea>
            case (1):
                display_message_left("recalibrate","moisture");
 8002a8e:	490c      	ldr	r1, [pc, #48]	@ (8002ac0 <change_setup+0x108>)
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <change_setup+0x10c>)
 8002a92:	f7fe ffb9 	bl	8001a08 <display_message_left>
                break;
 8002a96:	e004      	b.n	8002aa2 <change_setup+0xea>
            case (2):
                display_message_left("reset pot","depth");
 8002a98:	490b      	ldr	r1, [pc, #44]	@ (8002ac8 <change_setup+0x110>)
 8002a9a:	480c      	ldr	r0, [pc, #48]	@ (8002acc <change_setup+0x114>)
 8002a9c:	f7fe ffb4 	bl	8001a08 <display_message_left>
                break;
 8002aa0:	bf00      	nop
        if(*flags[2]){ // if "select" is pressed
 8002aa2:	e793      	b.n	80029cc <change_setup+0x14>
        }
    }
    return 0;
};
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002aae:	b004      	add	sp, #16
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000098 	.word	0x20000098
 8002ab8:	08008944 	.word	0x08008944
 8002abc:	0800894c 	.word	0x0800894c
 8002ac0:	08008958 	.word	0x08008958
 8002ac4:	08008964 	.word	0x08008964
 8002ac8:	08008908 	.word	0x08008908
 8002acc:	08008970 	.word	0x08008970

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a08      	ldr	r2, [pc, #32]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b0e:	2007      	movs	r0, #7
 8002b10:	f001 faa0 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <HAL_ADC_MspInit+0x7c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d127      	bne.n	8002b92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_ADC_MspInit+0x80>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002b7a:	2313      	movs	r3, #19
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <HAL_ADC_MspInit+0x84>)
 8002b8e:	f001 faa3 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	@ 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40012000 	.word	0x40012000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	@ (8002cd0 <HAL_I2C_MspInit+0x128>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d12d      	bne.n	8002c26 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bec:	2312      	movs	r3, #18
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	4835      	ldr	r0, [pc, #212]	@ (8002cd8 <HAL_I2C_MspInit+0x130>)
 8002c04:	f001 fa68 	bl	80040d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	4a30      	ldr	r2, [pc, #192]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c18:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c24:	e050      	b.n	8002cc8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002cdc <HAL_I2C_MspInit+0x134>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d14b      	bne.n	8002cc8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	4b27      	ldr	r3, [pc, #156]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c40:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	4619      	mov	r1, r3
 8002c84:	4816      	ldr	r0, [pc, #88]	@ (8002ce0 <HAL_I2C_MspInit+0x138>)
 8002c86:	f001 fa27 	bl	80040d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c90:	2312      	movs	r3, #18
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480f      	ldr	r0, [pc, #60]	@ (8002ce4 <HAL_I2C_MspInit+0x13c>)
 8002ca8:	f001 fa16 	bl	80040d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	4a07      	ldr	r2, [pc, #28]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_I2C_MspInit+0x12c>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	3730      	adds	r7, #48	@ 0x30
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40005400 	.word	0x40005400
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40005c00 	.word	0x40005c00
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <HAL_RTC_MspInit+0x60>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d119      	bne.n	8002d3e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f871 	bl	8005e00 <HAL_RCCEx_PeriphCLKConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d24:	f7ff fa90 	bl	8002248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d28:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <HAL_RTC_MspInit+0x64>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	2029      	movs	r0, #41	@ 0x29
 8002d34:	f001 f999 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d38:	2029      	movs	r0, #41	@ 0x29
 8002d3a:	f001 f9b2 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002d3e:	bf00      	nop
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40002800 	.word	0x40002800
 8002d4c:	42470e3c 	.word	0x42470e3c

08002d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d8c <HAL_TIM_Base_MspInit+0x3c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10d      	bne.n	8002d7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_TIM_Base_MspInit+0x40>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <HAL_TIM_Base_MspInit+0x40>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_TIM_Base_MspInit+0x40>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	@ 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a19      	ldr	r2, [pc, #100]	@ (8002e18 <HAL_UART_MspInit+0x84>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d12b      	bne.n	8002e0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a10      	ldr	r2, [pc, #64]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <HAL_UART_MspInit+0x88>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dee:	230c      	movs	r3, #12
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <HAL_UART_MspInit+0x8c>)
 8002e0a:	f001 f965 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40004400 	.word	0x40004400
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000

08002e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <NMI_Handler+0x4>

08002e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <BusFault_Handler+0x4>

08002e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <UsageFault_Handler+0x4>

08002e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7a:	f000 fc29 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e86:	2010      	movs	r0, #16
 8002e88:	f001 faf6 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e94:	2020      	movs	r0, #32
 8002e96:	f001 faef 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002e9e:	f001 faeb 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002eaa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002eae:	f001 fae3 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002eb2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002eb6:	f001 fadf 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <RTC_Alarm_IRQHandler+0x10>)
 8002ec6:	f003 fbff 	bl	80066c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200004ec 	.word	0x200004ec

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f004 f8ca 	bl	800709c <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20018000 	.word	0x20018000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	200005c4 	.word	0x200005c4
 8002f3c:	20000750 	.word	0x20000750

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <hourly_avg_temp>:
DHT_DataTypedef dht_data; // struct to store temp and rh values

/* Calculates average temperature over last hour of readings, or less if beginning of readings
 * Returns: average temperature
 */
static uint16_t hourly_avg_temp(){
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
	uint32_t sum, div;
	uint16_t t_avg, temp;
	sum = 0; div = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
    for(int i=0; i<6; i++){
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	e015      	b.n	8002fa4 <hourly_avg_temp+0x40>
    	temp = temp_1_hr[i];
 8002f78:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <hourly_avg_temp+0x6c>)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f80:	80fb      	strh	r3, [r7, #6]
    	if (temp != 0)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <hourly_avg_temp+0x3a>
    	{
    		sum += temp_1_hr[i];
 8002f88:	4a11      	ldr	r2, [pc, #68]	@ (8002fd0 <hourly_avg_temp+0x6c>)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f90:	461a      	mov	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4413      	add	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    		div++;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
    for(int i=0; i<6; i++){
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	dde6      	ble.n	8002f78 <hourly_avg_temp+0x14>
    	}
    }
    if (div==0) {t_avg=0;}
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <hourly_avg_temp+0x52>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	81fb      	strh	r3, [r7, #14]
 8002fb4:	e004      	b.n	8002fc0 <hourly_avg_temp+0x5c>
    else {t_avg = sum/div;}
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	81fb      	strh	r3, [r7, #14]
    return t_avg;
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200005c8 	.word	0x200005c8

08002fd4 <hourly_avg_rh>:

/* Calculates average rel. humidity over last hour of readings, or less if beginning of readings
 * Returns: average rel. humidity
 */
uint16_t hourly_avg_rh(){
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
	uint32_t sum, div;
	uint16_t rh_avg, rh;
	sum = 0; div = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
	for(int i=0; i<6; i++){
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	e015      	b.n	8003014 <hourly_avg_rh+0x40>
		rh = rh_1_hr[i];
 8002fe8:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <hourly_avg_rh+0x6c>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ff0:	80fb      	strh	r3, [r7, #6]
		if (rh != 0)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <hourly_avg_rh+0x3a>
		{
			sum += rh_1_hr[i];
 8002ff8:	4a11      	ldr	r2, [pc, #68]	@ (8003040 <hourly_avg_rh+0x6c>)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003000:	461a      	mov	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
			div++;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3301      	adds	r3, #1
 800300c:	613b      	str	r3, [r7, #16]
	for(int i=0; i<6; i++){
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b05      	cmp	r3, #5
 8003018:	dde6      	ble.n	8002fe8 <hourly_avg_rh+0x14>
		}
	}
    if (div==0) {rh_avg=0;}
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <hourly_avg_rh+0x52>
 8003020:	2300      	movs	r3, #0
 8003022:	81fb      	strh	r3, [r7, #14]
 8003024:	e004      	b.n	8003030 <hourly_avg_rh+0x5c>
    else {rh_avg = sum/div;}
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	81fb      	strh	r3, [r7, #14]
	return rh_avg;
 8003030:	89fb      	ldrh	r3, [r7, #14]
}
 8003032:	4618      	mov	r0, r3
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200005d4 	.word	0x200005d4

08003044 <get_temp_and_rh_value>:

/* Takes 5 readings of temp and rh and averages them to get value
 * Stores values in temp/rh_1_hr array
 * Called in RTC ISR
 */
void get_temp_and_rh_value(){
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
    float t_sum, rh_sum;
    uint16_t t_avg, rh_avg;
	static uint16_t trh_index = 0;
    t_sum=0; rh_sum=0;
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
    float t_read, rh_read;
    for(int i=0; i<5; i++) {
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e01f      	b.n	800309c <get_temp_and_rh_value+0x58>
    	DHT_GetData (&dht_data);
 800305c:	482c      	ldr	r0, [pc, #176]	@ (8003110 <get_temp_and_rh_value+0xcc>)
 800305e:	f7fe f8a9 	bl	80011b4 <DHT_GetData>
    	t_read = dht_data.Temperature;
 8003062:	4b2b      	ldr	r3, [pc, #172]	@ (8003110 <get_temp_and_rh_value+0xcc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	607b      	str	r3, [r7, #4]
    	rh_read = dht_data.Humidity;
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <get_temp_and_rh_value+0xcc>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	603b      	str	r3, [r7, #0]
        t_sum += t_read;
 800306e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003072:	edd7 7a01 	vldr	s15, [r7, #4]
 8003076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307a:	edc7 7a05 	vstr	s15, [r7, #20]
        rh_sum += rh_read;
 800307e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003082:	edd7 7a00 	vldr	s15, [r7]
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308a:	edc7 7a04 	vstr	s15, [r7, #16]
        HAL_Delay(2000);
 800308e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003092:	f000 fb3d 	bl	8003710 <HAL_Delay>
    for(int i=0; i<5; i++) {
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	dddc      	ble.n	800305c <get_temp_and_rh_value+0x18>
    }
    t_avg = t_sum/5;
 80030a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030a6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80030aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b2:	ee17 3a90 	vmov	r3, s15
 80030b6:	817b      	strh	r3, [r7, #10]
    rh_avg = rh_sum/5;
 80030b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80030bc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80030c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c8:	ee17 3a90 	vmov	r3, s15
 80030cc:	813b      	strh	r3, [r7, #8]
    temp_1_hr[trh_index] = t_avg;
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	4a10      	ldr	r2, [pc, #64]	@ (8003118 <get_temp_and_rh_value+0xd4>)
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    rh_1_hr[trh_index] = rh_avg;
 80030dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <get_temp_and_rh_value+0xd8>)
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    (trh_index == 5) ? (trh_index=0) : (trh_index++); //++ or wrap index
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d103      	bne.n	80030fa <get_temp_and_rh_value+0xb6>
 80030f2:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	e005      	b.n	8003106 <get_temp_and_rh_value+0xc2>
    (trh_index == 5) ? (trh_index=0) : (trh_index++); //++ or wrap index
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <get_temp_and_rh_value+0xd0>)
 8003104:	801a      	strh	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200005e0 	.word	0x200005e0
 8003114:	200005e8 	.word	0x200005e8
 8003118:	200005c8 	.word	0x200005c8
 800311c:	200005d4 	.word	0x200005d4

08003120 <check_temp>:

/* Checks if current average temperature in acceptable range, triggers alert if not
 */
void check_temp(){
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    if (hourly_avg_temp()<user_selected_plant.low_temp){ // too cold
 8003124:	f7ff ff1e 	bl	8002f64 <hourly_avg_temp>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <check_temp+0x4c>)
 800312e:	7c1b      	ldrb	r3, [r3, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d204      	bcs.n	800313e <check_temp+0x1e>
        update_alert(5,1);
 8003134:	2101      	movs	r1, #1
 8003136:	2005      	movs	r0, #5
 8003138:	f000 f8c4 	bl	80032c4 <update_alert>
 800313c:	e003      	b.n	8003146 <check_temp+0x26>
    }
    else {
    	update_alert(5,0);
 800313e:	2100      	movs	r1, #0
 8003140:	2005      	movs	r0, #5
 8003142:	f000 f8bf 	bl	80032c4 <update_alert>
    }
    if (hourly_avg_temp()>user_selected_plant.high_temp){ // too hot
 8003146:	f7ff ff0d 	bl	8002f64 <hourly_avg_temp>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <check_temp+0x4c>)
 8003150:	7c5b      	ldrb	r3, [r3, #17]
 8003152:	429a      	cmp	r2, r3
 8003154:	d904      	bls.n	8003160 <check_temp+0x40>
        update_alert(4,1);
 8003156:	2101      	movs	r1, #1
 8003158:	2004      	movs	r0, #4
 800315a:	f000 f8b3 	bl	80032c4 <update_alert>
    }
    else {
        update_alert(4,0);
    }
}
 800315e:	e003      	b.n	8003168 <check_temp+0x48>
        update_alert(4,0);
 8003160:	2100      	movs	r1, #0
 8003162:	2004      	movs	r0, #4
 8003164:	f000 f8ae 	bl	80032c4 <update_alert>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000080 	.word	0x20000080

08003170 <check_rh>:

/* Checks if RH in acceptable range, triggers alert if not
 */
void check_rh(){
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
    if (hourly_avg_rh()<user_selected_plant.low_humidity){ // too dry
 8003174:	f7ff ff2e 	bl	8002fd4 <hourly_avg_rh>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <check_rh+0x4c>)
 800317e:	7c9b      	ldrb	r3, [r3, #18]
 8003180:	429a      	cmp	r2, r3
 8003182:	d204      	bcs.n	800318e <check_rh+0x1e>
        update_alert(7,1);
 8003184:	2101      	movs	r1, #1
 8003186:	2007      	movs	r0, #7
 8003188:	f000 f89c 	bl	80032c4 <update_alert>
 800318c:	e003      	b.n	8003196 <check_rh+0x26>
    }
    else {
    	update_alert(7,0);
 800318e:	2100      	movs	r1, #0
 8003190:	2007      	movs	r0, #7
 8003192:	f000 f897 	bl	80032c4 <update_alert>
    }
    if (hourly_avg_rh()>user_selected_plant.high_humidity){ // too wet
 8003196:	f7ff ff1d 	bl	8002fd4 <hourly_avg_rh>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <check_rh+0x4c>)
 80031a0:	7cdb      	ldrb	r3, [r3, #19]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d904      	bls.n	80031b0 <check_rh+0x40>
        update_alert(6,1);
 80031a6:	2101      	movs	r1, #1
 80031a8:	2006      	movs	r0, #6
 80031aa:	f000 f88b 	bl	80032c4 <update_alert>
    }
    else {
        update_alert(6,0);
    }
}
 80031ae:	e003      	b.n	80031b8 <check_rh+0x48>
        update_alert(6,0);
 80031b0:	2100      	movs	r1, #0
 80031b2:	2006      	movs	r0, #6
 80031b4:	f000 f886 	bl	80032c4 <update_alert>
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000080 	.word	0x20000080

080031c0 <display_alert>:

/* Displays alert message for specified alert
 * Parameters:
 * - index: specifies which alert to display (see above indices in *alert_array)
 */
static void display_alert(uint16_t index){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
	switch(index){
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b0b      	cmp	r3, #11
 80031ce:	d857      	bhi.n	8003280 <display_alert+0xc0>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <display_alert+0x18>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	08003209 	.word	0x08003209
 80031dc:	08003213 	.word	0x08003213
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	08003227 	.word	0x08003227
 80031e8:	08003231 	.word	0x08003231
 80031ec:	0800323b 	.word	0x0800323b
 80031f0:	08003245 	.word	0x08003245
 80031f4:	0800324f 	.word	0x0800324f
 80031f8:	08003259 	.word	0x08003259
 80031fc:	08003263 	.word	0x08003263
 8003200:	0800326d 	.word	0x0800326d
 8003204:	08003277 	.word	0x08003277
	case 0:
		display_message_left("needs more", "light");
 8003208:	491f      	ldr	r1, [pc, #124]	@ (8003288 <display_alert+0xc8>)
 800320a:	4820      	ldr	r0, [pc, #128]	@ (800328c <display_alert+0xcc>)
 800320c:	f7fe fbfc 	bl	8001a08 <display_message_left>
		break;
 8003210:	e036      	b.n	8003280 <display_alert+0xc0>
	case 1:
		display_message_left("needs less", "light");
 8003212:	491d      	ldr	r1, [pc, #116]	@ (8003288 <display_alert+0xc8>)
 8003214:	481e      	ldr	r0, [pc, #120]	@ (8003290 <display_alert+0xd0>)
 8003216:	f7fe fbf7 	bl	8001a08 <display_message_left>
		break;
 800321a:	e031      	b.n	8003280 <display_alert+0xc0>
	case 2:
		display_message_left("needs brighter", "light");
 800321c:	491a      	ldr	r1, [pc, #104]	@ (8003288 <display_alert+0xc8>)
 800321e:	481d      	ldr	r0, [pc, #116]	@ (8003294 <display_alert+0xd4>)
 8003220:	f7fe fbf2 	bl	8001a08 <display_message_left>
		break;
 8003224:	e02c      	b.n	8003280 <display_alert+0xc0>
	case 3:
		display_message_left("needs less", "bright light");
 8003226:	491c      	ldr	r1, [pc, #112]	@ (8003298 <display_alert+0xd8>)
 8003228:	4819      	ldr	r0, [pc, #100]	@ (8003290 <display_alert+0xd0>)
 800322a:	f7fe fbed 	bl	8001a08 <display_message_left>
		break;
 800322e:	e027      	b.n	8003280 <display_alert+0xc0>
	case 4:
		display_message_left("too hot", "");
 8003230:	491a      	ldr	r1, [pc, #104]	@ (800329c <display_alert+0xdc>)
 8003232:	481b      	ldr	r0, [pc, #108]	@ (80032a0 <display_alert+0xe0>)
 8003234:	f7fe fbe8 	bl	8001a08 <display_message_left>
		break;
 8003238:	e022      	b.n	8003280 <display_alert+0xc0>
	case 5:
		display_message_left("too cold", "");
 800323a:	4918      	ldr	r1, [pc, #96]	@ (800329c <display_alert+0xdc>)
 800323c:	4819      	ldr	r0, [pc, #100]	@ (80032a4 <display_alert+0xe4>)
 800323e:	f7fe fbe3 	bl	8001a08 <display_message_left>
		break;
 8003242:	e01d      	b.n	8003280 <display_alert+0xc0>
	case 6:
		display_message_left("too humid", "");
 8003244:	4915      	ldr	r1, [pc, #84]	@ (800329c <display_alert+0xdc>)
 8003246:	4818      	ldr	r0, [pc, #96]	@ (80032a8 <display_alert+0xe8>)
 8003248:	f7fe fbde 	bl	8001a08 <display_message_left>
		break;
 800324c:	e018      	b.n	8003280 <display_alert+0xc0>
	case 7:
		display_message_left("too dry", "");
 800324e:	4913      	ldr	r1, [pc, #76]	@ (800329c <display_alert+0xdc>)
 8003250:	4816      	ldr	r0, [pc, #88]	@ (80032ac <display_alert+0xec>)
 8003252:	f7fe fbd9 	bl	8001a08 <display_message_left>
		break;
 8003256:	e013      	b.n	8003280 <display_alert+0xc0>
	case 8:
		display_message_left("time to water", "");
 8003258:	4910      	ldr	r1, [pc, #64]	@ (800329c <display_alert+0xdc>)
 800325a:	4815      	ldr	r0, [pc, #84]	@ (80032b0 <display_alert+0xf0>)
 800325c:	f7fe fbd4 	bl	8001a08 <display_message_left>
		break;
 8003260:	e00e      	b.n	8003280 <display_alert+0xc0>
	case 9:
		display_message_left("time to", "fertilize");
 8003262:	4914      	ldr	r1, [pc, #80]	@ (80032b4 <display_alert+0xf4>)
 8003264:	4814      	ldr	r0, [pc, #80]	@ (80032b8 <display_alert+0xf8>)
 8003266:	f7fe fbcf 	bl	8001a08 <display_message_left>
		break;
 800326a:	e009      	b.n	8003280 <display_alert+0xc0>
	case 10:
		display_message_left("time to", "dust");
 800326c:	4913      	ldr	r1, [pc, #76]	@ (80032bc <display_alert+0xfc>)
 800326e:	4812      	ldr	r0, [pc, #72]	@ (80032b8 <display_alert+0xf8>)
 8003270:	f7fe fbca 	bl	8001a08 <display_message_left>
		break;
 8003274:	e004      	b.n	8003280 <display_alert+0xc0>
	case 11:
		display_message_left("battery low", "");
 8003276:	4909      	ldr	r1, [pc, #36]	@ (800329c <display_alert+0xdc>)
 8003278:	4811      	ldr	r0, [pc, #68]	@ (80032c0 <display_alert+0x100>)
 800327a:	f7fe fbc5 	bl	8001a08 <display_message_left>
		break;
 800327e:	bf00      	nop
	}
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0800897c 	.word	0x0800897c
 800328c:	08008984 	.word	0x08008984
 8003290:	08008990 	.word	0x08008990
 8003294:	0800899c 	.word	0x0800899c
 8003298:	080089ac 	.word	0x080089ac
 800329c:	080089bc 	.word	0x080089bc
 80032a0:	080089c0 	.word	0x080089c0
 80032a4:	080089c8 	.word	0x080089c8
 80032a8:	080089d4 	.word	0x080089d4
 80032ac:	080089e0 	.word	0x080089e0
 80032b0:	080089e8 	.word	0x080089e8
 80032b4:	080089f8 	.word	0x080089f8
 80032b8:	08008a04 	.word	0x08008a04
 80032bc:	08008a0c 	.word	0x08008a0c
 80032c0:	08008a14 	.word	0x08008a14

080032c4 <update_alert>:
/* Changes whether alert is active or not
 * Parameters:
 * - index: specifies which alert to set (see above indices in *alert_array)
 * - set: 0 to clear alert, 1 to set alert
 */
void update_alert(uint16_t index, uint16_t set){
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	460a      	mov	r2, r1
 80032ce:	80fb      	strh	r3, [r7, #6]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80bb      	strh	r3, [r7, #4]
    *alert_array[index]=set;
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4a05      	ldr	r2, [pc, #20]	@ (80032ec <update_alert+0x28>)
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	88ba      	ldrh	r2, [r7, #4]
 80032de:	801a      	strh	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	200000b4 	.word	0x200000b4

080032f0 <count_alerts>:

/* Counts number of active alerts and sets alert LED
 * Returns: number of active alerts
 * TODO: unit test GPIO ONLY (tested count is correct)
 */
uint16_t count_alerts(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	uint16_t count = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	80fb      	strh	r3, [r7, #6]
    for (int i=0; i<12; i++){
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	e00c      	b.n	800331a <count_alerts+0x2a>
        if (*alert_array[i]==1){
 8003300:	4a12      	ldr	r2, [pc, #72]	@ (800334c <count_alerts+0x5c>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d102      	bne.n	8003314 <count_alerts+0x24>
            count++;
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	3301      	adds	r3, #1
 8003312:	80fb      	strh	r3, [r7, #6]
    for (int i=0; i<12; i++){
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b0b      	cmp	r3, #11
 800331e:	ddef      	ble.n	8003300 <count_alerts+0x10>
        }
    }
    if(count==0){
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <count_alerts+0x44>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003326:	2200      	movs	r2, #0
 8003328:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800332c:	4808      	ldr	r0, [pc, #32]	@ (8003350 <count_alerts+0x60>)
 800332e:	f001 f86f 	bl	8004410 <HAL_GPIO_WritePin>
 8003332:	e005      	b.n	8003340 <count_alerts+0x50>
    } else {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8003334:	2201      	movs	r2, #1
 8003336:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800333a:	4805      	ldr	r0, [pc, #20]	@ (8003350 <count_alerts+0x60>)
 800333c:	f001 f868 	bl	8004410 <HAL_GPIO_WritePin>
    }
    return count;
 8003340:	88fb      	ldrh	r3, [r7, #6]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200000b4 	.word	0x200000b4
 8003350:	40020800 	.word	0x40020800

08003354 <show_alerts>:

/* Show alert messages, cycle through with button press
 */
uint16_t show_alerts(){
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
    int i = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
    while(1){
        if (count_alerts()==0){
 800335e:	f7ff ffc7 	bl	80032f0 <count_alerts>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <show_alerts+0x24>
        	clear_flags();
 8003368:	f7ff f978 	bl	800265c <clear_flags>
            display_message_left("no alerts", "for now :)");
 800336c:	492e      	ldr	r1, [pc, #184]	@ (8003428 <show_alerts+0xd4>)
 800336e:	482f      	ldr	r0, [pc, #188]	@ (800342c <show_alerts+0xd8>)
 8003370:	f7fe fb4a 	bl	8001a08 <display_message_left>
            return 0;   // exit if no more alerts
 8003374:	2300      	movs	r3, #0
 8003376:	e053      	b.n	8003420 <show_alerts+0xcc>
        } else {
        	if (*alert_array[i]==1){
 8003378:	4a2d      	ldr	r2, [pc, #180]	@ (8003430 <show_alerts+0xdc>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d133      	bne.n	80033ee <show_alerts+0x9a>
        		clear_flags();
 8003386:	f7ff f969 	bl	800265c <clear_flags>
        		display_alert(i);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	b29b      	uxth	r3, r3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff16 	bl	80031c0 <display_alert>
        		if (*flags[2]){ // if "clear alert" pressed
 8003394:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <show_alerts+0xe0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <show_alerts+0x60>
        			clear_flags();
 800339e:	f7ff f95d 	bl	800265c <clear_flags>
        			update_alert(i,0); // clear current alert
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff8b 	bl	80032c4 <update_alert>
        			i++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3301      	adds	r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
        		}
        		if (*flags[4]){ // if "next" pressed
 80033b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003434 <show_alerts+0xe0>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <show_alerts+0x7c>
        			if(i==11){i=0;} // wrap to first index
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0b      	cmp	r3, #11
 80033c2:	d102      	bne.n	80033ca <show_alerts+0x76>
 80033c4:	2300      	movs	r3, #0
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	e002      	b.n	80033d0 <show_alerts+0x7c>
        			else {i++;}
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
        		}
        		if (*flags[3]){ // if "back" pressed
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <show_alerts+0xe0>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0c1      	beq.n	800335e <show_alerts+0xa>
        			if(i==0) {i=11;}  // wrap to last index
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <show_alerts+0x92>
 80033e0:	230b      	movs	r3, #11
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	e7bb      	b.n	800335e <show_alerts+0xa>
        			else {i--;}
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	e7b7      	b.n	800335e <show_alerts+0xa>
        		}
        	} else if(*flags[4]) {
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <show_alerts+0xe0>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <show_alerts+0xb8>
        		if(i<12){i++;}
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0b      	cmp	r3, #11
 80033fc:	dc03      	bgt.n	8003406 <show_alerts+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3301      	adds	r3, #1
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	e7ab      	b.n	800335e <show_alerts+0xa>
        		else{i=0;}
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	e7a8      	b.n	800335e <show_alerts+0xa>
        	} else{
        		if(i>0){i--;}
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dd03      	ble.n	800341a <show_alerts+0xc6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3b01      	subs	r3, #1
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	e7a1      	b.n	800335e <show_alerts+0xa>
        		else{i=11;}
 800341a:	230b      	movs	r3, #11
 800341c:	607b      	str	r3, [r7, #4]
        if (count_alerts()==0){
 800341e:	e79e      	b.n	800335e <show_alerts+0xa>
        	}
        }
    }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08008a20 	.word	0x08008a20
 800342c:	08008a2c 	.word	0x08008a2c
 8003430:	200000b4 	.word	0x200000b4
 8003434:	20000098 	.word	0x20000098

08003438 <display_toggle>:

/* Toggles display_is_on indicator
 */
void display_toggle(){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
    display_is_on = (!display_is_on);
 800343c:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <display_toggle+0x38>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <display_toggle+0x38>)
 8003458:	701a      	strb	r2, [r3, #0]
    if (display_is_on){display_on();}
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <display_toggle+0x38>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <display_toggle+0x30>
 8003462:	f7fe fb0d 	bl	8001a80 <display_on>
    else {display_off();}
}
 8003466:	e001      	b.n	800346c <display_toggle+0x34>
    else {display_off();}
 8003468:	f7fe fb02 	bl	8001a70 <display_off>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200000b0 	.word	0x200000b0

08003474 <_write_register>:
#define REG_POWER_SAVING_PSM_2  (0x01 << 1)
#define REG_POWER_SAVING_PSM_3  (0x02 << 1)
#define REG_POWER_SAVING_PSM_4  (0x03 << 1)
#define REG_POWER_SAVING_ENABLE  0x01

static uint32_t _write_register(veml7700 *veml, uint8_t reg, uint16_t value){
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
 8003480:	4613      	mov	r3, r2
 8003482:	803b      	strh	r3, [r7, #0]
  uint8_t payload[3] = {reg, value & 0xff, value >> 8};
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	733b      	strb	r3, [r7, #12]
 8003488:	883b      	ldrh	r3, [r7, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	737b      	strb	r3, [r7, #13]
 800348e:	883b      	ldrh	r3, [r7, #0]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	b29b      	uxth	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	73bb      	strb	r3, [r7, #14]

  return HAL_I2C_Master_Transmit(veml->i2c, veml->write_addr, &payload[0], 3, 500);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f107 020c 	add.w	r2, r7, #12
 80034a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2303      	movs	r3, #3
 80034ae:	f001 f93f 	bl	8004730 <HAL_I2C_Master_Transmit>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_read_register>:

static uint16_t _read_register(veml7700 *veml, uint8_t reg){
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  uint8_t payload[2] = {0};
 80034c8:	2300      	movs	r3, #0
 80034ca:	813b      	strh	r3, [r7, #8]

  int err = HAL_I2C_Mem_Read(veml->i2c, veml->write_addr, reg, 1, &payload[0], 2, 500);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	795b      	ldrb	r3, [r3, #5]
 80034d4:	4619      	mov	r1, r3
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	2302      	movs	r3, #2
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2301      	movs	r3, #1
 80034ec:	f001 fa1e 	bl	800492c <HAL_I2C_Mem_Read>
 80034f0:	4603      	mov	r3, r0
 80034f2:	60fb      	str	r3, [r7, #12]
  if (err != HAL_OK) {
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <_read_register+0x42>
    return 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e007      	b.n	800350e <_read_register+0x52>
  }
  return (payload[1] << 8) | payload[0];
 80034fe:	7a7b      	ldrb	r3, [r7, #9]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	b21a      	sxth	r2, r3
 8003504:	7a3b      	ldrb	r3, [r7, #8]
 8003506:	b21b      	sxth	r3, r3
 8003508:	4313      	orrs	r3, r2
 800350a:	b21b      	sxth	r3, r3
 800350c:	b29b      	uxth	r3, r3
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <veml7700_init>:

uint32_t veml7700_init(veml7700 *veml, I2C_HandleTypeDef *i2c, uint8_t addr){
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  veml->read_addr  = (addr << 1) | 0x01;
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	b25b      	sxtb	r3, r3
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	b25b      	sxtb	r3, r3
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	711a      	strb	r2, [r3, #4]
  veml->write_addr = (addr << 1);
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	715a      	strb	r2, [r3, #5]
  veml->i2c        = i2c;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	601a      	str	r2, [r3, #0]

  // Reset VEML configuration (in order to check device)
  return _write_register(veml, REG_ALS_CONF, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff92 	bl	8003474 <_write_register>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <veml7700_power_on>:

uint32_t veml7700_power_on(veml7700 *veml){
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  // Get current config and clear shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffa9 	bl	80034bc <_read_register>
 800356a:	4603      	mov	r3, r0
 800356c:	81fb      	strh	r3, [r7, #14]
  config &= ~REG_ALS_CONF_SHUTDOWN;
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	81fb      	strh	r3, [r7, #14]

  return _write_register(veml, REG_ALS_CONF, config);
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	461a      	mov	r2, r3
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff79 	bl	8003474 <_write_register>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <veml7700_shutdown>:

uint32_t veml7700_shutdown(veml7700 *veml){
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  // Get current config and set shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8003594:	2100      	movs	r1, #0
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ff90 	bl	80034bc <_read_register>
 800359c:	4603      	mov	r3, r0
 800359e:	81fb      	strh	r3, [r7, #14]
  config |= REG_ALS_CONF_SHUTDOWN;
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	81fb      	strh	r3, [r7, #14]

  return _write_register(veml, REG_ALS_CONF, config);
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	461a      	mov	r2, r3
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff60 	bl	8003474 <_write_register>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <veml7700_read_als>:
uint16_t veml7700_get_als_gain(veml7700 *veml){
  uint16_t config = _read_register(veml, REG_ALS_CONF);
  return (config & REG_ALS_CONF_GAIN_4TH) >> 11;
}

uint16_t veml7700_read_als(veml7700 *veml){
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return _read_register(veml, REG_ALS);
 80035c6:	2104      	movs	r1, #4
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff77 	bl	80034bc <_read_register>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003610 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035dc:	f7ff fcb0 	bl	8002f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035e0:	480c      	ldr	r0, [pc, #48]	@ (8003614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035e2:	490d      	ldr	r1, [pc, #52]	@ (8003618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e8:	e002      	b.n	80035f0 <LoopCopyDataInit>

080035ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ee:	3304      	adds	r3, #4

080035f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f4:	d3f9      	bcc.n	80035ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035fc:	e001      	b.n	8003602 <LoopFillZerobss>

080035fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003600:	3204      	adds	r2, #4

08003602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003604:	d3fb      	bcc.n	80035fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003606:	f003 fd4f 	bl	80070a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360a:	f7fe fa3f 	bl	8001a8c <main>
  bx  lr    
 800360e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003618:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800361c:	08008ac8 	.word	0x08008ac8
  ldr r2, =_sbss
 8003620:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003624:	20000750 	.word	0x20000750

08003628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC_IRQHandler>
	...

0800362c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_Init+0x40>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_Init+0x40>)
 8003636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800363a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_Init+0x40>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_Init+0x40>)
 8003642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_Init+0x40>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_Init+0x40>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f000 fcfd 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	2000      	movs	r0, #0
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f7ff fa36 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00

08003670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fd15 	bl	80040be <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f000 fcdd 	bl	800406a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	@ (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200000ac 	.word	0x200000ac
 80036c8:	200000e8 	.word	0x200000e8
 80036cc:	200000e4 	.word	0x200000e4

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200000e8 	.word	0x200000e8
 80036f4:	20000604 	.word	0x20000604

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000604 	.word	0x20000604

08003710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_Delay+0x44>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200000e8 	.word	0x200000e8

08003758 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e033      	b.n	80037d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff f9d2 	bl	8002b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800379e:	f023 0302 	bic.w	r3, r3, #2
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa86 	bl	8003cbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80037c6:	e001      	b.n	80037cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_Start+0x1a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e097      	b.n	800392a <HAL_ADC_Start+0x14a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d018      	beq.n	8003842 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003820:	4b45      	ldr	r3, [pc, #276]	@ (8003938 <HAL_ADC_Start+0x158>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a45      	ldr	r2, [pc, #276]	@ (800393c <HAL_ADC_Start+0x15c>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9a      	lsrs	r2, r3, #18
 800382c:	4613      	mov	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003834:	e002      	b.n	800383c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3b01      	subs	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f9      	bne.n	8003836 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d15f      	bne.n	8003910 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800387a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	d106      	bne.n	800389e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f023 0206 	bic.w	r2, r3, #6
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
 800389c:	e002      	b.n	80038a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ac:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_ADC_Start+0x160>)
 80038ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80038b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d129      	bne.n	8003928 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e020      	b.n	8003928 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a16      	ldr	r2, [pc, #88]	@ (8003944 <HAL_ADC_Start+0x164>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d11b      	bne.n	8003928 <HAL_ADC_Start+0x148>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d114      	bne.n	8003928 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	e00b      	b.n	8003928 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	200000ac 	.word	0x200000ac
 800393c:	431bde83 	.word	0x431bde83
 8003940:	40012300 	.word	0x40012300
 8003944:	40012000 	.word	0x40012000

08003948 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003964:	d113      	bne.n	800398e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003974:	d10b      	bne.n	800398e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e063      	b.n	8003a56 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800398e:	f7ff feb3 	bl	80036f8 <HAL_GetTick>
 8003992:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003994:	e021      	b.n	80039da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d01d      	beq.n	80039da <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x6c>
 80039a4:	f7ff fea8 	bl	80036f8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d212      	bcs.n	80039da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d00b      	beq.n	80039da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e03d      	b.n	8003a56 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d1d6      	bne.n	8003996 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0212 	mvn.w	r2, #18
 80039f0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d123      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11f      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d111      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e105      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x228>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d925      	bls.n	8003af0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68d9      	ldr	r1, [r3, #12]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b1e      	subs	r3, #30
 8003aba:	2207      	movs	r2, #7
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68d9      	ldr	r1, [r3, #12]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4403      	add	r3, r0
 8003ae2:	3b1e      	subs	r3, #30
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e022      	b.n	8003b36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6919      	ldr	r1, [r3, #16]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	2207      	movs	r2, #7
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	400a      	ands	r2, r1
 8003b12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6919      	ldr	r1, [r3, #16]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4403      	add	r3, r0
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d824      	bhi.n	8003b88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3b05      	subs	r3, #5
 8003b50:	221f      	movs	r2, #31
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	3b05      	subs	r3, #5
 8003b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b86:	e04c      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d824      	bhi.n	8003bda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b23      	subs	r3, #35	@ 0x23
 8003ba2:	221f      	movs	r2, #31
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	400a      	ands	r2, r1
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	3b23      	subs	r3, #35	@ 0x23
 8003bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bd8:	e023      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	3b41      	subs	r3, #65	@ 0x41
 8003bec:	221f      	movs	r2, #31
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4618      	mov	r0, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	3b41      	subs	r3, #65	@ 0x41
 8003c16:	fa00 f203 	lsl.w	r2, r0, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c22:	4b22      	ldr	r3, [pc, #136]	@ (8003cac <HAL_ADC_ConfigChannel+0x234>)
 8003c24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x238>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1cc>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b12      	cmp	r3, #18
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a19      	ldr	r2, [pc, #100]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x238>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d123      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x21e>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d003      	beq.n	8003c5e <HAL_ADC_ConfigChannel+0x1e6>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b11      	cmp	r3, #17
 8003c5c:	d11b      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d111      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x23c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a10      	ldr	r2, [pc, #64]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x240>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	0c9a      	lsrs	r2, r3, #18
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c88:	e002      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f9      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40012300 	.word	0x40012300
 8003cb0:	40012000 	.word	0x40012000
 8003cb4:	200000ac 	.word	0x200000ac
 8003cb8:	431bde83 	.word	0x431bde83

08003cbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc4:	4b79      	ldr	r3, [pc, #484]	@ (8003eac <ADC_Init+0x1f0>)
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4e:	4a58      	ldr	r2, [pc, #352]	@ (8003eb0 <ADC_Init+0x1f4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6899      	ldr	r1, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6899      	ldr	r1, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e00f      	b.n	8003dba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003db8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0202 	bic.w	r2, r2, #2
 8003dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6899      	ldr	r1, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7e1b      	ldrb	r3, [r3, #24]
 8003dd4:	005a      	lsls	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	3b01      	subs	r3, #1
 8003e14:	035a      	lsls	r2, r3, #13
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	e007      	b.n	8003e30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	051a      	lsls	r2, r3, #20
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6899      	ldr	r1, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e72:	025a      	lsls	r2, r3, #9
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	029a      	lsls	r2, r3, #10
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40012300 	.word	0x40012300
 8003eb0:	0f000001 	.word	0x0f000001

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db0b      	blt.n	8003f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <__NVIC_EnableIRQ+0x38>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db0a      	blt.n	8003f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	490c      	ldr	r1, [pc, #48]	@ (8003fa0 <__NVIC_SetPriority+0x4c>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	440b      	add	r3, r1
 8003f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f7c:	e00a      	b.n	8003f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4908      	ldr	r1, [pc, #32]	@ (8003fa4 <__NVIC_SetPriority+0x50>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	440b      	add	r3, r1
 8003f92:	761a      	strb	r2, [r3, #24]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	@ 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f1c3 0307 	rsb	r3, r3, #7
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf28      	it	cs
 8003fc6:	2304      	movcs	r3, #4
 8003fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d902      	bls.n	8003fd8 <NVIC_EncodePriority+0x30>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3b03      	subs	r3, #3
 8003fd6:	e000      	b.n	8003fda <NVIC_EncodePriority+0x32>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	401a      	ands	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	43d9      	mvns	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	4313      	orrs	r3, r2
         );
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004020:	d301      	bcc.n	8004026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <SysTick_Config+0x40>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402e:	210f      	movs	r1, #15
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f7ff ff8e 	bl	8003f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <SysTick_Config+0x40>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <SysTick_Config+0x40>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff29 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff3e 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff8e 	bl	8003fa8 <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5d 	bl	8003f54 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff31 	bl	8003f18 <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa2 	bl	8004010 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	@ 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e159      	b.n	80043a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8148 	bne.w	80043a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d005      	beq.n	800412a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004126:	2b02      	cmp	r3, #2
 8004128:	d130      	bne.n	800418c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0201 	and.w	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d017      	beq.n	80041c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a2 	beq.w	80043a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b57      	ldr	r3, [pc, #348]	@ (80043c0 <HAL_GPIO_Init+0x2e8>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	4a56      	ldr	r2, [pc, #344]	@ (80043c0 <HAL_GPIO_Init+0x2e8>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800426c:	6453      	str	r3, [r2, #68]	@ 0x44
 800426e:	4b54      	ldr	r3, [pc, #336]	@ (80043c0 <HAL_GPIO_Init+0x2e8>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427a:	4a52      	ldr	r2, [pc, #328]	@ (80043c4 <HAL_GPIO_Init+0x2ec>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a49      	ldr	r2, [pc, #292]	@ (80043c8 <HAL_GPIO_Init+0x2f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x202>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a48      	ldr	r2, [pc, #288]	@ (80043cc <HAL_GPIO_Init+0x2f4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x1fe>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a47      	ldr	r2, [pc, #284]	@ (80043d0 <HAL_GPIO_Init+0x2f8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x1fa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a46      	ldr	r2, [pc, #280]	@ (80043d4 <HAL_GPIO_Init+0x2fc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x1f6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a45      	ldr	r2, [pc, #276]	@ (80043d8 <HAL_GPIO_Init+0x300>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x1f2>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e008      	b.n	80042dc <HAL_GPIO_Init+0x204>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x204>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e004      	b.n	80042dc <HAL_GPIO_Init+0x204>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_Init+0x204>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_GPIO_Init+0x204>
 80042da:	2300      	movs	r3, #0
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	f002 0203 	and.w	r2, r2, #3
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	4093      	lsls	r3, r2
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ec:	4935      	ldr	r1, [pc, #212]	@ (80043c4 <HAL_GPIO_Init+0x2ec>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	3302      	adds	r3, #2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fa:	4b38      	ldr	r3, [pc, #224]	@ (80043dc <HAL_GPIO_Init+0x304>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800431e:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <HAL_GPIO_Init+0x304>)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <HAL_GPIO_Init+0x304>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <HAL_GPIO_Init+0x304>)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800434e:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <HAL_GPIO_Init+0x304>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004372:	4a1a      	ldr	r2, [pc, #104]	@ (80043dc <HAL_GPIO_Init+0x304>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004378:	4b18      	ldr	r3, [pc, #96]	@ (80043dc <HAL_GPIO_Init+0x304>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439c:	4a0f      	ldr	r2, [pc, #60]	@ (80043dc <HAL_GPIO_Init+0x304>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	f67f aea2 	bls.w	80040f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020400 	.word	0x40020400
 80043d0:	40020800 	.word	0x40020800
 80043d4:	40020c00 	.word	0x40020c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40013c00 	.word	0x40013c00

080043e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	887b      	ldrh	r3, [r7, #2]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	e001      	b.n	8004402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
 800441c:	4613      	mov	r3, r2
 800441e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004420:	787b      	ldrb	r3, [r7, #1]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800442c:	e003      	b.n	8004436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	041a      	lsls	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	619a      	str	r2, [r3, #24]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4013      	ands	r3, r2
 800445a:	041a      	lsls	r2, r3, #16
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	43d9      	mvns	r1, r3
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	400b      	ands	r3, r1
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	619a      	str	r2, [r3, #24]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800448e:	4a05      	ldr	r2, [pc, #20]	@ (80044a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fe66 	bl	8002168 <HAL_GPIO_EXTI_Callback>
  }
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40013c00 	.word	0x40013c00

080044a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e12b      	b.n	8004712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fb6a 	bl	8002ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800450c:	f001 fc50 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a81      	ldr	r2, [pc, #516]	@ (800471c <HAL_I2C_Init+0x274>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d807      	bhi.n	800452c <HAL_I2C_Init+0x84>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a80      	ldr	r2, [pc, #512]	@ (8004720 <HAL_I2C_Init+0x278>)
 8004520:	4293      	cmp	r3, r2
 8004522:	bf94      	ite	ls
 8004524:	2301      	movls	r3, #1
 8004526:	2300      	movhi	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e006      	b.n	800453a <HAL_I2C_Init+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a7d      	ldr	r2, [pc, #500]	@ (8004724 <HAL_I2C_Init+0x27c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0e7      	b.n	8004712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a78      	ldr	r2, [pc, #480]	@ (8004728 <HAL_I2C_Init+0x280>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0c9b      	lsrs	r3, r3, #18
 800454c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a6a      	ldr	r2, [pc, #424]	@ (800471c <HAL_I2C_Init+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d802      	bhi.n	800457c <HAL_I2C_Init+0xd4>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3301      	adds	r3, #1
 800457a:	e009      	b.n	8004590 <HAL_I2C_Init+0xe8>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_I2C_Init+0x284>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	3301      	adds	r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	495c      	ldr	r1, [pc, #368]	@ (800471c <HAL_I2C_Init+0x274>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d819      	bhi.n	80045e4 <HAL_I2C_Init+0x13c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e59      	subs	r1, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045c4:	400b      	ands	r3, r1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_I2C_Init+0x138>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1e59      	subs	r1, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045de:	e051      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e0:	2304      	movs	r3, #4
 80045e2:	e04f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <HAL_I2C_Init+0x168>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1e58      	subs	r0, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	440b      	add	r3, r1
 80045fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e012      	b.n	8004636 <HAL_I2C_Init+0x18e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Init+0x196>
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10e      	bne.n	8004664 <HAL_I2C_Init+0x1bc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e58      	subs	r0, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	440b      	add	r3, r1
 8004654:	fbb0 f3f3 	udiv	r3, r0, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	e00f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	0099      	lsls	r1, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	fbb0 f3f3 	udiv	r3, r0, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	6809      	ldr	r1, [r1, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6911      	ldr	r1, [r2, #16]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	000186a0 	.word	0x000186a0
 8004720:	001e847f 	.word	0x001e847f
 8004724:	003d08ff 	.word	0x003d08ff
 8004728:	431bde83 	.word	0x431bde83
 800472c:	10624dd3 	.word	0x10624dd3

08004730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	461a      	mov	r2, r3
 800473c:	460b      	mov	r3, r1
 800473e:	817b      	strh	r3, [r7, #10]
 8004740:	4613      	mov	r3, r2
 8004742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7fe ffd8 	bl	80036f8 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	f040 80e0 	bne.w	8004918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2319      	movs	r3, #25
 800475e:	2201      	movs	r2, #1
 8004760:	4970      	ldr	r1, [pc, #448]	@ (8004924 <HAL_I2C_Master_Transmit+0x1f4>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fc7e 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	e0d3      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_I2C_Master_Transmit+0x50>
 800477c:	2302      	movs	r3, #2
 800477e:	e0cc      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d007      	beq.n	80047a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2221      	movs	r2, #33	@ 0x21
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2210      	movs	r2, #16
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	893a      	ldrh	r2, [r7, #8]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a50      	ldr	r2, [pc, #320]	@ (8004928 <HAL_I2C_Master_Transmit+0x1f8>)
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047e8:	8979      	ldrh	r1, [r7, #10]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 face 	bl	8004d90 <I2C_MasterRequestWrite>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e08d      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004814:	e066      	b.n	80048e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fd3c 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2b04      	cmp	r3, #4
 800482c:	d107      	bne.n	800483e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06b      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d11b      	bne.n	80048b8 <HAL_I2C_Master_Transmit+0x188>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d017      	beq.n	80048b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	6a39      	ldr	r1, [r7, #32]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fd33 	bl	8005328 <I2C_WaitOnBTFFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d107      	bne.n	80048e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e01a      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d194      	bne.n	8004816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	00100002 	.word	0x00100002
 8004928:	ffff0000 	.word	0xffff0000

0800492c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	@ 0x30
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	461a      	mov	r2, r3
 800493a:	4603      	mov	r3, r0
 800493c:	817b      	strh	r3, [r7, #10]
 800493e:	460b      	mov	r3, r1
 8004940:	813b      	strh	r3, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004946:	f7fe fed7 	bl	80036f8 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	f040 8214 	bne.w	8004d82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2319      	movs	r3, #25
 8004960:	2201      	movs	r2, #1
 8004962:	497b      	ldr	r1, [pc, #492]	@ (8004b50 <HAL_I2C_Mem_Read+0x224>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb7d 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	e207      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_I2C_Mem_Read+0x56>
 800497e:	2302      	movs	r3, #2
 8004980:	e200      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d007      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2222      	movs	r2, #34	@ 0x22
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2240      	movs	r2, #64	@ 0x40
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80049d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b54 <HAL_I2C_Mem_Read+0x228>)
 80049e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ea:	88f8      	ldrh	r0, [r7, #6]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	8979      	ldrh	r1, [r7, #10]
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4603      	mov	r3, r0
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa4a 	bl	8004e94 <I2C_RequestMemoryRead>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e1bc      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d113      	bne.n	8004a3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a12:	2300      	movs	r3, #0
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	623b      	str	r3, [r7, #32]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e190      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d11b      	bne.n	8004a7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e170      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d11b      	bne.n	8004aba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	e150      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ad0:	e144      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	f200 80f1 	bhi.w	8004cbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d123      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fc65 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e145      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b2a:	e117      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d14e      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4906      	ldr	r1, [pc, #24]	@ (8004b58 <HAL_I2C_Mem_Read+0x22c>)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fa90 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e11a      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
 8004b4e:	bf00      	nop
 8004b50:	00100002 	.word	0x00100002
 8004b54:	ffff0000 	.word	0xffff0000
 8004b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bd0:	e0c4      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2200      	movs	r2, #0
 8004bda:	496c      	ldr	r1, [pc, #432]	@ (8004d8c <HAL_I2C_Mem_Read+0x460>)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fa41 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0cb      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c34:	2200      	movs	r2, #0
 8004c36:	4955      	ldr	r1, [pc, #340]	@ (8004d8c <HAL_I2C_Mem_Read+0x460>)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fa13 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e09d      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cbc:	e04e      	b.n	8004d5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fb78 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e058      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d124      	bne.n	8004d5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d107      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f47f aeb6 	bne.w	8004ad2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3728      	adds	r7, #40	@ 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	00010004 	.word	0x00010004

08004d90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d006      	beq.n	8004dba <I2C_MasterRequestWrite+0x2a>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d003      	beq.n	8004dba <I2C_MasterRequestWrite+0x2a>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db8:	d108      	bne.n	8004dcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e00b      	b.n	8004de4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	2b12      	cmp	r3, #18
 8004dd2:	d107      	bne.n	8004de4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f937 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0a:	d103      	bne.n	8004e14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e035      	b.n	8004e84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e20:	d108      	bne.n	8004e34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e22:	897b      	ldrh	r3, [r7, #10]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e30:	611a      	str	r2, [r3, #16]
 8004e32:	e01b      	b.n	8004e6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e34:	897b      	ldrh	r3, [r7, #10]
 8004e36:	11db      	asrs	r3, r3, #7
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 0306 	and.w	r3, r3, #6
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f063 030f 	orn	r3, r3, #15
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	490e      	ldr	r1, [pc, #56]	@ (8004e8c <I2C_MasterRequestWrite+0xfc>)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f980 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e010      	b.n	8004e84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4907      	ldr	r1, [pc, #28]	@ (8004e90 <I2C_MasterRequestWrite+0x100>)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f970 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	00010008 	.word	0x00010008
 8004e90:	00010002 	.word	0x00010002

08004e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	817b      	strh	r3, [r7, #10]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	813b      	strh	r3, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f8c2 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef4:	d103      	bne.n	8004efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0aa      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	4952      	ldr	r1, [pc, #328]	@ (8005060 <I2C_RequestMemoryRead+0x1cc>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f91d 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e097      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f40:	6a39      	ldr	r1, [r7, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9a8 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e076      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e021      	b.n	8004fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f982 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d107      	bne.n	8004fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e050      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb6:	893b      	ldrh	r3, [r7, #8]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	6a39      	ldr	r1, [r7, #32]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f967 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d107      	bne.n	8004fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e035      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2200      	movs	r2, #0
 8005004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f82b 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005022:	d103      	bne.n	800502c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e013      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	4906      	ldr	r1, [pc, #24]	@ (8005060 <I2C_RequestMemoryRead+0x1cc>)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f886 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00010002 	.word	0x00010002

08005064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005074:	e048      	b.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d044      	beq.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fe fb3b 	bl	80036f8 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d139      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10d      	bne.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	43da      	mvns	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	e00c      	b.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d116      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e023      	b.n	8005150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10d      	bne.n	800512e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	43da      	mvns	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4013      	ands	r3, r2
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	e00c      	b.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	43da      	mvns	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	429a      	cmp	r2, r3
 800514c:	d093      	beq.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005166:	e071      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d123      	bne.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e067      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d041      	beq.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	f7fe fa96 	bl	80036f8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d136      	bne.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e00b      	b.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	43da      	mvns	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e021      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d10c      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	43da      	mvns	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4013      	ands	r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e00b      	b.n	8005288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf14      	ite	ne
 8005282:	2301      	movne	r3, #1
 8005284:	2300      	moveq	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	f47f af6d 	bne.w	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a4:	e034      	b.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8e3 	bl	8005472 <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e034      	b.n	8005320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d028      	beq.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe fa1b 	bl	80036f8 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11d      	bne.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d016      	beq.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531a:	2b80      	cmp	r3, #128	@ 0x80
 800531c:	d1c3      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005334:	e034      	b.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f89b 	bl	8005472 <I2C_IsAcknowledgeFailed>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e034      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d028      	beq.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe f9d3 	bl	80036f8 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11d      	bne.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d016      	beq.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d1c3      	bne.n	8005336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e049      	b.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d119      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e030      	b.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fe f976 	bl	80036f8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11d      	bne.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005428:	2b40      	cmp	r3, #64	@ 0x40
 800542a:	d016      	beq.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e007      	b.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b40      	cmp	r3, #64	@ 0x40
 8005466:	d1ae      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005488:	d11b      	bne.n	80054c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005492:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e267      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d075      	beq.n	80055da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054ee:	4b88      	ldr	r3, [pc, #544]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d00c      	beq.n	8005514 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fa:	4b85      	ldr	r3, [pc, #532]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005502:	2b08      	cmp	r3, #8
 8005504:	d112      	bne.n	800552c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005506:	4b82      	ldr	r3, [pc, #520]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005512:	d10b      	bne.n	800552c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	4b7e      	ldr	r3, [pc, #504]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05b      	beq.n	80055d8 <HAL_RCC_OscConfig+0x108>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d157      	bne.n	80055d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e242      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005534:	d106      	bne.n	8005544 <HAL_RCC_OscConfig+0x74>
 8005536:	4b76      	ldr	r3, [pc, #472]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a75      	ldr	r2, [pc, #468]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e01d      	b.n	8005580 <HAL_RCC_OscConfig+0xb0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x98>
 800554e:	4b70      	ldr	r3, [pc, #448]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6f      	ldr	r2, [pc, #444]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4b6d      	ldr	r3, [pc, #436]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6c      	ldr	r2, [pc, #432]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0xb0>
 8005568:	4b69      	ldr	r3, [pc, #420]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a68      	ldr	r2, [pc, #416]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800556e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b66      	ldr	r3, [pc, #408]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a65      	ldr	r2, [pc, #404]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800557a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800557e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d013      	beq.n	80055b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fe f8b6 	bl	80036f8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005590:	f7fe f8b2 	bl	80036f8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	@ 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e207      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0xc0>
 80055ae:	e014      	b.n	80055da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fe f8a2 	bl	80036f8 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fe f89e 	bl	80036f8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	@ 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1f3      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	4b51      	ldr	r3, [pc, #324]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0xe8>
 80055d6:	e000      	b.n	80055da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d063      	beq.n	80056ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b47      	ldr	r3, [pc, #284]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d11c      	bne.n	8005638 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fe:	4b44      	ldr	r3, [pc, #272]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	4b41      	ldr	r3, [pc, #260]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x152>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e1c7      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005622:	4b3b      	ldr	r3, [pc, #236]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4937      	ldr	r1, [pc, #220]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	e03a      	b.n	80056ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d020      	beq.n	8005682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005640:	4b34      	ldr	r3, [pc, #208]	@ (8005714 <HAL_RCC_OscConfig+0x244>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe f857 	bl	80036f8 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564e:	f7fe f853 	bl	80036f8 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1a8      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005660:	4b2b      	ldr	r3, [pc, #172]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566c:	4b28      	ldr	r3, [pc, #160]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4925      	ldr	r1, [pc, #148]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005682:	4b24      	ldr	r3, [pc, #144]	@ (8005714 <HAL_RCC_OscConfig+0x244>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe f836 	bl	80036f8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005690:	f7fe f832 	bl	80036f8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e187      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d036      	beq.n	8005728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c2:	4b15      	ldr	r3, [pc, #84]	@ (8005718 <HAL_RCC_OscConfig+0x248>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fe f816 	bl	80036f8 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fe f812 	bl	80036f8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e167      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <HAL_RCC_OscConfig+0x240>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x200>
 80056ee:	e01b      	b.n	8005728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f0:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <HAL_RCC_OscConfig+0x248>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f6:	f7fd ffff 	bl	80036f8 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	e00e      	b.n	800571c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fe:	f7fd fffb 	bl	80036f8 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d907      	bls.n	800571c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e150      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
 8005710:	40023800 	.word	0x40023800
 8005714:	42470000 	.word	0x42470000
 8005718:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	4b88      	ldr	r3, [pc, #544]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800571e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ea      	bne.n	80056fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8097 	beq.w	8005864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573a:	4b81      	ldr	r3, [pc, #516]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	4b7d      	ldr	r3, [pc, #500]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	4a7c      	ldr	r2, [pc, #496]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	@ 0x40
 8005756:	4b7a      	ldr	r3, [pc, #488]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b77      	ldr	r3, [pc, #476]	@ (8005944 <HAL_RCC_OscConfig+0x474>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d118      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005772:	4b74      	ldr	r3, [pc, #464]	@ (8005944 <HAL_RCC_OscConfig+0x474>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a73      	ldr	r2, [pc, #460]	@ (8005944 <HAL_RCC_OscConfig+0x474>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577e:	f7fd ffbb 	bl	80036f8 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fd ffb7 	bl	80036f8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e10c      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	4b6a      	ldr	r3, [pc, #424]	@ (8005944 <HAL_RCC_OscConfig+0x474>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x2ea>
 80057ac:	4b64      	ldr	r3, [pc, #400]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b0:	4a63      	ldr	r2, [pc, #396]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b8:	e01c      	b.n	80057f4 <HAL_RCC_OscConfig+0x324>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x30c>
 80057c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0x324>
 80057dc:	4b58      	ldr	r3, [pc, #352]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e0:	4a57      	ldr	r2, [pc, #348]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e8:	4b55      	ldr	r3, [pc, #340]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	4a54      	ldr	r2, [pc, #336]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d015      	beq.n	8005828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fd ff7c 	bl	80036f8 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005802:	e00a      	b.n	800581a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fd ff78 	bl	80036f8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0cb      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	4b49      	ldr	r3, [pc, #292]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ee      	beq.n	8005804 <HAL_RCC_OscConfig+0x334>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005828:	f7fd ff66 	bl	80036f8 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582e:	e00a      	b.n	8005846 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7fd ff62 	bl	80036f8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0b5      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	4b3e      	ldr	r3, [pc, #248]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ee      	bne.n	8005830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005858:	4b39      	ldr	r3, [pc, #228]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	4a38      	ldr	r2, [pc, #224]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005862:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80a1 	beq.w	80059b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800586e:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b08      	cmp	r3, #8
 8005878:	d05c      	beq.n	8005934 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d141      	bne.n	8005906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <HAL_RCC_OscConfig+0x478>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd ff36 	bl	80036f8 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fd ff32 	bl	80036f8 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e087      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b27      	ldr	r3, [pc, #156]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	491b      	ldr	r1, [pc, #108]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <HAL_RCC_OscConfig+0x478>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058de:	f7fd ff0b 	bl	80036f8 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fd ff07 	bl	80036f8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e05c      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f8:	4b11      	ldr	r3, [pc, #68]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x416>
 8005904:	e054      	b.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005906:	4b10      	ldr	r3, [pc, #64]	@ (8005948 <HAL_RCC_OscConfig+0x478>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fd fef4 	bl	80036f8 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005914:	f7fd fef0 	bl	80036f8 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e045      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005926:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <HAL_RCC_OscConfig+0x470>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x444>
 8005932:	e03d      	b.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d107      	bne.n	800594c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e038      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
 8005940:	40023800 	.word	0x40023800
 8005944:	40007000 	.word	0x40007000
 8005948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594c:	4b1b      	ldr	r3, [pc, #108]	@ (80059bc <HAL_RCC_OscConfig+0x4ec>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d028      	beq.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d121      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d11a      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005984:	4293      	cmp	r3, r2
 8005986:	d111      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800

080059c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0cc      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059d4:	4b68      	ldr	r3, [pc, #416]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d90c      	bls.n	80059fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b65      	ldr	r3, [pc, #404]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b63      	ldr	r3, [pc, #396]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0b8      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a14:	4b59      	ldr	r3, [pc, #356]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4a58      	ldr	r2, [pc, #352]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a2c:	4b53      	ldr	r3, [pc, #332]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a52      	ldr	r2, [pc, #328]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a38:	4b50      	ldr	r3, [pc, #320]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	494d      	ldr	r1, [pc, #308]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d044      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	4b47      	ldr	r3, [pc, #284]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d119      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e06f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e067      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9e:	4b37      	ldr	r3, [pc, #220]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4934      	ldr	r1, [pc, #208]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fd fe22 	bl	80036f8 <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fd fe1e 	bl	80036f8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e04f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	4b2b      	ldr	r3, [pc, #172]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 020c 	and.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1eb      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b25      	ldr	r3, [pc, #148]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20c      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4b22      	ldr	r3, [pc, #136]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e032      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b14:	4b19      	ldr	r3, [pc, #100]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4916      	ldr	r1, [pc, #88]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b32:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	490e      	ldr	r1, [pc, #56]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b46:	f000 f821 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	490a      	ldr	r1, [pc, #40]	@ (8005b80 <HAL_RCC_ClockConfig+0x1c0>)
 8005b58:	5ccb      	ldrb	r3, [r1, r3]
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b62:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fd fd82 	bl	8003670 <HAL_InitTick>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023c00 	.word	0x40023c00
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	08008a3c 	.word	0x08008a3c
 8005b84:	200000ac 	.word	0x200000ac
 8005b88:	200000e4 	.word	0x200000e4

08005b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b094      	sub	sp, #80	@ 0x50
 8005b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba4:	4b79      	ldr	r3, [pc, #484]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d00d      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x40>
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	f200 80e1 	bhi.w	8005d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bbe:	e0db      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc0:	4b73      	ldr	r3, [pc, #460]	@ (8005d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bc4:	e0db      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bc6:	4b73      	ldr	r3, [pc, #460]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bca:	e0d8      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d063      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be2:	4b6a      	ldr	r3, [pc, #424]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	2200      	movs	r2, #0
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	0159      	lsls	r1, r3, #5
 8005c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c10:	0150      	lsls	r0, r2, #5
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4621      	mov	r1, r4
 8005c18:	1a51      	subs	r1, r2, r1
 8005c1a:	6139      	str	r1, [r7, #16]
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c30:	4659      	mov	r1, fp
 8005c32:	018b      	lsls	r3, r1, #6
 8005c34:	4651      	mov	r1, sl
 8005c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	018a      	lsls	r2, r1, #6
 8005c3e:	4651      	mov	r1, sl
 8005c40:	ebb2 0801 	subs.w	r8, r2, r1
 8005c44:	4659      	mov	r1, fp
 8005c46:	eb63 0901 	sbc.w	r9, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c5e:	4690      	mov	r8, r2
 8005c60:	4699      	mov	r9, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	eb18 0303 	adds.w	r3, r8, r3
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	eb49 0303 	adc.w	r3, r9, r3
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c7e:	4629      	mov	r1, r5
 8005c80:	024b      	lsls	r3, r1, #9
 8005c82:	4621      	mov	r1, r4
 8005c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c88:	4621      	mov	r1, r4
 8005c8a:	024a      	lsls	r2, r1, #9
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c92:	2200      	movs	r2, #0
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c9c:	f7fa ffdc 	bl	8000c58 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca8:	e058      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005caa:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	099b      	lsrs	r3, r3, #6
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f04f 0000 	mov.w	r0, #0
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	0159      	lsls	r1, r3, #5
 8005cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cd6:	0150      	lsls	r0, r2, #5
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4641      	mov	r1, r8
 8005cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8005d00:	eb63 050b 	sbc.w	r5, r3, fp
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	00eb      	lsls	r3, r5, #3
 8005d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d12:	00e2      	lsls	r2, r4, #3
 8005d14:	4614      	mov	r4, r2
 8005d16:	461d      	mov	r5, r3
 8005d18:	4643      	mov	r3, r8
 8005d1a:	18e3      	adds	r3, r4, r3
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	464b      	mov	r3, r9
 8005d20:	eb45 0303 	adc.w	r3, r5, r3
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d32:	4629      	mov	r1, r5
 8005d34:	028b      	lsls	r3, r1, #10
 8005d36:	4621      	mov	r1, r4
 8005d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	028a      	lsls	r2, r1, #10
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d46:	2200      	movs	r2, #0
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	61fa      	str	r2, [r7, #28]
 8005d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d50:	f7fa ff82 	bl	8000c58 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3750      	adds	r7, #80	@ 0x50
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	00f42400 	.word	0x00f42400
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	@ (8005dac <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	200000ac 	.word	0x200000ac

08005db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005db4:	f7ff fff0 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0a9b      	lsrs	r3, r3, #10
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4903      	ldr	r1, [pc, #12]	@ (8005dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	08008a4c 	.word	0x08008a4c

08005dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ddc:	f7ff ffdc 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0b5b      	lsrs	r3, r3, #13
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4903      	ldr	r1, [pc, #12]	@ (8005dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	08008a4c 	.word	0x08008a4c

08005e00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d035      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e28:	4b67      	ldr	r3, [pc, #412]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2e:	f7fd fc63 	bl	80036f8 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e36:	f7fd fc5f 	bl	80036f8 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0ba      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e48:	4b60      	ldr	r3, [pc, #384]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	019a      	lsls	r2, r3, #6
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	071b      	lsls	r3, r3, #28
 8005e60:	495a      	ldr	r1, [pc, #360]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e68:	4b57      	ldr	r3, [pc, #348]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6e:	f7fd fc43 	bl	80036f8 <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e76:	f7fd fc3f 	bl	80036f8 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e09a      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e88:	4b50      	ldr	r3, [pc, #320]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8083 	beq.w	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4b49      	ldr	r3, [pc, #292]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	4a48      	ldr	r2, [pc, #288]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb2:	4b46      	ldr	r3, [pc, #280]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ebe:	4b44      	ldr	r3, [pc, #272]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a43      	ldr	r2, [pc, #268]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eca:	f7fd fc15 	bl	80036f8 <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed2:	f7fd fc11 	bl	80036f8 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e06c      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef0:	4b36      	ldr	r3, [pc, #216]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d02f      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d028      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f24:	4a29      	ldr	r2, [pc, #164]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f2a:	4b28      	ldr	r3, [pc, #160]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d114      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fd fbdf 	bl	80036f8 <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fd fbdb 	bl	80036f8 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e034      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ee      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f6c:	d10d      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f82:	4912      	ldr	r1, [pc, #72]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	608b      	str	r3, [r1, #8]
 8005f88:	e005      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f8a:	4b10      	ldr	r3, [pc, #64]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa2:	490a      	ldr	r1, [pc, #40]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7c1a      	ldrb	r2, [r3, #16]
 8005fb8:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	42470068 	.word	0x42470068
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40007000 	.word	0x40007000
 8005fd4:	42470e40 	.word	0x42470e40
 8005fd8:	424711e0 	.word	0x424711e0

08005fdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e073      	b.n	80060da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7f5b      	ldrb	r3, [r3, #29]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fc fe70 	bl	8002ce8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d055      	beq.n	80060c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	22ca      	movs	r2, #202	@ 0xca
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2253      	movs	r2, #83	@ 0x53
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fbb7 	bl	80067a0 <RTC_EnterInitMode>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d12c      	bne.n	8006096 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800604a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6919      	ldr	r1, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	041a      	lsls	r2, r3, #16
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fbbe 	bl	800680e <RTC_ExitInitMode>
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d110      	bne.n	80060be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ff      	movs	r2, #255	@ 0xff
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80060c6:	e001      	b.n	80060cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060e2:	b590      	push	{r4, r7, lr}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	7f1b      	ldrb	r3, [r3, #28]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_RTC_SetTime+0x1c>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e087      	b.n	800620e <HAL_RTC_SetTime+0x12c>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2202      	movs	r2, #2
 8006108:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d126      	bne.n	800615e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb95 	bl	8006858 <RTC_ByteToBcd2>
 800612e:	4603      	mov	r3, r0
 8006130:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb8e 	bl	8006858 <RTC_ByteToBcd2>
 800613c:	4603      	mov	r3, r0
 800613e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006140:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	789b      	ldrb	r3, [r3, #2]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fb86 	bl	8006858 <RTC_ByteToBcd2>
 800614c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800614e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	78db      	ldrb	r3, [r3, #3]
 8006156:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e018      	b.n	8006190 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800617e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006184:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	78db      	ldrb	r3, [r3, #3]
 800618a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	22ca      	movs	r2, #202	@ 0xca
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2253      	movs	r2, #83	@ 0x53
 800619e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fafd 	bl	80067a0 <RTC_EnterInitMode>
 80061a6:	4603      	mov	r3, r0
 80061a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061aa:	7cfb      	ldrb	r3, [r7, #19]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d120      	bne.n	80061f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80061ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80061be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6899      	ldr	r1, [r3, #8]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	431a      	orrs	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fb10 	bl	800680e <RTC_ExitInitMode>
 80061ee:	4603      	mov	r3, r0
 80061f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	22ff      	movs	r2, #255	@ 0xff
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]

  return status;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd90      	pop	{r4, r7, pc}

08006216 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006216:	b590      	push	{r4, r7, lr}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	7f1b      	ldrb	r3, [r3, #28]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_RTC_SetDate+0x1c>
 800622e:	2302      	movs	r3, #2
 8006230:	e071      	b.n	8006316 <HAL_RTC_SetDate+0x100>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2202      	movs	r2, #2
 800623c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10e      	bne.n	8006262 <HAL_RTC_SetDate+0x4c>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	b2db      	uxtb	r3, r3
 800625a:	330a      	adds	r3, #10
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11c      	bne.n	80062a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	78db      	ldrb	r3, [r3, #3]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 faf3 	bl	8006858 <RTC_ByteToBcd2>
 8006272:	4603      	mov	r3, r0
 8006274:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 faec 	bl	8006858 <RTC_ByteToBcd2>
 8006280:	4603      	mov	r3, r0
 8006282:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006284:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	789b      	ldrb	r3, [r3, #2]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fae4 	bl	8006858 <RTC_ByteToBcd2>
 8006290:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006292:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e00e      	b.n	80062c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	22ca      	movs	r2, #202	@ 0xca
 80062c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2253      	movs	r2, #83	@ 0x53
 80062ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa65 	bl	80067a0 <RTC_EnterInitMode>
 80062d6:	4603      	mov	r3, r0
 80062d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062da:	7cfb      	ldrb	r3, [r7, #19]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10c      	bne.n	80062fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80062ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80062ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fa8c 	bl	800680e <RTC_ExitInitMode>
 80062f6:	4603      	mov	r3, r0
 80062f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062fa:	7cfb      	ldrb	r3, [r7, #19]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	22ff      	movs	r2, #255	@ 0xff
 800630c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]

  return status;
 8006314:	7cfb      	ldrb	r3, [r7, #19]
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}
	...

08006320 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006320:	b590      	push	{r4, r7, lr}
 8006322:	b089      	sub	sp, #36	@ 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800632c:	4b9b      	ldr	r3, [pc, #620]	@ (800659c <HAL_RTC_SetAlarm_IT+0x27c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a9b      	ldr	r2, [pc, #620]	@ (80065a0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0adb      	lsrs	r3, r3, #11
 8006338:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	7f1b      	ldrb	r3, [r3, #28]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_RTC_SetAlarm_IT+0x36>
 8006352:	2302      	movs	r3, #2
 8006354:	e11e      	b.n	8006594 <HAL_RTC_SetAlarm_IT+0x274>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2202      	movs	r2, #2
 8006360:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d137      	bne.n	80063d8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2200      	movs	r2, #0
 800637a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa69 	bl	8006858 <RTC_ByteToBcd2>
 8006386:	4603      	mov	r3, r0
 8006388:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fa62 	bl	8006858 <RTC_ByteToBcd2>
 8006394:	4603      	mov	r3, r0
 8006396:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006398:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa5a 	bl	8006858 <RTC_ByteToBcd2>
 80063a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80063b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fa4c 	bl	8006858 <RTC_ByteToBcd2>
 80063c0:	4603      	mov	r3, r0
 80063c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80063c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80063cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e023      	b.n	8006420 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80063f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80063fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	78db      	ldrb	r3, [r3, #3]
 8006404:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006406:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006410:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006416:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800641c:	4313      	orrs	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006428:	4313      	orrs	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	22ca      	movs	r2, #202	@ 0xca
 8006432:	625a      	str	r2, [r3, #36]	@ 0x24
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2253      	movs	r2, #83	@ 0x53
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006444:	d142      	bne.n	80064cc <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006454:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006466:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3b01      	subs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	22ff      	movs	r2, #255	@ 0xff
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2203      	movs	r2, #3
 8006480:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e083      	b.n	8006594 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0e6      	beq.n	8006468 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064b8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	e04c      	b.n	8006566 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80064da:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80064ec:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80064ee:	4b2b      	ldr	r3, [pc, #172]	@ (800659c <HAL_RTC_SetAlarm_IT+0x27c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2b      	ldr	r2, [pc, #172]	@ (80065a0 <HAL_RTC_SetAlarm_IT+0x280>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	0adb      	lsrs	r3, r3, #11
 80064fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	3b01      	subs	r3, #1
 8006508:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	22ff      	movs	r2, #255	@ 0xff
 8006516:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2203      	movs	r2, #3
 800651c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e035      	b.n	8006594 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0e6      	beq.n	8006504 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006554:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006564:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <HAL_RTC_SetAlarm_IT+0x284>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0e      	ldr	r2, [pc, #56]	@ (80065a4 <HAL_RTC_SetAlarm_IT+0x284>)
 800656c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006570:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <HAL_RTC_SetAlarm_IT+0x284>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4a0b      	ldr	r2, [pc, #44]	@ (80065a4 <HAL_RTC_SetAlarm_IT+0x284>)
 8006578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800657c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	22ff      	movs	r2, #255	@ 0xff
 8006584:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3724      	adds	r7, #36	@ 0x24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd90      	pop	{r4, r7, pc}
 800659c:	200000ac 	.word	0x200000ac
 80065a0:	10624dd3 	.word	0x10624dd3
 80065a4:	40013c00 	.word	0x40013c00

080065a8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c4:	d10e      	bne.n	80065e4 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065cc:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e00d      	b.n	8006600 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065ea:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	0c1b      	lsrs	r3, r3, #16
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	0d9b      	lsrs	r3, r3, #22
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d125      	bne.n	80066bc <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f90d 	bl	8006894 <RTC_Bcd2ToByte>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f904 	bl	8006894 <RTC_Bcd2ToByte>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	789b      	ldrb	r3, [r3, #2]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f8fb 	bl	8006894 <RTC_Bcd2ToByte>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 f8f1 	bl	8006894 <RTC_Bcd2ToByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006750 <HAL_RTC_AlarmIRQHandler+0x88>)
 80066d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80066d6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d012      	beq.n	800670c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006704:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fb fd76 	bl	80021f8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d012      	beq.n	8006740 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006738:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8c8 	bl	80068d0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	775a      	strb	r2, [r3, #29]
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40013c00 	.word	0x40013c00

08006754 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <HAL_RTC_WaitForSynchro+0x48>)
 8006766:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006768:	f7fc ffc6 	bl	80036f8 <HAL_GetTick>
 800676c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800676e:	e009      	b.n	8006784 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006770:	f7fc ffc2 	bl	80036f8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800677e:	d901      	bls.n	8006784 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e007      	b.n	8006794 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0ee      	beq.n	8006770 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	00013f5f 	.word	0x00013f5f

080067a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d122      	bne.n	8006804 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ce:	f7fc ff93 	bl	80036f8 <HAL_GetTick>
 80067d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067d4:	e00c      	b.n	80067f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d6:	f7fc ff8f 	bl	80036f8 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e4:	d904      	bls.n	80067f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2204      	movs	r2, #4
 80067ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <RTC_EnterInitMode+0x64>
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d1e8      	bne.n	80067d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006828:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff ff8b 	bl	8006754 <HAL_RTC_WaitForSynchro>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006866:	e005      	b.n	8006874 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	3b0a      	subs	r3, #10
 8006872:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b09      	cmp	r3, #9
 8006878:	d8f6      	bhi.n	8006868 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	b2da      	uxtb	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	4313      	orrs	r3, r2
 8006886:	b2db      	uxtb	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	b2db      	uxtb	r3, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e041      	b.n	800697a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fc fa20 	bl	8002d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 f82e 	bl	8006984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3a      	ldr	r2, [pc, #232]	@ (8006a80 <TIM_Base_SetConfig+0xfc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_Base_SetConfig+0x38>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d00b      	beq.n	80069bc <TIM_Base_SetConfig+0x38>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a37      	ldr	r2, [pc, #220]	@ (8006a84 <TIM_Base_SetConfig+0x100>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_Base_SetConfig+0x38>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a36      	ldr	r2, [pc, #216]	@ (8006a88 <TIM_Base_SetConfig+0x104>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_Base_SetConfig+0x38>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a35      	ldr	r2, [pc, #212]	@ (8006a8c <TIM_Base_SetConfig+0x108>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d108      	bne.n	80069ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a80 <TIM_Base_SetConfig+0xfc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01b      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069dc:	d017      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a28      	ldr	r2, [pc, #160]	@ (8006a84 <TIM_Base_SetConfig+0x100>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a27      	ldr	r2, [pc, #156]	@ (8006a88 <TIM_Base_SetConfig+0x104>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00f      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a26      	ldr	r2, [pc, #152]	@ (8006a8c <TIM_Base_SetConfig+0x108>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00b      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a25      	ldr	r2, [pc, #148]	@ (8006a90 <TIM_Base_SetConfig+0x10c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d007      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a24      	ldr	r2, [pc, #144]	@ (8006a94 <TIM_Base_SetConfig+0x110>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d003      	beq.n	8006a0e <TIM_Base_SetConfig+0x8a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a23      	ldr	r2, [pc, #140]	@ (8006a98 <TIM_Base_SetConfig+0x114>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d108      	bne.n	8006a20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	@ (8006a80 <TIM_Base_SetConfig+0xfc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d103      	bne.n	8006a54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]
  }
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e042      	b.n	8006b34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fc f966 	bl	8002d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	@ 0x24
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f82b 	bl	8006b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b40:	b0c0      	sub	sp, #256	@ 0x100
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	68d9      	ldr	r1, [r3, #12]
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	ea40 0301 	orr.w	r3, r0, r1
 8006b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b94:	f021 010c 	bic.w	r1, r1, #12
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	6999      	ldr	r1, [r3, #24]
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	ea40 0301 	orr.w	r3, r0, r1
 8006bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b8f      	ldr	r3, [pc, #572]	@ (8006e08 <UART_SetConfig+0x2cc>)
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d005      	beq.n	8006bdc <UART_SetConfig+0xa0>
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8006e0c <UART_SetConfig+0x2d0>)
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d104      	bne.n	8006be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bdc:	f7ff f8fc 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8006be0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006be4:	e003      	b.n	8006bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006be6:	f7ff f8e3 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 8006bea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf8:	f040 810c 	bne.w	8006e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c16:	415b      	adcs	r3, r3
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c1e:	4621      	mov	r1, r4
 8006c20:	eb12 0801 	adds.w	r8, r2, r1
 8006c24:	4629      	mov	r1, r5
 8006c26:	eb43 0901 	adc.w	r9, r3, r1
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3e:	4690      	mov	r8, r2
 8006c40:	4699      	mov	r9, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	eb18 0303 	adds.w	r3, r8, r3
 8006c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	eb49 0303 	adc.w	r3, r9, r3
 8006c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	18db      	adds	r3, r3, r3
 8006c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c70:	4613      	mov	r3, r2
 8006c72:	eb42 0303 	adc.w	r3, r2, r3
 8006c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c80:	f7f9 ffea 	bl	8000c58 <__aeabi_uldivmod>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4b61      	ldr	r3, [pc, #388]	@ (8006e10 <UART_SetConfig+0x2d4>)
 8006c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	011c      	lsls	r4, r3, #4
 8006c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	1891      	adds	r1, r2, r2
 8006caa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cac:	415b      	adcs	r3, r3
 8006cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8006cba:	4649      	mov	r1, r9
 8006cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd4:	4692      	mov	sl, r2
 8006cd6:	469b      	mov	fp, r3
 8006cd8:	4643      	mov	r3, r8
 8006cda:	eb1a 0303 	adds.w	r3, sl, r3
 8006cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d00:	460b      	mov	r3, r1
 8006d02:	18db      	adds	r3, r3, r3
 8006d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d06:	4613      	mov	r3, r2
 8006d08:	eb42 0303 	adc.w	r3, r2, r3
 8006d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d16:	f7f9 ff9f 	bl	8000c58 <__aeabi_uldivmod>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4b3b      	ldr	r3, [pc, #236]	@ (8006e10 <UART_SetConfig+0x2d4>)
 8006d22:	fba3 2301 	umull	r2, r3, r3, r1
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	2264      	movs	r2, #100	@ 0x64
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	1acb      	subs	r3, r1, r3
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d36:	4b36      	ldr	r3, [pc, #216]	@ (8006e10 <UART_SetConfig+0x2d4>)
 8006d38:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d44:	441c      	add	r4, r3
 8006d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	1891      	adds	r1, r2, r2
 8006d5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d60:	415b      	adcs	r3, r3
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d68:	4641      	mov	r1, r8
 8006d6a:	1851      	adds	r1, r2, r1
 8006d6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d6e:	4649      	mov	r1, r9
 8006d70:	414b      	adcs	r3, r1
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d80:	4659      	mov	r1, fp
 8006d82:	00cb      	lsls	r3, r1, #3
 8006d84:	4651      	mov	r1, sl
 8006d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	00ca      	lsls	r2, r1, #3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	4642      	mov	r2, r8
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	460a      	mov	r2, r1
 8006da0:	eb42 0303 	adc.w	r3, r2, r3
 8006da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006db4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	18db      	adds	r3, r3, r3
 8006dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	eb42 0303 	adc.w	r3, r2, r3
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dd2:	f7f9 ff41 	bl	8000c58 <__aeabi_uldivmod>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <UART_SetConfig+0x2d4>)
 8006ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	2164      	movs	r1, #100	@ 0x64
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	3332      	adds	r3, #50	@ 0x32
 8006dee:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <UART_SetConfig+0x2d4>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f003 0207 	and.w	r2, r3, #7
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4422      	add	r2, r4
 8006e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e04:	e106      	b.n	8007014 <UART_SetConfig+0x4d8>
 8006e06:	bf00      	nop
 8006e08:	40011000 	.word	0x40011000
 8006e0c:	40011400 	.word	0x40011400
 8006e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	1891      	adds	r1, r2, r2
 8006e2c:	6239      	str	r1, [r7, #32]
 8006e2e:	415b      	adcs	r3, r3
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e36:	4641      	mov	r1, r8
 8006e38:	1854      	adds	r4, r2, r1
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	eb43 0501 	adc.w	r5, r3, r1
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	00eb      	lsls	r3, r5, #3
 8006e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e4e:	00e2      	lsls	r2, r4, #3
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	4643      	mov	r3, r8
 8006e56:	18e3      	adds	r3, r4, r3
 8006e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	eb45 0303 	adc.w	r3, r5, r3
 8006e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e82:	4629      	mov	r1, r5
 8006e84:	008b      	lsls	r3, r1, #2
 8006e86:	4621      	mov	r1, r4
 8006e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	008a      	lsls	r2, r1, #2
 8006e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e94:	f7f9 fee0 	bl	8000c58 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4b60      	ldr	r3, [pc, #384]	@ (8007020 <UART_SetConfig+0x4e4>)
 8006e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	011c      	lsls	r4, r3, #4
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006eb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	1891      	adds	r1, r2, r2
 8006ebe:	61b9      	str	r1, [r7, #24]
 8006ec0:	415b      	adcs	r3, r3
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec8:	4641      	mov	r1, r8
 8006eca:	1851      	adds	r1, r2, r1
 8006ecc:	6139      	str	r1, [r7, #16]
 8006ece:	4649      	mov	r1, r9
 8006ed0:	414b      	adcs	r3, r1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	00cb      	lsls	r3, r1, #3
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eea:	4651      	mov	r1, sl
 8006eec:	00ca      	lsls	r2, r1, #3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	189b      	adds	r3, r3, r2
 8006ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006efc:	464b      	mov	r3, r9
 8006efe:	460a      	mov	r2, r1
 8006f00:	eb42 0303 	adc.w	r3, r2, r3
 8006f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f20:	4649      	mov	r1, r9
 8006f22:	008b      	lsls	r3, r1, #2
 8006f24:	4641      	mov	r1, r8
 8006f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	008a      	lsls	r2, r1, #2
 8006f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f32:	f7f9 fe91 	bl	8000c58 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4b38      	ldr	r3, [pc, #224]	@ (8007020 <UART_SetConfig+0x4e4>)
 8006f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2264      	movs	r2, #100	@ 0x64
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	1acb      	subs	r3, r1, r3
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	3332      	adds	r3, #50	@ 0x32
 8006f50:	4a33      	ldr	r2, [pc, #204]	@ (8007020 <UART_SetConfig+0x4e4>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f5c:	441c      	add	r4, r3
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f62:	2200      	movs	r2, #0
 8006f64:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	1891      	adds	r1, r2, r2
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	415b      	adcs	r3, r3
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	1851      	adds	r1, r2, r1
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	4649      	mov	r1, r9
 8006f84:	414b      	adcs	r3, r1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f94:	4659      	mov	r1, fp
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	4651      	mov	r1, sl
 8006f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	00ca      	lsls	r2, r1, #3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fae:	464b      	mov	r3, r9
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	eb42 0303 	adc.w	r3, r2, r3
 8006fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fda:	4641      	mov	r1, r8
 8006fdc:	008a      	lsls	r2, r1, #2
 8006fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fe2:	f7f9 fe39 	bl	8000c58 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <UART_SetConfig+0x4e4>)
 8006fec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	2164      	movs	r1, #100	@ 0x64
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	3332      	adds	r3, #50	@ 0x32
 8006ffe:	4a08      	ldr	r2, [pc, #32]	@ (8007020 <UART_SetConfig+0x4e4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f003 020f 	and.w	r2, r3, #15
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4422      	add	r2, r4
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	bf00      	nop
 8007016:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800701a:	46bd      	mov	sp, r7
 800701c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007020:	51eb851f 	.word	0x51eb851f

08007024 <siprintf>:
 8007024:	b40e      	push	{r1, r2, r3}
 8007026:	b500      	push	{lr}
 8007028:	b09c      	sub	sp, #112	@ 0x70
 800702a:	ab1d      	add	r3, sp, #116	@ 0x74
 800702c:	9002      	str	r0, [sp, #8]
 800702e:	9006      	str	r0, [sp, #24]
 8007030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007034:	4809      	ldr	r0, [pc, #36]	@ (800705c <siprintf+0x38>)
 8007036:	9107      	str	r1, [sp, #28]
 8007038:	9104      	str	r1, [sp, #16]
 800703a:	4909      	ldr	r1, [pc, #36]	@ (8007060 <siprintf+0x3c>)
 800703c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	6800      	ldr	r0, [r0, #0]
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	a902      	add	r1, sp, #8
 8007048:	f000 f9a8 	bl	800739c <_svfiprintf_r>
 800704c:	9b02      	ldr	r3, [sp, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	b01c      	add	sp, #112	@ 0x70
 8007054:	f85d eb04 	ldr.w	lr, [sp], #4
 8007058:	b003      	add	sp, #12
 800705a:	4770      	bx	lr
 800705c:	200000ec 	.word	0x200000ec
 8007060:	ffff0208 	.word	0xffff0208

08007064 <memset>:
 8007064:	4402      	add	r2, r0
 8007066:	4603      	mov	r3, r0
 8007068:	4293      	cmp	r3, r2
 800706a:	d100      	bne.n	800706e <memset+0xa>
 800706c:	4770      	bx	lr
 800706e:	f803 1b01 	strb.w	r1, [r3], #1
 8007072:	e7f9      	b.n	8007068 <memset+0x4>

08007074 <strncpy>:
 8007074:	b510      	push	{r4, lr}
 8007076:	3901      	subs	r1, #1
 8007078:	4603      	mov	r3, r0
 800707a:	b132      	cbz	r2, 800708a <strncpy+0x16>
 800707c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007080:	f803 4b01 	strb.w	r4, [r3], #1
 8007084:	3a01      	subs	r2, #1
 8007086:	2c00      	cmp	r4, #0
 8007088:	d1f7      	bne.n	800707a <strncpy+0x6>
 800708a:	441a      	add	r2, r3
 800708c:	2100      	movs	r1, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	d100      	bne.n	8007094 <strncpy+0x20>
 8007092:	bd10      	pop	{r4, pc}
 8007094:	f803 1b01 	strb.w	r1, [r3], #1
 8007098:	e7f9      	b.n	800708e <strncpy+0x1a>
	...

0800709c <__errno>:
 800709c:	4b01      	ldr	r3, [pc, #4]	@ (80070a4 <__errno+0x8>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	200000ec 	.word	0x200000ec

080070a8 <__libc_init_array>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4d0d      	ldr	r5, [pc, #52]	@ (80070e0 <__libc_init_array+0x38>)
 80070ac:	4c0d      	ldr	r4, [pc, #52]	@ (80070e4 <__libc_init_array+0x3c>)
 80070ae:	1b64      	subs	r4, r4, r5
 80070b0:	10a4      	asrs	r4, r4, #2
 80070b2:	2600      	movs	r6, #0
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	d109      	bne.n	80070cc <__libc_init_array+0x24>
 80070b8:	4d0b      	ldr	r5, [pc, #44]	@ (80070e8 <__libc_init_array+0x40>)
 80070ba:	4c0c      	ldr	r4, [pc, #48]	@ (80070ec <__libc_init_array+0x44>)
 80070bc:	f001 fbc6 	bl	800884c <_init>
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	2600      	movs	r6, #0
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	d105      	bne.n	80070d6 <__libc_init_array+0x2e>
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d0:	4798      	blx	r3
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7ee      	b.n	80070b4 <__libc_init_array+0xc>
 80070d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070da:	4798      	blx	r3
 80070dc:	3601      	adds	r6, #1
 80070de:	e7f2      	b.n	80070c6 <__libc_init_array+0x1e>
 80070e0:	08008ac0 	.word	0x08008ac0
 80070e4:	08008ac0 	.word	0x08008ac0
 80070e8:	08008ac0 	.word	0x08008ac0
 80070ec:	08008ac4 	.word	0x08008ac4

080070f0 <__retarget_lock_acquire_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <__retarget_lock_release_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <_free_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4605      	mov	r5, r0
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d041      	beq.n	8007180 <_free_r+0x8c>
 80070fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007100:	1f0c      	subs	r4, r1, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfb8      	it	lt
 8007106:	18e4      	addlt	r4, r4, r3
 8007108:	f000 f8e0 	bl	80072cc <__malloc_lock>
 800710c:	4a1d      	ldr	r2, [pc, #116]	@ (8007184 <_free_r+0x90>)
 800710e:	6813      	ldr	r3, [r2, #0]
 8007110:	b933      	cbnz	r3, 8007120 <_free_r+0x2c>
 8007112:	6063      	str	r3, [r4, #4]
 8007114:	6014      	str	r4, [r2, #0]
 8007116:	4628      	mov	r0, r5
 8007118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800711c:	f000 b8dc 	b.w	80072d8 <__malloc_unlock>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d908      	bls.n	8007136 <_free_r+0x42>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	1821      	adds	r1, r4, r0
 8007128:	428b      	cmp	r3, r1
 800712a:	bf01      	itttt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	1809      	addeq	r1, r1, r0
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	e7ed      	b.n	8007112 <_free_r+0x1e>
 8007136:	461a      	mov	r2, r3
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b10b      	cbz	r3, 8007140 <_free_r+0x4c>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d9fa      	bls.n	8007136 <_free_r+0x42>
 8007140:	6811      	ldr	r1, [r2, #0]
 8007142:	1850      	adds	r0, r2, r1
 8007144:	42a0      	cmp	r0, r4
 8007146:	d10b      	bne.n	8007160 <_free_r+0x6c>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	4401      	add	r1, r0
 800714c:	1850      	adds	r0, r2, r1
 800714e:	4283      	cmp	r3, r0
 8007150:	6011      	str	r1, [r2, #0]
 8007152:	d1e0      	bne.n	8007116 <_free_r+0x22>
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	4408      	add	r0, r1
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	e7da      	b.n	8007116 <_free_r+0x22>
 8007160:	d902      	bls.n	8007168 <_free_r+0x74>
 8007162:	230c      	movs	r3, #12
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	e7d6      	b.n	8007116 <_free_r+0x22>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	1821      	adds	r1, r4, r0
 800716c:	428b      	cmp	r3, r1
 800716e:	bf04      	itt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	bf04      	itt	eq
 8007178:	1809      	addeq	r1, r1, r0
 800717a:	6021      	streq	r1, [r4, #0]
 800717c:	6054      	str	r4, [r2, #4]
 800717e:	e7ca      	b.n	8007116 <_free_r+0x22>
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	2000074c 	.word	0x2000074c

08007188 <sbrk_aligned>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4e0f      	ldr	r6, [pc, #60]	@ (80071c8 <sbrk_aligned+0x40>)
 800718c:	460c      	mov	r4, r1
 800718e:	6831      	ldr	r1, [r6, #0]
 8007190:	4605      	mov	r5, r0
 8007192:	b911      	cbnz	r1, 800719a <sbrk_aligned+0x12>
 8007194:	f000 fba6 	bl	80078e4 <_sbrk_r>
 8007198:	6030      	str	r0, [r6, #0]
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 fba1 	bl	80078e4 <_sbrk_r>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d103      	bne.n	80071ae <sbrk_aligned+0x26>
 80071a6:	f04f 34ff 	mov.w	r4, #4294967295
 80071aa:	4620      	mov	r0, r4
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	1cc4      	adds	r4, r0, #3
 80071b0:	f024 0403 	bic.w	r4, r4, #3
 80071b4:	42a0      	cmp	r0, r4
 80071b6:	d0f8      	beq.n	80071aa <sbrk_aligned+0x22>
 80071b8:	1a21      	subs	r1, r4, r0
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 fb92 	bl	80078e4 <_sbrk_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d1f2      	bne.n	80071aa <sbrk_aligned+0x22>
 80071c4:	e7ef      	b.n	80071a6 <sbrk_aligned+0x1e>
 80071c6:	bf00      	nop
 80071c8:	20000748 	.word	0x20000748

080071cc <_malloc_r>:
 80071cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	1ccd      	adds	r5, r1, #3
 80071d2:	f025 0503 	bic.w	r5, r5, #3
 80071d6:	3508      	adds	r5, #8
 80071d8:	2d0c      	cmp	r5, #12
 80071da:	bf38      	it	cc
 80071dc:	250c      	movcc	r5, #12
 80071de:	2d00      	cmp	r5, #0
 80071e0:	4606      	mov	r6, r0
 80071e2:	db01      	blt.n	80071e8 <_malloc_r+0x1c>
 80071e4:	42a9      	cmp	r1, r5
 80071e6:	d904      	bls.n	80071f2 <_malloc_r+0x26>
 80071e8:	230c      	movs	r3, #12
 80071ea:	6033      	str	r3, [r6, #0]
 80071ec:	2000      	movs	r0, #0
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072c8 <_malloc_r+0xfc>
 80071f6:	f000 f869 	bl	80072cc <__malloc_lock>
 80071fa:	f8d8 3000 	ldr.w	r3, [r8]
 80071fe:	461c      	mov	r4, r3
 8007200:	bb44      	cbnz	r4, 8007254 <_malloc_r+0x88>
 8007202:	4629      	mov	r1, r5
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ffbf 	bl	8007188 <sbrk_aligned>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	4604      	mov	r4, r0
 800720e:	d158      	bne.n	80072c2 <_malloc_r+0xf6>
 8007210:	f8d8 4000 	ldr.w	r4, [r8]
 8007214:	4627      	mov	r7, r4
 8007216:	2f00      	cmp	r7, #0
 8007218:	d143      	bne.n	80072a2 <_malloc_r+0xd6>
 800721a:	2c00      	cmp	r4, #0
 800721c:	d04b      	beq.n	80072b6 <_malloc_r+0xea>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4639      	mov	r1, r7
 8007222:	4630      	mov	r0, r6
 8007224:	eb04 0903 	add.w	r9, r4, r3
 8007228:	f000 fb5c 	bl	80078e4 <_sbrk_r>
 800722c:	4581      	cmp	r9, r0
 800722e:	d142      	bne.n	80072b6 <_malloc_r+0xea>
 8007230:	6821      	ldr	r1, [r4, #0]
 8007232:	1a6d      	subs	r5, r5, r1
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ffa6 	bl	8007188 <sbrk_aligned>
 800723c:	3001      	adds	r0, #1
 800723e:	d03a      	beq.n	80072b6 <_malloc_r+0xea>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	442b      	add	r3, r5
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	f8d8 3000 	ldr.w	r3, [r8]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	bb62      	cbnz	r2, 80072a8 <_malloc_r+0xdc>
 800724e:	f8c8 7000 	str.w	r7, [r8]
 8007252:	e00f      	b.n	8007274 <_malloc_r+0xa8>
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	1b52      	subs	r2, r2, r5
 8007258:	d420      	bmi.n	800729c <_malloc_r+0xd0>
 800725a:	2a0b      	cmp	r2, #11
 800725c:	d917      	bls.n	800728e <_malloc_r+0xc2>
 800725e:	1961      	adds	r1, r4, r5
 8007260:	42a3      	cmp	r3, r4
 8007262:	6025      	str	r5, [r4, #0]
 8007264:	bf18      	it	ne
 8007266:	6059      	strne	r1, [r3, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	bf08      	it	eq
 800726c:	f8c8 1000 	streq.w	r1, [r8]
 8007270:	5162      	str	r2, [r4, r5]
 8007272:	604b      	str	r3, [r1, #4]
 8007274:	4630      	mov	r0, r6
 8007276:	f000 f82f 	bl	80072d8 <__malloc_unlock>
 800727a:	f104 000b 	add.w	r0, r4, #11
 800727e:	1d23      	adds	r3, r4, #4
 8007280:	f020 0007 	bic.w	r0, r0, #7
 8007284:	1ac2      	subs	r2, r0, r3
 8007286:	bf1c      	itt	ne
 8007288:	1a1b      	subne	r3, r3, r0
 800728a:	50a3      	strne	r3, [r4, r2]
 800728c:	e7af      	b.n	80071ee <_malloc_r+0x22>
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	42a3      	cmp	r3, r4
 8007292:	bf0c      	ite	eq
 8007294:	f8c8 2000 	streq.w	r2, [r8]
 8007298:	605a      	strne	r2, [r3, #4]
 800729a:	e7eb      	b.n	8007274 <_malloc_r+0xa8>
 800729c:	4623      	mov	r3, r4
 800729e:	6864      	ldr	r4, [r4, #4]
 80072a0:	e7ae      	b.n	8007200 <_malloc_r+0x34>
 80072a2:	463c      	mov	r4, r7
 80072a4:	687f      	ldr	r7, [r7, #4]
 80072a6:	e7b6      	b.n	8007216 <_malloc_r+0x4a>
 80072a8:	461a      	mov	r2, r3
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	d1fb      	bne.n	80072a8 <_malloc_r+0xdc>
 80072b0:	2300      	movs	r3, #0
 80072b2:	6053      	str	r3, [r2, #4]
 80072b4:	e7de      	b.n	8007274 <_malloc_r+0xa8>
 80072b6:	230c      	movs	r3, #12
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f80c 	bl	80072d8 <__malloc_unlock>
 80072c0:	e794      	b.n	80071ec <_malloc_r+0x20>
 80072c2:	6005      	str	r5, [r0, #0]
 80072c4:	e7d6      	b.n	8007274 <_malloc_r+0xa8>
 80072c6:	bf00      	nop
 80072c8:	2000074c 	.word	0x2000074c

080072cc <__malloc_lock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__malloc_lock+0x8>)
 80072ce:	f7ff bf0f 	b.w	80070f0 <__retarget_lock_acquire_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000744 	.word	0x20000744

080072d8 <__malloc_unlock>:
 80072d8:	4801      	ldr	r0, [pc, #4]	@ (80072e0 <__malloc_unlock+0x8>)
 80072da:	f7ff bf0a 	b.w	80070f2 <__retarget_lock_release_recursive>
 80072de:	bf00      	nop
 80072e0:	20000744 	.word	0x20000744

080072e4 <__ssputs_r>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	688e      	ldr	r6, [r1, #8]
 80072ea:	461f      	mov	r7, r3
 80072ec:	42be      	cmp	r6, r7
 80072ee:	680b      	ldr	r3, [r1, #0]
 80072f0:	4682      	mov	sl, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	4690      	mov	r8, r2
 80072f6:	d82d      	bhi.n	8007354 <__ssputs_r+0x70>
 80072f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007300:	d026      	beq.n	8007350 <__ssputs_r+0x6c>
 8007302:	6965      	ldr	r5, [r4, #20]
 8007304:	6909      	ldr	r1, [r1, #16]
 8007306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800730a:	eba3 0901 	sub.w	r9, r3, r1
 800730e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007312:	1c7b      	adds	r3, r7, #1
 8007314:	444b      	add	r3, r9
 8007316:	106d      	asrs	r5, r5, #1
 8007318:	429d      	cmp	r5, r3
 800731a:	bf38      	it	cc
 800731c:	461d      	movcc	r5, r3
 800731e:	0553      	lsls	r3, r2, #21
 8007320:	d527      	bpl.n	8007372 <__ssputs_r+0x8e>
 8007322:	4629      	mov	r1, r5
 8007324:	f7ff ff52 	bl	80071cc <_malloc_r>
 8007328:	4606      	mov	r6, r0
 800732a:	b360      	cbz	r0, 8007386 <__ssputs_r+0xa2>
 800732c:	6921      	ldr	r1, [r4, #16]
 800732e:	464a      	mov	r2, r9
 8007330:	f000 fae8 	bl	8007904 <memcpy>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800733a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	6126      	str	r6, [r4, #16]
 8007342:	6165      	str	r5, [r4, #20]
 8007344:	444e      	add	r6, r9
 8007346:	eba5 0509 	sub.w	r5, r5, r9
 800734a:	6026      	str	r6, [r4, #0]
 800734c:	60a5      	str	r5, [r4, #8]
 800734e:	463e      	mov	r6, r7
 8007350:	42be      	cmp	r6, r7
 8007352:	d900      	bls.n	8007356 <__ssputs_r+0x72>
 8007354:	463e      	mov	r6, r7
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	4632      	mov	r2, r6
 800735a:	4641      	mov	r1, r8
 800735c:	f000 faa8 	bl	80078b0 <memmove>
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	1b9b      	subs	r3, r3, r6
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	4433      	add	r3, r6
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	462a      	mov	r2, r5
 8007374:	f000 fad4 	bl	8007920 <_realloc_r>
 8007378:	4606      	mov	r6, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	d1e0      	bne.n	8007340 <__ssputs_r+0x5c>
 800737e:	6921      	ldr	r1, [r4, #16]
 8007380:	4650      	mov	r0, sl
 8007382:	f7ff feb7 	bl	80070f4 <_free_r>
 8007386:	230c      	movs	r3, #12
 8007388:	f8ca 3000 	str.w	r3, [sl]
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e7e9      	b.n	800736e <__ssputs_r+0x8a>
	...

0800739c <_svfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	4698      	mov	r8, r3
 80073a2:	898b      	ldrh	r3, [r1, #12]
 80073a4:	061b      	lsls	r3, r3, #24
 80073a6:	b09d      	sub	sp, #116	@ 0x74
 80073a8:	4607      	mov	r7, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	d510      	bpl.n	80073d2 <_svfiprintf_r+0x36>
 80073b0:	690b      	ldr	r3, [r1, #16]
 80073b2:	b973      	cbnz	r3, 80073d2 <_svfiprintf_r+0x36>
 80073b4:	2140      	movs	r1, #64	@ 0x40
 80073b6:	f7ff ff09 	bl	80071cc <_malloc_r>
 80073ba:	6028      	str	r0, [r5, #0]
 80073bc:	6128      	str	r0, [r5, #16]
 80073be:	b930      	cbnz	r0, 80073ce <_svfiprintf_r+0x32>
 80073c0:	230c      	movs	r3, #12
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b01d      	add	sp, #116	@ 0x74
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	2340      	movs	r3, #64	@ 0x40
 80073d0:	616b      	str	r3, [r5, #20]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d6:	2320      	movs	r3, #32
 80073d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e0:	2330      	movs	r3, #48	@ 0x30
 80073e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007580 <_svfiprintf_r+0x1e4>
 80073e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ea:	f04f 0901 	mov.w	r9, #1
 80073ee:	4623      	mov	r3, r4
 80073f0:	469a      	mov	sl, r3
 80073f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f6:	b10a      	cbz	r2, 80073fc <_svfiprintf_r+0x60>
 80073f8:	2a25      	cmp	r2, #37	@ 0x25
 80073fa:	d1f9      	bne.n	80073f0 <_svfiprintf_r+0x54>
 80073fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007400:	d00b      	beq.n	800741a <_svfiprintf_r+0x7e>
 8007402:	465b      	mov	r3, fp
 8007404:	4622      	mov	r2, r4
 8007406:	4629      	mov	r1, r5
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff ff6b 	bl	80072e4 <__ssputs_r>
 800740e:	3001      	adds	r0, #1
 8007410:	f000 80a7 	beq.w	8007562 <_svfiprintf_r+0x1c6>
 8007414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007416:	445a      	add	r2, fp
 8007418:	9209      	str	r2, [sp, #36]	@ 0x24
 800741a:	f89a 3000 	ldrb.w	r3, [sl]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 809f 	beq.w	8007562 <_svfiprintf_r+0x1c6>
 8007424:	2300      	movs	r3, #0
 8007426:	f04f 32ff 	mov.w	r2, #4294967295
 800742a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800742e:	f10a 0a01 	add.w	sl, sl, #1
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	9307      	str	r3, [sp, #28]
 8007436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800743a:	931a      	str	r3, [sp, #104]	@ 0x68
 800743c:	4654      	mov	r4, sl
 800743e:	2205      	movs	r2, #5
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	484e      	ldr	r0, [pc, #312]	@ (8007580 <_svfiprintf_r+0x1e4>)
 8007446:	f7f8 fedb 	bl	8000200 <memchr>
 800744a:	9a04      	ldr	r2, [sp, #16]
 800744c:	b9d8      	cbnz	r0, 8007486 <_svfiprintf_r+0xea>
 800744e:	06d0      	lsls	r0, r2, #27
 8007450:	bf44      	itt	mi
 8007452:	2320      	movmi	r3, #32
 8007454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007458:	0711      	lsls	r1, r2, #28
 800745a:	bf44      	itt	mi
 800745c:	232b      	movmi	r3, #43	@ 0x2b
 800745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007462:	f89a 3000 	ldrb.w	r3, [sl]
 8007466:	2b2a      	cmp	r3, #42	@ 0x2a
 8007468:	d015      	beq.n	8007496 <_svfiprintf_r+0xfa>
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	4654      	mov	r4, sl
 800746e:	2000      	movs	r0, #0
 8007470:	f04f 0c0a 	mov.w	ip, #10
 8007474:	4621      	mov	r1, r4
 8007476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800747a:	3b30      	subs	r3, #48	@ 0x30
 800747c:	2b09      	cmp	r3, #9
 800747e:	d94b      	bls.n	8007518 <_svfiprintf_r+0x17c>
 8007480:	b1b0      	cbz	r0, 80074b0 <_svfiprintf_r+0x114>
 8007482:	9207      	str	r2, [sp, #28]
 8007484:	e014      	b.n	80074b0 <_svfiprintf_r+0x114>
 8007486:	eba0 0308 	sub.w	r3, r0, r8
 800748a:	fa09 f303 	lsl.w	r3, r9, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	46a2      	mov	sl, r4
 8007494:	e7d2      	b.n	800743c <_svfiprintf_r+0xa0>
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	1d19      	adds	r1, r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	9103      	str	r1, [sp, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bfbb      	ittet	lt
 80074a2:	425b      	neglt	r3, r3
 80074a4:	f042 0202 	orrlt.w	r2, r2, #2
 80074a8:	9307      	strge	r3, [sp, #28]
 80074aa:	9307      	strlt	r3, [sp, #28]
 80074ac:	bfb8      	it	lt
 80074ae:	9204      	strlt	r2, [sp, #16]
 80074b0:	7823      	ldrb	r3, [r4, #0]
 80074b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074b4:	d10a      	bne.n	80074cc <_svfiprintf_r+0x130>
 80074b6:	7863      	ldrb	r3, [r4, #1]
 80074b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ba:	d132      	bne.n	8007522 <_svfiprintf_r+0x186>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9203      	str	r2, [sp, #12]
 80074c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c8:	3402      	adds	r4, #2
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007590 <_svfiprintf_r+0x1f4>
 80074d0:	7821      	ldrb	r1, [r4, #0]
 80074d2:	2203      	movs	r2, #3
 80074d4:	4650      	mov	r0, sl
 80074d6:	f7f8 fe93 	bl	8000200 <memchr>
 80074da:	b138      	cbz	r0, 80074ec <_svfiprintf_r+0x150>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	eba0 000a 	sub.w	r0, r0, sl
 80074e2:	2240      	movs	r2, #64	@ 0x40
 80074e4:	4082      	lsls	r2, r0
 80074e6:	4313      	orrs	r3, r2
 80074e8:	3401      	adds	r4, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f0:	4824      	ldr	r0, [pc, #144]	@ (8007584 <_svfiprintf_r+0x1e8>)
 80074f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f6:	2206      	movs	r2, #6
 80074f8:	f7f8 fe82 	bl	8000200 <memchr>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d036      	beq.n	800756e <_svfiprintf_r+0x1d2>
 8007500:	4b21      	ldr	r3, [pc, #132]	@ (8007588 <_svfiprintf_r+0x1ec>)
 8007502:	bb1b      	cbnz	r3, 800754c <_svfiprintf_r+0x1b0>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	3307      	adds	r3, #7
 8007508:	f023 0307 	bic.w	r3, r3, #7
 800750c:	3308      	adds	r3, #8
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007512:	4433      	add	r3, r6
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	e76a      	b.n	80073ee <_svfiprintf_r+0x52>
 8007518:	fb0c 3202 	mla	r2, ip, r2, r3
 800751c:	460c      	mov	r4, r1
 800751e:	2001      	movs	r0, #1
 8007520:	e7a8      	b.n	8007474 <_svfiprintf_r+0xd8>
 8007522:	2300      	movs	r3, #0
 8007524:	3401      	adds	r4, #1
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	4619      	mov	r1, r3
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4620      	mov	r0, r4
 8007530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007534:	3a30      	subs	r2, #48	@ 0x30
 8007536:	2a09      	cmp	r2, #9
 8007538:	d903      	bls.n	8007542 <_svfiprintf_r+0x1a6>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0c6      	beq.n	80074cc <_svfiprintf_r+0x130>
 800753e:	9105      	str	r1, [sp, #20]
 8007540:	e7c4      	b.n	80074cc <_svfiprintf_r+0x130>
 8007542:	fb0c 2101 	mla	r1, ip, r1, r2
 8007546:	4604      	mov	r4, r0
 8007548:	2301      	movs	r3, #1
 800754a:	e7f0      	b.n	800752e <_svfiprintf_r+0x192>
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	462a      	mov	r2, r5
 8007552:	4b0e      	ldr	r3, [pc, #56]	@ (800758c <_svfiprintf_r+0x1f0>)
 8007554:	a904      	add	r1, sp, #16
 8007556:	4638      	mov	r0, r7
 8007558:	f3af 8000 	nop.w
 800755c:	1c42      	adds	r2, r0, #1
 800755e:	4606      	mov	r6, r0
 8007560:	d1d6      	bne.n	8007510 <_svfiprintf_r+0x174>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	065b      	lsls	r3, r3, #25
 8007566:	f53f af2d 	bmi.w	80073c4 <_svfiprintf_r+0x28>
 800756a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800756c:	e72c      	b.n	80073c8 <_svfiprintf_r+0x2c>
 800756e:	ab03      	add	r3, sp, #12
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	462a      	mov	r2, r5
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <_svfiprintf_r+0x1f0>)
 8007576:	a904      	add	r1, sp, #16
 8007578:	4638      	mov	r0, r7
 800757a:	f000 f879 	bl	8007670 <_printf_i>
 800757e:	e7ed      	b.n	800755c <_svfiprintf_r+0x1c0>
 8007580:	08008a54 	.word	0x08008a54
 8007584:	08008a5e 	.word	0x08008a5e
 8007588:	00000000 	.word	0x00000000
 800758c:	080072e5 	.word	0x080072e5
 8007590:	08008a5a 	.word	0x08008a5a

08007594 <_printf_common>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	4616      	mov	r6, r2
 800759a:	4698      	mov	r8, r3
 800759c:	688a      	ldr	r2, [r1, #8]
 800759e:	690b      	ldr	r3, [r1, #16]
 80075a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bfb8      	it	lt
 80075a8:	4613      	movlt	r3, r2
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b0:	4607      	mov	r7, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b10a      	cbz	r2, 80075ba <_printf_common+0x26>
 80075b6:	3301      	adds	r3, #1
 80075b8:	6033      	str	r3, [r6, #0]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	0699      	lsls	r1, r3, #26
 80075be:	bf42      	ittt	mi
 80075c0:	6833      	ldrmi	r3, [r6, #0]
 80075c2:	3302      	addmi	r3, #2
 80075c4:	6033      	strmi	r3, [r6, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	f015 0506 	ands.w	r5, r5, #6
 80075cc:	d106      	bne.n	80075dc <_printf_common+0x48>
 80075ce:	f104 0a19 	add.w	sl, r4, #25
 80075d2:	68e3      	ldr	r3, [r4, #12]
 80075d4:	6832      	ldr	r2, [r6, #0]
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	42ab      	cmp	r3, r5
 80075da:	dc26      	bgt.n	800762a <_printf_common+0x96>
 80075dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	3b00      	subs	r3, #0
 80075e4:	bf18      	it	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	0692      	lsls	r2, r2, #26
 80075ea:	d42b      	bmi.n	8007644 <_printf_common+0xb0>
 80075ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f0:	4641      	mov	r1, r8
 80075f2:	4638      	mov	r0, r7
 80075f4:	47c8      	blx	r9
 80075f6:	3001      	adds	r0, #1
 80075f8:	d01e      	beq.n	8007638 <_printf_common+0xa4>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	6922      	ldr	r2, [r4, #16]
 80075fe:	f003 0306 	and.w	r3, r3, #6
 8007602:	2b04      	cmp	r3, #4
 8007604:	bf02      	ittt	eq
 8007606:	68e5      	ldreq	r5, [r4, #12]
 8007608:	6833      	ldreq	r3, [r6, #0]
 800760a:	1aed      	subeq	r5, r5, r3
 800760c:	68a3      	ldr	r3, [r4, #8]
 800760e:	bf0c      	ite	eq
 8007610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007614:	2500      	movne	r5, #0
 8007616:	4293      	cmp	r3, r2
 8007618:	bfc4      	itt	gt
 800761a:	1a9b      	subgt	r3, r3, r2
 800761c:	18ed      	addgt	r5, r5, r3
 800761e:	2600      	movs	r6, #0
 8007620:	341a      	adds	r4, #26
 8007622:	42b5      	cmp	r5, r6
 8007624:	d11a      	bne.n	800765c <_printf_common+0xc8>
 8007626:	2000      	movs	r0, #0
 8007628:	e008      	b.n	800763c <_printf_common+0xa8>
 800762a:	2301      	movs	r3, #1
 800762c:	4652      	mov	r2, sl
 800762e:	4641      	mov	r1, r8
 8007630:	4638      	mov	r0, r7
 8007632:	47c8      	blx	r9
 8007634:	3001      	adds	r0, #1
 8007636:	d103      	bne.n	8007640 <_printf_common+0xac>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	3501      	adds	r5, #1
 8007642:	e7c6      	b.n	80075d2 <_printf_common+0x3e>
 8007644:	18e1      	adds	r1, r4, r3
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	2030      	movs	r0, #48	@ 0x30
 800764a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800764e:	4422      	add	r2, r4
 8007650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007658:	3302      	adds	r3, #2
 800765a:	e7c7      	b.n	80075ec <_printf_common+0x58>
 800765c:	2301      	movs	r3, #1
 800765e:	4622      	mov	r2, r4
 8007660:	4641      	mov	r1, r8
 8007662:	4638      	mov	r0, r7
 8007664:	47c8      	blx	r9
 8007666:	3001      	adds	r0, #1
 8007668:	d0e6      	beq.n	8007638 <_printf_common+0xa4>
 800766a:	3601      	adds	r6, #1
 800766c:	e7d9      	b.n	8007622 <_printf_common+0x8e>
	...

08007670 <_printf_i>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	7e0f      	ldrb	r7, [r1, #24]
 8007676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007678:	2f78      	cmp	r7, #120	@ 0x78
 800767a:	4691      	mov	r9, r2
 800767c:	4680      	mov	r8, r0
 800767e:	460c      	mov	r4, r1
 8007680:	469a      	mov	sl, r3
 8007682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007686:	d807      	bhi.n	8007698 <_printf_i+0x28>
 8007688:	2f62      	cmp	r7, #98	@ 0x62
 800768a:	d80a      	bhi.n	80076a2 <_printf_i+0x32>
 800768c:	2f00      	cmp	r7, #0
 800768e:	f000 80d2 	beq.w	8007836 <_printf_i+0x1c6>
 8007692:	2f58      	cmp	r7, #88	@ 0x58
 8007694:	f000 80b9 	beq.w	800780a <_printf_i+0x19a>
 8007698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800769c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a0:	e03a      	b.n	8007718 <_printf_i+0xa8>
 80076a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076a6:	2b15      	cmp	r3, #21
 80076a8:	d8f6      	bhi.n	8007698 <_printf_i+0x28>
 80076aa:	a101      	add	r1, pc, #4	@ (adr r1, 80076b0 <_printf_i+0x40>)
 80076ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b0:	08007709 	.word	0x08007709
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	08007699 	.word	0x08007699
 80076bc:	08007699 	.word	0x08007699
 80076c0:	08007699 	.word	0x08007699
 80076c4:	08007699 	.word	0x08007699
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007699 	.word	0x08007699
 80076d0:	08007699 	.word	0x08007699
 80076d4:	08007699 	.word	0x08007699
 80076d8:	08007699 	.word	0x08007699
 80076dc:	0800781d 	.word	0x0800781d
 80076e0:	08007747 	.word	0x08007747
 80076e4:	080077d7 	.word	0x080077d7
 80076e8:	08007699 	.word	0x08007699
 80076ec:	08007699 	.word	0x08007699
 80076f0:	0800783f 	.word	0x0800783f
 80076f4:	08007699 	.word	0x08007699
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007699 	.word	0x08007699
 8007700:	08007699 	.word	0x08007699
 8007704:	080077df 	.word	0x080077df
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6032      	str	r2, [r6, #0]
 8007710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007718:	2301      	movs	r3, #1
 800771a:	e09d      	b.n	8007858 <_printf_i+0x1e8>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	6820      	ldr	r0, [r4, #0]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	6031      	str	r1, [r6, #0]
 8007724:	0606      	lsls	r6, r0, #24
 8007726:	d501      	bpl.n	800772c <_printf_i+0xbc>
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	e003      	b.n	8007734 <_printf_i+0xc4>
 800772c:	0645      	lsls	r5, r0, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0xb8>
 8007730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007734:	2d00      	cmp	r5, #0
 8007736:	da03      	bge.n	8007740 <_printf_i+0xd0>
 8007738:	232d      	movs	r3, #45	@ 0x2d
 800773a:	426d      	negs	r5, r5
 800773c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007740:	4859      	ldr	r0, [pc, #356]	@ (80078a8 <_printf_i+0x238>)
 8007742:	230a      	movs	r3, #10
 8007744:	e011      	b.n	800776a <_printf_i+0xfa>
 8007746:	6821      	ldr	r1, [r4, #0]
 8007748:	6833      	ldr	r3, [r6, #0]
 800774a:	0608      	lsls	r0, r1, #24
 800774c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007750:	d402      	bmi.n	8007758 <_printf_i+0xe8>
 8007752:	0649      	lsls	r1, r1, #25
 8007754:	bf48      	it	mi
 8007756:	b2ad      	uxthmi	r5, r5
 8007758:	2f6f      	cmp	r7, #111	@ 0x6f
 800775a:	4853      	ldr	r0, [pc, #332]	@ (80078a8 <_printf_i+0x238>)
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	bf14      	ite	ne
 8007760:	230a      	movne	r3, #10
 8007762:	2308      	moveq	r3, #8
 8007764:	2100      	movs	r1, #0
 8007766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800776a:	6866      	ldr	r6, [r4, #4]
 800776c:	60a6      	str	r6, [r4, #8]
 800776e:	2e00      	cmp	r6, #0
 8007770:	bfa2      	ittt	ge
 8007772:	6821      	ldrge	r1, [r4, #0]
 8007774:	f021 0104 	bicge.w	r1, r1, #4
 8007778:	6021      	strge	r1, [r4, #0]
 800777a:	b90d      	cbnz	r5, 8007780 <_printf_i+0x110>
 800777c:	2e00      	cmp	r6, #0
 800777e:	d04b      	beq.n	8007818 <_printf_i+0x1a8>
 8007780:	4616      	mov	r6, r2
 8007782:	fbb5 f1f3 	udiv	r1, r5, r3
 8007786:	fb03 5711 	mls	r7, r3, r1, r5
 800778a:	5dc7      	ldrb	r7, [r0, r7]
 800778c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007790:	462f      	mov	r7, r5
 8007792:	42bb      	cmp	r3, r7
 8007794:	460d      	mov	r5, r1
 8007796:	d9f4      	bls.n	8007782 <_printf_i+0x112>
 8007798:	2b08      	cmp	r3, #8
 800779a:	d10b      	bne.n	80077b4 <_printf_i+0x144>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	07df      	lsls	r7, r3, #31
 80077a0:	d508      	bpl.n	80077b4 <_printf_i+0x144>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	6861      	ldr	r1, [r4, #4]
 80077a6:	4299      	cmp	r1, r3
 80077a8:	bfde      	ittt	le
 80077aa:	2330      	movle	r3, #48	@ 0x30
 80077ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077b4:	1b92      	subs	r2, r2, r6
 80077b6:	6122      	str	r2, [r4, #16]
 80077b8:	f8cd a000 	str.w	sl, [sp]
 80077bc:	464b      	mov	r3, r9
 80077be:	aa03      	add	r2, sp, #12
 80077c0:	4621      	mov	r1, r4
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7ff fee6 	bl	8007594 <_printf_common>
 80077c8:	3001      	adds	r0, #1
 80077ca:	d14a      	bne.n	8007862 <_printf_i+0x1f2>
 80077cc:	f04f 30ff 	mov.w	r0, #4294967295
 80077d0:	b004      	add	sp, #16
 80077d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f043 0320 	orr.w	r3, r3, #32
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	4833      	ldr	r0, [pc, #204]	@ (80078ac <_printf_i+0x23c>)
 80077e0:	2778      	movs	r7, #120	@ 0x78
 80077e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	6831      	ldr	r1, [r6, #0]
 80077ea:	061f      	lsls	r7, r3, #24
 80077ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f0:	d402      	bmi.n	80077f8 <_printf_i+0x188>
 80077f2:	065f      	lsls	r7, r3, #25
 80077f4:	bf48      	it	mi
 80077f6:	b2ad      	uxthmi	r5, r5
 80077f8:	6031      	str	r1, [r6, #0]
 80077fa:	07d9      	lsls	r1, r3, #31
 80077fc:	bf44      	itt	mi
 80077fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007802:	6023      	strmi	r3, [r4, #0]
 8007804:	b11d      	cbz	r5, 800780e <_printf_i+0x19e>
 8007806:	2310      	movs	r3, #16
 8007808:	e7ac      	b.n	8007764 <_printf_i+0xf4>
 800780a:	4827      	ldr	r0, [pc, #156]	@ (80078a8 <_printf_i+0x238>)
 800780c:	e7e9      	b.n	80077e2 <_printf_i+0x172>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f023 0320 	bic.w	r3, r3, #32
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	e7f6      	b.n	8007806 <_printf_i+0x196>
 8007818:	4616      	mov	r6, r2
 800781a:	e7bd      	b.n	8007798 <_printf_i+0x128>
 800781c:	6833      	ldr	r3, [r6, #0]
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	6961      	ldr	r1, [r4, #20]
 8007822:	1d18      	adds	r0, r3, #4
 8007824:	6030      	str	r0, [r6, #0]
 8007826:	062e      	lsls	r6, r5, #24
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	d501      	bpl.n	8007830 <_printf_i+0x1c0>
 800782c:	6019      	str	r1, [r3, #0]
 800782e:	e002      	b.n	8007836 <_printf_i+0x1c6>
 8007830:	0668      	lsls	r0, r5, #25
 8007832:	d5fb      	bpl.n	800782c <_printf_i+0x1bc>
 8007834:	8019      	strh	r1, [r3, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	6123      	str	r3, [r4, #16]
 800783a:	4616      	mov	r6, r2
 800783c:	e7bc      	b.n	80077b8 <_printf_i+0x148>
 800783e:	6833      	ldr	r3, [r6, #0]
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	6032      	str	r2, [r6, #0]
 8007844:	681e      	ldr	r6, [r3, #0]
 8007846:	6862      	ldr	r2, [r4, #4]
 8007848:	2100      	movs	r1, #0
 800784a:	4630      	mov	r0, r6
 800784c:	f7f8 fcd8 	bl	8000200 <memchr>
 8007850:	b108      	cbz	r0, 8007856 <_printf_i+0x1e6>
 8007852:	1b80      	subs	r0, r0, r6
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	6863      	ldr	r3, [r4, #4]
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	2300      	movs	r3, #0
 800785c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007860:	e7aa      	b.n	80077b8 <_printf_i+0x148>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	4632      	mov	r2, r6
 8007866:	4649      	mov	r1, r9
 8007868:	4640      	mov	r0, r8
 800786a:	47d0      	blx	sl
 800786c:	3001      	adds	r0, #1
 800786e:	d0ad      	beq.n	80077cc <_printf_i+0x15c>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	079b      	lsls	r3, r3, #30
 8007874:	d413      	bmi.n	800789e <_printf_i+0x22e>
 8007876:	68e0      	ldr	r0, [r4, #12]
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	4298      	cmp	r0, r3
 800787c:	bfb8      	it	lt
 800787e:	4618      	movlt	r0, r3
 8007880:	e7a6      	b.n	80077d0 <_printf_i+0x160>
 8007882:	2301      	movs	r3, #1
 8007884:	4632      	mov	r2, r6
 8007886:	4649      	mov	r1, r9
 8007888:	4640      	mov	r0, r8
 800788a:	47d0      	blx	sl
 800788c:	3001      	adds	r0, #1
 800788e:	d09d      	beq.n	80077cc <_printf_i+0x15c>
 8007890:	3501      	adds	r5, #1
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	9903      	ldr	r1, [sp, #12]
 8007896:	1a5b      	subs	r3, r3, r1
 8007898:	42ab      	cmp	r3, r5
 800789a:	dcf2      	bgt.n	8007882 <_printf_i+0x212>
 800789c:	e7eb      	b.n	8007876 <_printf_i+0x206>
 800789e:	2500      	movs	r5, #0
 80078a0:	f104 0619 	add.w	r6, r4, #25
 80078a4:	e7f5      	b.n	8007892 <_printf_i+0x222>
 80078a6:	bf00      	nop
 80078a8:	08008a65 	.word	0x08008a65
 80078ac:	08008a76 	.word	0x08008a76

080078b0 <memmove>:
 80078b0:	4288      	cmp	r0, r1
 80078b2:	b510      	push	{r4, lr}
 80078b4:	eb01 0402 	add.w	r4, r1, r2
 80078b8:	d902      	bls.n	80078c0 <memmove+0x10>
 80078ba:	4284      	cmp	r4, r0
 80078bc:	4623      	mov	r3, r4
 80078be:	d807      	bhi.n	80078d0 <memmove+0x20>
 80078c0:	1e43      	subs	r3, r0, #1
 80078c2:	42a1      	cmp	r1, r4
 80078c4:	d008      	beq.n	80078d8 <memmove+0x28>
 80078c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ce:	e7f8      	b.n	80078c2 <memmove+0x12>
 80078d0:	4402      	add	r2, r0
 80078d2:	4601      	mov	r1, r0
 80078d4:	428a      	cmp	r2, r1
 80078d6:	d100      	bne.n	80078da <memmove+0x2a>
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078e2:	e7f7      	b.n	80078d4 <memmove+0x24>

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7fb faf0 	bl	8002ed4 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000740 	.word	0x20000740

08007904 <memcpy>:
 8007904:	440a      	add	r2, r1
 8007906:	4291      	cmp	r1, r2
 8007908:	f100 33ff 	add.w	r3, r0, #4294967295
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	4770      	bx	lr
 8007910:	b510      	push	{r4, lr}
 8007912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791a:	4291      	cmp	r1, r2
 800791c:	d1f9      	bne.n	8007912 <memcpy+0xe>
 800791e:	bd10      	pop	{r4, pc}

08007920 <_realloc_r>:
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	4680      	mov	r8, r0
 8007926:	4615      	mov	r5, r2
 8007928:	460c      	mov	r4, r1
 800792a:	b921      	cbnz	r1, 8007936 <_realloc_r+0x16>
 800792c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007930:	4611      	mov	r1, r2
 8007932:	f7ff bc4b 	b.w	80071cc <_malloc_r>
 8007936:	b92a      	cbnz	r2, 8007944 <_realloc_r+0x24>
 8007938:	f7ff fbdc 	bl	80070f4 <_free_r>
 800793c:	2400      	movs	r4, #0
 800793e:	4620      	mov	r0, r4
 8007940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007944:	f000 f81a 	bl	800797c <_malloc_usable_size_r>
 8007948:	4285      	cmp	r5, r0
 800794a:	4606      	mov	r6, r0
 800794c:	d802      	bhi.n	8007954 <_realloc_r+0x34>
 800794e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007952:	d8f4      	bhi.n	800793e <_realloc_r+0x1e>
 8007954:	4629      	mov	r1, r5
 8007956:	4640      	mov	r0, r8
 8007958:	f7ff fc38 	bl	80071cc <_malloc_r>
 800795c:	4607      	mov	r7, r0
 800795e:	2800      	cmp	r0, #0
 8007960:	d0ec      	beq.n	800793c <_realloc_r+0x1c>
 8007962:	42b5      	cmp	r5, r6
 8007964:	462a      	mov	r2, r5
 8007966:	4621      	mov	r1, r4
 8007968:	bf28      	it	cs
 800796a:	4632      	movcs	r2, r6
 800796c:	f7ff ffca 	bl	8007904 <memcpy>
 8007970:	4621      	mov	r1, r4
 8007972:	4640      	mov	r0, r8
 8007974:	f7ff fbbe 	bl	80070f4 <_free_r>
 8007978:	463c      	mov	r4, r7
 800797a:	e7e0      	b.n	800793e <_realloc_r+0x1e>

0800797c <_malloc_usable_size_r>:
 800797c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007980:	1f18      	subs	r0, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	bfbc      	itt	lt
 8007986:	580b      	ldrlt	r3, [r1, r0]
 8007988:	18c0      	addlt	r0, r0, r3
 800798a:	4770      	bx	lr

0800798c <pow>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	ed2d 8b02 	vpush	{d8}
 8007992:	eeb0 8a40 	vmov.f32	s16, s0
 8007996:	eef0 8a60 	vmov.f32	s17, s1
 800799a:	ec55 4b11 	vmov	r4, r5, d1
 800799e:	f000 f873 	bl	8007a88 <__ieee754_pow>
 80079a2:	4622      	mov	r2, r4
 80079a4:	462b      	mov	r3, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	ec57 6b10 	vmov	r6, r7, d0
 80079ae:	f7f9 f8cd 	bl	8000b4c <__aeabi_dcmpun>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d13b      	bne.n	8007a2e <pow+0xa2>
 80079b6:	ec51 0b18 	vmov	r0, r1, d8
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	f7f9 f893 	bl	8000ae8 <__aeabi_dcmpeq>
 80079c2:	b1b8      	cbz	r0, 80079f4 <pow+0x68>
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f9 f88c 	bl	8000ae8 <__aeabi_dcmpeq>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d146      	bne.n	8007a62 <pow+0xd6>
 80079d4:	ec45 4b10 	vmov	d0, r4, r5
 80079d8:	f000 f848 	bl	8007a6c <finite>
 80079dc:	b338      	cbz	r0, 8007a2e <pow+0xa2>
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4620      	mov	r0, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7f9 f889 	bl	8000afc <__aeabi_dcmplt>
 80079ea:	b300      	cbz	r0, 8007a2e <pow+0xa2>
 80079ec:	f7ff fb56 	bl	800709c <__errno>
 80079f0:	2322      	movs	r3, #34	@ 0x22
 80079f2:	e01b      	b.n	8007a2c <pow+0xa0>
 80079f4:	ec47 6b10 	vmov	d0, r6, r7
 80079f8:	f000 f838 	bl	8007a6c <finite>
 80079fc:	b9e0      	cbnz	r0, 8007a38 <pow+0xac>
 80079fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007a02:	eef0 0a68 	vmov.f32	s1, s17
 8007a06:	f000 f831 	bl	8007a6c <finite>
 8007a0a:	b1a8      	cbz	r0, 8007a38 <pow+0xac>
 8007a0c:	ec45 4b10 	vmov	d0, r4, r5
 8007a10:	f000 f82c 	bl	8007a6c <finite>
 8007a14:	b180      	cbz	r0, 8007a38 <pow+0xac>
 8007a16:	4632      	mov	r2, r6
 8007a18:	463b      	mov	r3, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	f7f9 f895 	bl	8000b4c <__aeabi_dcmpun>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d0e2      	beq.n	80079ec <pow+0x60>
 8007a26:	f7ff fb39 	bl	800709c <__errno>
 8007a2a:	2321      	movs	r3, #33	@ 0x21
 8007a2c:	6003      	str	r3, [r0, #0]
 8007a2e:	ecbd 8b02 	vpop	{d8}
 8007a32:	ec47 6b10 	vmov	d0, r6, r7
 8007a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f9 f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d0f2      	beq.n	8007a2e <pow+0xa2>
 8007a48:	eeb0 0a48 	vmov.f32	s0, s16
 8007a4c:	eef0 0a68 	vmov.f32	s1, s17
 8007a50:	f000 f80c 	bl	8007a6c <finite>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0ea      	beq.n	8007a2e <pow+0xa2>
 8007a58:	ec45 4b10 	vmov	d0, r4, r5
 8007a5c:	f000 f806 	bl	8007a6c <finite>
 8007a60:	e7c3      	b.n	80079ea <pow+0x5e>
 8007a62:	4f01      	ldr	r7, [pc, #4]	@ (8007a68 <pow+0xdc>)
 8007a64:	2600      	movs	r6, #0
 8007a66:	e7e2      	b.n	8007a2e <pow+0xa2>
 8007a68:	3ff00000 	.word	0x3ff00000

08007a6c <finite>:
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	ed8d 0b00 	vstr	d0, [sp]
 8007a72:	9801      	ldr	r0, [sp, #4]
 8007a74:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007a78:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007a7c:	0fc0      	lsrs	r0, r0, #31
 8007a7e:	b002      	add	sp, #8
 8007a80:	4770      	bx	lr
 8007a82:	0000      	movs	r0, r0
 8007a84:	0000      	movs	r0, r0
	...

08007a88 <__ieee754_pow>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	b091      	sub	sp, #68	@ 0x44
 8007a8e:	ed8d 1b00 	vstr	d1, [sp]
 8007a92:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007a96:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007a9a:	ea5a 0001 	orrs.w	r0, sl, r1
 8007a9e:	ec57 6b10 	vmov	r6, r7, d0
 8007aa2:	d113      	bne.n	8007acc <__ieee754_pow+0x44>
 8007aa4:	19b3      	adds	r3, r6, r6
 8007aa6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007aaa:	4152      	adcs	r2, r2
 8007aac:	4298      	cmp	r0, r3
 8007aae:	4b98      	ldr	r3, [pc, #608]	@ (8007d10 <__ieee754_pow+0x288>)
 8007ab0:	4193      	sbcs	r3, r2
 8007ab2:	f080 84ea 	bcs.w	800848a <__ieee754_pow+0xa02>
 8007ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aba:	4630      	mov	r0, r6
 8007abc:	4639      	mov	r1, r7
 8007abe:	f7f8 fbf5 	bl	80002ac <__adddf3>
 8007ac2:	ec41 0b10 	vmov	d0, r0, r1
 8007ac6:	b011      	add	sp, #68	@ 0x44
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	4a91      	ldr	r2, [pc, #580]	@ (8007d14 <__ieee754_pow+0x28c>)
 8007ace:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ad2:	4590      	cmp	r8, r2
 8007ad4:	463d      	mov	r5, r7
 8007ad6:	4633      	mov	r3, r6
 8007ad8:	d806      	bhi.n	8007ae8 <__ieee754_pow+0x60>
 8007ada:	d101      	bne.n	8007ae0 <__ieee754_pow+0x58>
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	d1ea      	bne.n	8007ab6 <__ieee754_pow+0x2e>
 8007ae0:	4592      	cmp	sl, r2
 8007ae2:	d801      	bhi.n	8007ae8 <__ieee754_pow+0x60>
 8007ae4:	d10e      	bne.n	8007b04 <__ieee754_pow+0x7c>
 8007ae6:	b169      	cbz	r1, 8007b04 <__ieee754_pow+0x7c>
 8007ae8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007aec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007af0:	431d      	orrs	r5, r3
 8007af2:	d1e0      	bne.n	8007ab6 <__ieee754_pow+0x2e>
 8007af4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007af8:	18db      	adds	r3, r3, r3
 8007afa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007afe:	4152      	adcs	r2, r2
 8007b00:	429d      	cmp	r5, r3
 8007b02:	e7d4      	b.n	8007aae <__ieee754_pow+0x26>
 8007b04:	2d00      	cmp	r5, #0
 8007b06:	46c3      	mov	fp, r8
 8007b08:	da3a      	bge.n	8007b80 <__ieee754_pow+0xf8>
 8007b0a:	4a83      	ldr	r2, [pc, #524]	@ (8007d18 <__ieee754_pow+0x290>)
 8007b0c:	4592      	cmp	sl, r2
 8007b0e:	d84d      	bhi.n	8007bac <__ieee754_pow+0x124>
 8007b10:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007b14:	4592      	cmp	sl, r2
 8007b16:	f240 84c7 	bls.w	80084a8 <__ieee754_pow+0xa20>
 8007b1a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007b1e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007b22:	2a14      	cmp	r2, #20
 8007b24:	dd0f      	ble.n	8007b46 <__ieee754_pow+0xbe>
 8007b26:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007b2a:	fa21 f402 	lsr.w	r4, r1, r2
 8007b2e:	fa04 f202 	lsl.w	r2, r4, r2
 8007b32:	428a      	cmp	r2, r1
 8007b34:	f040 84b8 	bne.w	80084a8 <__ieee754_pow+0xa20>
 8007b38:	f004 0401 	and.w	r4, r4, #1
 8007b3c:	f1c4 0402 	rsb	r4, r4, #2
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d158      	bne.n	8007bf6 <__ieee754_pow+0x16e>
 8007b44:	e00e      	b.n	8007b64 <__ieee754_pow+0xdc>
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d154      	bne.n	8007bf4 <__ieee754_pow+0x16c>
 8007b4a:	f1c2 0214 	rsb	r2, r2, #20
 8007b4e:	fa4a f402 	asr.w	r4, sl, r2
 8007b52:	fa04 f202 	lsl.w	r2, r4, r2
 8007b56:	4552      	cmp	r2, sl
 8007b58:	f040 84a3 	bne.w	80084a2 <__ieee754_pow+0xa1a>
 8007b5c:	f004 0401 	and.w	r4, r4, #1
 8007b60:	f1c4 0402 	rsb	r4, r4, #2
 8007b64:	4a6d      	ldr	r2, [pc, #436]	@ (8007d1c <__ieee754_pow+0x294>)
 8007b66:	4592      	cmp	sl, r2
 8007b68:	d12e      	bne.n	8007bc8 <__ieee754_pow+0x140>
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	f280 8494 	bge.w	800849a <__ieee754_pow+0xa12>
 8007b72:	496a      	ldr	r1, [pc, #424]	@ (8007d1c <__ieee754_pow+0x294>)
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7f8 fe77 	bl	800086c <__aeabi_ddiv>
 8007b7e:	e7a0      	b.n	8007ac2 <__ieee754_pow+0x3a>
 8007b80:	2400      	movs	r4, #0
 8007b82:	bbc1      	cbnz	r1, 8007bf6 <__ieee754_pow+0x16e>
 8007b84:	4a63      	ldr	r2, [pc, #396]	@ (8007d14 <__ieee754_pow+0x28c>)
 8007b86:	4592      	cmp	sl, r2
 8007b88:	d1ec      	bne.n	8007b64 <__ieee754_pow+0xdc>
 8007b8a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007b8e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007b92:	431a      	orrs	r2, r3
 8007b94:	f000 8479 	beq.w	800848a <__ieee754_pow+0xa02>
 8007b98:	4b61      	ldr	r3, [pc, #388]	@ (8007d20 <__ieee754_pow+0x298>)
 8007b9a:	4598      	cmp	r8, r3
 8007b9c:	d908      	bls.n	8007bb0 <__ieee754_pow+0x128>
 8007b9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ba2:	f2c0 8476 	blt.w	8008492 <__ieee754_pow+0xa0a>
 8007ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007baa:	e78a      	b.n	8007ac2 <__ieee754_pow+0x3a>
 8007bac:	2402      	movs	r4, #2
 8007bae:	e7e8      	b.n	8007b82 <__ieee754_pow+0xfa>
 8007bb0:	f1b9 0f00 	cmp.w	r9, #0
 8007bb4:	f04f 0000 	mov.w	r0, #0
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	da81      	bge.n	8007ac2 <__ieee754_pow+0x3a>
 8007bbe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007bc2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007bc6:	e77c      	b.n	8007ac2 <__ieee754_pow+0x3a>
 8007bc8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007bcc:	d106      	bne.n	8007bdc <__ieee754_pow+0x154>
 8007bce:	4632      	mov	r2, r6
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fd1f 	bl	8000618 <__aeabi_dmul>
 8007bda:	e772      	b.n	8007ac2 <__ieee754_pow+0x3a>
 8007bdc:	4a51      	ldr	r2, [pc, #324]	@ (8007d24 <__ieee754_pow+0x29c>)
 8007bde:	4591      	cmp	r9, r2
 8007be0:	d109      	bne.n	8007bf6 <__ieee754_pow+0x16e>
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	db07      	blt.n	8007bf6 <__ieee754_pow+0x16e>
 8007be6:	ec47 6b10 	vmov	d0, r6, r7
 8007bea:	b011      	add	sp, #68	@ 0x44
 8007bec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	f000 bd52 	b.w	8008698 <__ieee754_sqrt>
 8007bf4:	2400      	movs	r4, #0
 8007bf6:	ec47 6b10 	vmov	d0, r6, r7
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	f000 fc88 	bl	8008510 <fabs>
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	ec51 0b10 	vmov	r0, r1, d0
 8007c06:	bb53      	cbnz	r3, 8007c5e <__ieee754_pow+0x1d6>
 8007c08:	4b44      	ldr	r3, [pc, #272]	@ (8007d1c <__ieee754_pow+0x294>)
 8007c0a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d002      	beq.n	8007c18 <__ieee754_pow+0x190>
 8007c12:	f1b8 0f00 	cmp.w	r8, #0
 8007c16:	d122      	bne.n	8007c5e <__ieee754_pow+0x1d6>
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	da05      	bge.n	8007c2a <__ieee754_pow+0x1a2>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	2000      	movs	r0, #0
 8007c24:	493d      	ldr	r1, [pc, #244]	@ (8007d1c <__ieee754_pow+0x294>)
 8007c26:	f7f8 fe21 	bl	800086c <__aeabi_ddiv>
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	f6bf af49 	bge.w	8007ac2 <__ieee754_pow+0x3a>
 8007c30:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007c34:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007c38:	ea58 0804 	orrs.w	r8, r8, r4
 8007c3c:	d108      	bne.n	8007c50 <__ieee754_pow+0x1c8>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	f7f8 fb2f 	bl	80002a8 <__aeabi_dsub>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e794      	b.n	8007b7a <__ieee754_pow+0xf2>
 8007c50:	2c01      	cmp	r4, #1
 8007c52:	f47f af36 	bne.w	8007ac2 <__ieee754_pow+0x3a>
 8007c56:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	e731      	b.n	8007ac2 <__ieee754_pow+0x3a>
 8007c5e:	0feb      	lsrs	r3, r5, #31
 8007c60:	3b01      	subs	r3, #1
 8007c62:	ea53 0204 	orrs.w	r2, r3, r4
 8007c66:	d102      	bne.n	8007c6e <__ieee754_pow+0x1e6>
 8007c68:	4632      	mov	r2, r6
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	e7e9      	b.n	8007c42 <__ieee754_pow+0x1ba>
 8007c6e:	3c01      	subs	r4, #1
 8007c70:	431c      	orrs	r4, r3
 8007c72:	d016      	beq.n	8007ca2 <__ieee754_pow+0x21a>
 8007c74:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007d00 <__ieee754_pow+0x278>
 8007c78:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c80:	f240 8112 	bls.w	8007ea8 <__ieee754_pow+0x420>
 8007c84:	4b28      	ldr	r3, [pc, #160]	@ (8007d28 <__ieee754_pow+0x2a0>)
 8007c86:	459a      	cmp	sl, r3
 8007c88:	4b25      	ldr	r3, [pc, #148]	@ (8007d20 <__ieee754_pow+0x298>)
 8007c8a:	d916      	bls.n	8007cba <__ieee754_pow+0x232>
 8007c8c:	4598      	cmp	r8, r3
 8007c8e:	d80b      	bhi.n	8007ca8 <__ieee754_pow+0x220>
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	da0b      	bge.n	8007cae <__ieee754_pow+0x226>
 8007c96:	2000      	movs	r0, #0
 8007c98:	b011      	add	sp, #68	@ 0x44
 8007c9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9e:	f000 bcf3 	b.w	8008688 <__math_oflow>
 8007ca2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007d08 <__ieee754_pow+0x280>
 8007ca6:	e7e7      	b.n	8007c78 <__ieee754_pow+0x1f0>
 8007ca8:	f1b9 0f00 	cmp.w	r9, #0
 8007cac:	dcf3      	bgt.n	8007c96 <__ieee754_pow+0x20e>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	b011      	add	sp, #68	@ 0x44
 8007cb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f000 bcdf 	b.w	8008678 <__math_uflow>
 8007cba:	4598      	cmp	r8, r3
 8007cbc:	d20c      	bcs.n	8007cd8 <__ieee754_pow+0x250>
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f7f8 ff19 	bl	8000afc <__aeabi_dcmplt>
 8007cca:	3800      	subs	r0, #0
 8007ccc:	bf18      	it	ne
 8007cce:	2001      	movne	r0, #1
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	daec      	bge.n	8007cb0 <__ieee754_pow+0x228>
 8007cd6:	e7df      	b.n	8007c98 <__ieee754_pow+0x210>
 8007cd8:	4b10      	ldr	r3, [pc, #64]	@ (8007d1c <__ieee754_pow+0x294>)
 8007cda:	4598      	cmp	r8, r3
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	d924      	bls.n	8007d2c <__ieee754_pow+0x2a4>
 8007ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f7f8 ff08 	bl	8000afc <__aeabi_dcmplt>
 8007cec:	3800      	subs	r0, #0
 8007cee:	bf18      	it	ne
 8007cf0:	2001      	movne	r0, #1
 8007cf2:	f1b9 0f00 	cmp.w	r9, #0
 8007cf6:	dccf      	bgt.n	8007c98 <__ieee754_pow+0x210>
 8007cf8:	e7da      	b.n	8007cb0 <__ieee754_pow+0x228>
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	00000000 	.word	0x00000000
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	bff00000 	.word	0xbff00000
 8007d10:	fff00000 	.word	0xfff00000
 8007d14:	7ff00000 	.word	0x7ff00000
 8007d18:	433fffff 	.word	0x433fffff
 8007d1c:	3ff00000 	.word	0x3ff00000
 8007d20:	3fefffff 	.word	0x3fefffff
 8007d24:	3fe00000 	.word	0x3fe00000
 8007d28:	43f00000 	.word	0x43f00000
 8007d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8007e98 <__ieee754_pow+0x410>)
 8007d2e:	f7f8 fabb 	bl	80002a8 <__aeabi_dsub>
 8007d32:	a351      	add	r3, pc, #324	@ (adr r3, 8007e78 <__ieee754_pow+0x3f0>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	f7f8 fc6c 	bl	8000618 <__aeabi_dmul>
 8007d40:	a34f      	add	r3, pc, #316	@ (adr r3, 8007e80 <__ieee754_pow+0x3f8>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	4606      	mov	r6, r0
 8007d48:	460f      	mov	r7, r1
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7f8 fc63 	bl	8000618 <__aeabi_dmul>
 8007d52:	4b52      	ldr	r3, [pc, #328]	@ (8007e9c <__ieee754_pow+0x414>)
 8007d54:	4682      	mov	sl, r0
 8007d56:	468b      	mov	fp, r1
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fc5b 	bl	8000618 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	a148      	add	r1, pc, #288	@ (adr r1, 8007e88 <__ieee754_pow+0x400>)
 8007d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6c:	f7f8 fa9c 	bl	80002a8 <__aeabi_dsub>
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	f7f8 fc50 	bl	8000618 <__aeabi_dmul>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4948      	ldr	r1, [pc, #288]	@ (8007ea0 <__ieee754_pow+0x418>)
 8007d80:	f7f8 fa92 	bl	80002a8 <__aeabi_dsub>
 8007d84:	4622      	mov	r2, r4
 8007d86:	4680      	mov	r8, r0
 8007d88:	4689      	mov	r9, r1
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fc42 	bl	8000618 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fc3c 	bl	8000618 <__aeabi_dmul>
 8007da0:	a33b      	add	r3, pc, #236	@ (adr r3, 8007e90 <__ieee754_pow+0x408>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc37 	bl	8000618 <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4650      	mov	r0, sl
 8007db0:	4659      	mov	r1, fp
 8007db2:	f7f8 fa79 	bl	80002a8 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fa73 	bl	80002ac <__adddf3>
 8007dc6:	2400      	movs	r4, #0
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	4620      	mov	r0, r4
 8007dce:	460d      	mov	r5, r1
 8007dd0:	f7f8 fa6a 	bl	80002a8 <__aeabi_dsub>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fa64 	bl	80002a8 <__aeabi_dsub>
 8007de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007de4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007de8:	2300      	movs	r3, #0
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007df0:	4606      	mov	r6, r0
 8007df2:	460f      	mov	r7, r1
 8007df4:	4652      	mov	r2, sl
 8007df6:	465b      	mov	r3, fp
 8007df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dfc:	f7f8 fa54 	bl	80002a8 <__aeabi_dsub>
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	f7f8 fc08 	bl	8000618 <__aeabi_dmul>
 8007e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	4689      	mov	r9, r1
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fc00 	bl	8000618 <__aeabi_dmul>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fa44 	bl	80002ac <__adddf3>
 8007e24:	4652      	mov	r2, sl
 8007e26:	465b      	mov	r3, fp
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fbf2 	bl	8000618 <__aeabi_dmul>
 8007e34:	460b      	mov	r3, r1
 8007e36:	4602      	mov	r2, r0
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 fa34 	bl	80002ac <__adddf3>
 8007e44:	4b17      	ldr	r3, [pc, #92]	@ (8007ea4 <__ieee754_pow+0x41c>)
 8007e46:	4299      	cmp	r1, r3
 8007e48:	4604      	mov	r4, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	468a      	mov	sl, r1
 8007e4e:	468b      	mov	fp, r1
 8007e50:	f340 82ef 	ble.w	8008432 <__ieee754_pow+0x9aa>
 8007e54:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007e58:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007e5c:	4303      	orrs	r3, r0
 8007e5e:	f000 81e8 	beq.w	8008232 <__ieee754_pow+0x7aa>
 8007e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f7f8 fe47 	bl	8000afc <__aeabi_dcmplt>
 8007e6e:	3800      	subs	r0, #0
 8007e70:	bf18      	it	ne
 8007e72:	2001      	movne	r0, #1
 8007e74:	e710      	b.n	8007c98 <__ieee754_pow+0x210>
 8007e76:	bf00      	nop
 8007e78:	60000000 	.word	0x60000000
 8007e7c:	3ff71547 	.word	0x3ff71547
 8007e80:	f85ddf44 	.word	0xf85ddf44
 8007e84:	3e54ae0b 	.word	0x3e54ae0b
 8007e88:	55555555 	.word	0x55555555
 8007e8c:	3fd55555 	.word	0x3fd55555
 8007e90:	652b82fe 	.word	0x652b82fe
 8007e94:	3ff71547 	.word	0x3ff71547
 8007e98:	3ff00000 	.word	0x3ff00000
 8007e9c:	3fd00000 	.word	0x3fd00000
 8007ea0:	3fe00000 	.word	0x3fe00000
 8007ea4:	408fffff 	.word	0x408fffff
 8007ea8:	4bd5      	ldr	r3, [pc, #852]	@ (8008200 <__ieee754_pow+0x778>)
 8007eaa:	402b      	ands	r3, r5
 8007eac:	2200      	movs	r2, #0
 8007eae:	b92b      	cbnz	r3, 8007ebc <__ieee754_pow+0x434>
 8007eb0:	4bd4      	ldr	r3, [pc, #848]	@ (8008204 <__ieee754_pow+0x77c>)
 8007eb2:	f7f8 fbb1 	bl	8000618 <__aeabi_dmul>
 8007eb6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007eba:	468b      	mov	fp, r1
 8007ebc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007ec0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007ec4:	4413      	add	r3, r2
 8007ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec8:	4bcf      	ldr	r3, [pc, #828]	@ (8008208 <__ieee754_pow+0x780>)
 8007eca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007ece:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007ed2:	459b      	cmp	fp, r3
 8007ed4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007ed8:	dd08      	ble.n	8007eec <__ieee754_pow+0x464>
 8007eda:	4bcc      	ldr	r3, [pc, #816]	@ (800820c <__ieee754_pow+0x784>)
 8007edc:	459b      	cmp	fp, r3
 8007ede:	f340 81a5 	ble.w	800822c <__ieee754_pow+0x7a4>
 8007ee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007eec:	f04f 0a00 	mov.w	sl, #0
 8007ef0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007ef4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef6:	4bc6      	ldr	r3, [pc, #792]	@ (8008210 <__ieee754_pow+0x788>)
 8007ef8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007efc:	ed93 7b00 	vldr	d7, [r3]
 8007f00:	4629      	mov	r1, r5
 8007f02:	ec53 2b17 	vmov	r2, r3, d7
 8007f06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f0e:	f7f8 f9cb 	bl	80002a8 <__aeabi_dsub>
 8007f12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f1e:	f7f8 f9c5 	bl	80002ac <__adddf3>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	2000      	movs	r0, #0
 8007f28:	49ba      	ldr	r1, [pc, #744]	@ (8008214 <__ieee754_pow+0x78c>)
 8007f2a:	f7f8 fc9f 	bl	800086c <__aeabi_ddiv>
 8007f2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 fb6d 	bl	8000618 <__aeabi_dmul>
 8007f3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f42:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007f46:	106d      	asrs	r5, r5, #1
 8007f48:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007f4c:	f04f 0b00 	mov.w	fp, #0
 8007f50:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007f54:	4661      	mov	r1, ip
 8007f56:	2200      	movs	r2, #0
 8007f58:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	46e1      	mov	r9, ip
 8007f60:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007f64:	4614      	mov	r4, r2
 8007f66:	461d      	mov	r5, r3
 8007f68:	f7f8 fb56 	bl	8000618 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 f998 	bl	80002a8 <__aeabi_dsub>
 8007f78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4620      	mov	r0, r4
 8007f82:	4629      	mov	r1, r5
 8007f84:	f7f8 f990 	bl	80002a8 <__aeabi_dsub>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f90:	f7f8 f98a 	bl	80002a8 <__aeabi_dsub>
 8007f94:	465a      	mov	r2, fp
 8007f96:	464b      	mov	r3, r9
 8007f98:	f7f8 fb3e 	bl	8000618 <__aeabi_dmul>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 f980 	bl	80002a8 <__aeabi_dsub>
 8007fa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fac:	f7f8 fb34 	bl	8000618 <__aeabi_dmul>
 8007fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f7f8 fb2c 	bl	8000618 <__aeabi_dmul>
 8007fc0:	a37d      	add	r3, pc, #500	@ (adr r3, 80081b8 <__ieee754_pow+0x730>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	f7f8 fb25 	bl	8000618 <__aeabi_dmul>
 8007fce:	a37c      	add	r3, pc, #496	@ (adr r3, 80081c0 <__ieee754_pow+0x738>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 f96a 	bl	80002ac <__adddf3>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f7f8 fb1c 	bl	8000618 <__aeabi_dmul>
 8007fe0:	a379      	add	r3, pc, #484	@ (adr r3, 80081c8 <__ieee754_pow+0x740>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f961 	bl	80002ac <__adddf3>
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	f7f8 fb13 	bl	8000618 <__aeabi_dmul>
 8007ff2:	a377      	add	r3, pc, #476	@ (adr r3, 80081d0 <__ieee754_pow+0x748>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 f958 	bl	80002ac <__adddf3>
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	462b      	mov	r3, r5
 8008000:	f7f8 fb0a 	bl	8000618 <__aeabi_dmul>
 8008004:	a374      	add	r3, pc, #464	@ (adr r3, 80081d8 <__ieee754_pow+0x750>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 f94f 	bl	80002ac <__adddf3>
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 fb01 	bl	8000618 <__aeabi_dmul>
 8008016:	a372      	add	r3, pc, #456	@ (adr r3, 80081e0 <__ieee754_pow+0x758>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f7f8 f946 	bl	80002ac <__adddf3>
 8008020:	4622      	mov	r2, r4
 8008022:	4606      	mov	r6, r0
 8008024:	460f      	mov	r7, r1
 8008026:	462b      	mov	r3, r5
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 faf4 	bl	8000618 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 faee 	bl	8000618 <__aeabi_dmul>
 800803c:	465a      	mov	r2, fp
 800803e:	4604      	mov	r4, r0
 8008040:	460d      	mov	r5, r1
 8008042:	464b      	mov	r3, r9
 8008044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008048:	f7f8 f930 	bl	80002ac <__adddf3>
 800804c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008050:	f7f8 fae2 	bl	8000618 <__aeabi_dmul>
 8008054:	4622      	mov	r2, r4
 8008056:	462b      	mov	r3, r5
 8008058:	f7f8 f928 	bl	80002ac <__adddf3>
 800805c:	465a      	mov	r2, fp
 800805e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008062:	464b      	mov	r3, r9
 8008064:	4658      	mov	r0, fp
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 fad6 	bl	8000618 <__aeabi_dmul>
 800806c:	4b6a      	ldr	r3, [pc, #424]	@ (8008218 <__ieee754_pow+0x790>)
 800806e:	2200      	movs	r2, #0
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 f91a 	bl	80002ac <__adddf3>
 8008078:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800807c:	f7f8 f916 	bl	80002ac <__adddf3>
 8008080:	46d8      	mov	r8, fp
 8008082:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008086:	460d      	mov	r5, r1
 8008088:	465a      	mov	r2, fp
 800808a:	460b      	mov	r3, r1
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008094:	f7f8 fac0 	bl	8000618 <__aeabi_dmul>
 8008098:	465c      	mov	r4, fp
 800809a:	4680      	mov	r8, r0
 800809c:	4689      	mov	r9, r1
 800809e:	4b5e      	ldr	r3, [pc, #376]	@ (8008218 <__ieee754_pow+0x790>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4620      	mov	r0, r4
 80080a4:	4629      	mov	r1, r5
 80080a6:	f7f8 f8ff 	bl	80002a8 <__aeabi_dsub>
 80080aa:	4632      	mov	r2, r6
 80080ac:	463b      	mov	r3, r7
 80080ae:	f7f8 f8fb 	bl	80002a8 <__aeabi_dsub>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080ba:	f7f8 f8f5 	bl	80002a8 <__aeabi_dsub>
 80080be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080c2:	f7f8 faa9 	bl	8000618 <__aeabi_dmul>
 80080c6:	4622      	mov	r2, r4
 80080c8:	4606      	mov	r6, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	462b      	mov	r3, r5
 80080ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d2:	f7f8 faa1 	bl	8000618 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 f8e5 	bl	80002ac <__adddf3>
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 f8dd 	bl	80002ac <__adddf3>
 80080f2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80080f6:	a33c      	add	r3, pc, #240	@ (adr r3, 80081e8 <__ieee754_pow+0x760>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	4658      	mov	r0, fp
 80080fe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008102:	460d      	mov	r5, r1
 8008104:	f7f8 fa88 	bl	8000618 <__aeabi_dmul>
 8008108:	465c      	mov	r4, fp
 800810a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f8c7 	bl	80002a8 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 f8c1 	bl	80002a8 <__aeabi_dsub>
 8008126:	a332      	add	r3, pc, #200	@ (adr r3, 80081f0 <__ieee754_pow+0x768>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 fa74 	bl	8000618 <__aeabi_dmul>
 8008130:	a331      	add	r3, pc, #196	@ (adr r3, 80081f8 <__ieee754_pow+0x770>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 fa6b 	bl	8000618 <__aeabi_dmul>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4630      	mov	r0, r6
 8008148:	4639      	mov	r1, r7
 800814a:	f7f8 f8af 	bl	80002ac <__adddf3>
 800814e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008150:	4b32      	ldr	r3, [pc, #200]	@ (800821c <__ieee754_pow+0x794>)
 8008152:	4413      	add	r3, r2
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 f8a8 	bl	80002ac <__adddf3>
 800815c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008160:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008162:	f7f8 f9ef 	bl	8000544 <__aeabi_i2d>
 8008166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008168:	4b2d      	ldr	r3, [pc, #180]	@ (8008220 <__ieee754_pow+0x798>)
 800816a:	4413      	add	r3, r2
 800816c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008170:	4606      	mov	r6, r0
 8008172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008176:	460f      	mov	r7, r1
 8008178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800817c:	f7f8 f896 	bl	80002ac <__adddf3>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	f7f8 f892 	bl	80002ac <__adddf3>
 8008188:	4632      	mov	r2, r6
 800818a:	463b      	mov	r3, r7
 800818c:	f7f8 f88e 	bl	80002ac <__adddf3>
 8008190:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	4658      	mov	r0, fp
 800819a:	460d      	mov	r5, r1
 800819c:	f7f8 f884 	bl	80002a8 <__aeabi_dsub>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 f880 	bl	80002a8 <__aeabi_dsub>
 80081a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ac:	f7f8 f87c 	bl	80002a8 <__aeabi_dsub>
 80081b0:	465c      	mov	r4, fp
 80081b2:	4602      	mov	r2, r0
 80081b4:	e036      	b.n	8008224 <__ieee754_pow+0x79c>
 80081b6:	bf00      	nop
 80081b8:	4a454eef 	.word	0x4a454eef
 80081bc:	3fca7e28 	.word	0x3fca7e28
 80081c0:	93c9db65 	.word	0x93c9db65
 80081c4:	3fcd864a 	.word	0x3fcd864a
 80081c8:	a91d4101 	.word	0xa91d4101
 80081cc:	3fd17460 	.word	0x3fd17460
 80081d0:	518f264d 	.word	0x518f264d
 80081d4:	3fd55555 	.word	0x3fd55555
 80081d8:	db6fabff 	.word	0xdb6fabff
 80081dc:	3fdb6db6 	.word	0x3fdb6db6
 80081e0:	33333303 	.word	0x33333303
 80081e4:	3fe33333 	.word	0x3fe33333
 80081e8:	e0000000 	.word	0xe0000000
 80081ec:	3feec709 	.word	0x3feec709
 80081f0:	dc3a03fd 	.word	0xdc3a03fd
 80081f4:	3feec709 	.word	0x3feec709
 80081f8:	145b01f5 	.word	0x145b01f5
 80081fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	43400000 	.word	0x43400000
 8008208:	0003988e 	.word	0x0003988e
 800820c:	000bb679 	.word	0x000bb679
 8008210:	08008aa8 	.word	0x08008aa8
 8008214:	3ff00000 	.word	0x3ff00000
 8008218:	40080000 	.word	0x40080000
 800821c:	08008a88 	.word	0x08008a88
 8008220:	08008a98 	.word	0x08008a98
 8008224:	460b      	mov	r3, r1
 8008226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800822a:	e5d7      	b.n	8007ddc <__ieee754_pow+0x354>
 800822c:	f04f 0a01 	mov.w	sl, #1
 8008230:	e65e      	b.n	8007ef0 <__ieee754_pow+0x468>
 8008232:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008504 <__ieee754_pow+0xa7c>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 f836 	bl	80002ac <__adddf3>
 8008240:	4642      	mov	r2, r8
 8008242:	e9cd 0100 	strd	r0, r1, [sp]
 8008246:	464b      	mov	r3, r9
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	f7f8 f82c 	bl	80002a8 <__aeabi_dsub>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008258:	f7f8 fc6e 	bl	8000b38 <__aeabi_dcmpgt>
 800825c:	2800      	cmp	r0, #0
 800825e:	f47f ae00 	bne.w	8007e62 <__ieee754_pow+0x3da>
 8008262:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008266:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800826a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800826e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008272:	44da      	add	sl, fp
 8008274:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008278:	489d      	ldr	r0, [pc, #628]	@ (80084f0 <__ieee754_pow+0xa68>)
 800827a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800827e:	4108      	asrs	r0, r1
 8008280:	ea00 030a 	and.w	r3, r0, sl
 8008284:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008288:	f1c1 0114 	rsb	r1, r1, #20
 800828c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008290:	fa4a fa01 	asr.w	sl, sl, r1
 8008294:	f1bb 0f00 	cmp.w	fp, #0
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	bfb8      	it	lt
 80082a2:	f1ca 0a00 	rsblt	sl, sl, #0
 80082a6:	f7f7 ffff 	bl	80002a8 <__aeabi_dsub>
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	4632      	mov	r2, r6
 80082b0:	463b      	mov	r3, r7
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f7 fff9 	bl	80002ac <__adddf3>
 80082ba:	2400      	movs	r4, #0
 80082bc:	a37c      	add	r3, pc, #496	@ (adr r3, 80084b0 <__ieee754_pow+0xa28>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	4620      	mov	r0, r4
 80082c4:	460d      	mov	r5, r1
 80082c6:	f7f8 f9a7 	bl	8000618 <__aeabi_dmul>
 80082ca:	4642      	mov	r2, r8
 80082cc:	e9cd 0100 	strd	r0, r1, [sp]
 80082d0:	464b      	mov	r3, r9
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f7 ffe7 	bl	80002a8 <__aeabi_dsub>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 ffe1 	bl	80002a8 <__aeabi_dsub>
 80082e6:	a374      	add	r3, pc, #464	@ (adr r3, 80084b8 <__ieee754_pow+0xa30>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f8 f994 	bl	8000618 <__aeabi_dmul>
 80082f0:	a373      	add	r3, pc, #460	@ (adr r3, 80084c0 <__ieee754_pow+0xa38>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	4680      	mov	r8, r0
 80082f8:	4689      	mov	r9, r1
 80082fa:	4620      	mov	r0, r4
 80082fc:	4629      	mov	r1, r5
 80082fe:	f7f8 f98b 	bl	8000618 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4640      	mov	r0, r8
 8008308:	4649      	mov	r1, r9
 800830a:	f7f7 ffcf 	bl	80002ac <__adddf3>
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	f7f7 ffc7 	bl	80002ac <__adddf3>
 800831e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008322:	4680      	mov	r8, r0
 8008324:	4689      	mov	r9, r1
 8008326:	f7f7 ffbf 	bl	80002a8 <__aeabi_dsub>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f7 ffb9 	bl	80002a8 <__aeabi_dsub>
 8008336:	4642      	mov	r2, r8
 8008338:	4606      	mov	r6, r0
 800833a:	460f      	mov	r7, r1
 800833c:	464b      	mov	r3, r9
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 f969 	bl	8000618 <__aeabi_dmul>
 8008346:	a360      	add	r3, pc, #384	@ (adr r3, 80084c8 <__ieee754_pow+0xa40>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	f7f8 f962 	bl	8000618 <__aeabi_dmul>
 8008354:	a35e      	add	r3, pc, #376	@ (adr r3, 80084d0 <__ieee754_pow+0xa48>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ffa5 	bl	80002a8 <__aeabi_dsub>
 800835e:	4622      	mov	r2, r4
 8008360:	462b      	mov	r3, r5
 8008362:	f7f8 f959 	bl	8000618 <__aeabi_dmul>
 8008366:	a35c      	add	r3, pc, #368	@ (adr r3, 80084d8 <__ieee754_pow+0xa50>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f7 ff9e 	bl	80002ac <__adddf3>
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	f7f8 f950 	bl	8000618 <__aeabi_dmul>
 8008378:	a359      	add	r3, pc, #356	@ (adr r3, 80084e0 <__ieee754_pow+0xa58>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f7 ff93 	bl	80002a8 <__aeabi_dsub>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f7f8 f947 	bl	8000618 <__aeabi_dmul>
 800838a:	a357      	add	r3, pc, #348	@ (adr r3, 80084e8 <__ieee754_pow+0xa60>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff8c 	bl	80002ac <__adddf3>
 8008394:	4622      	mov	r2, r4
 8008396:	462b      	mov	r3, r5
 8008398:	f7f8 f93e 	bl	8000618 <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4640      	mov	r0, r8
 80083a2:	4649      	mov	r1, r9
 80083a4:	f7f7 ff80 	bl	80002a8 <__aeabi_dsub>
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4640      	mov	r0, r8
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f8 f930 	bl	8000618 <__aeabi_dmul>
 80083b8:	2200      	movs	r2, #0
 80083ba:	e9cd 0100 	strd	r0, r1, [sp]
 80083be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f7 ff6f 	bl	80002a8 <__aeabi_dsub>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083d2:	f7f8 fa4b 	bl	800086c <__aeabi_ddiv>
 80083d6:	4632      	mov	r2, r6
 80083d8:	4604      	mov	r4, r0
 80083da:	460d      	mov	r5, r1
 80083dc:	463b      	mov	r3, r7
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f8 f919 	bl	8000618 <__aeabi_dmul>
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	f7f7 ff5f 	bl	80002ac <__adddf3>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f7 ff57 	bl	80002a8 <__aeabi_dsub>
 80083fa:	4642      	mov	r2, r8
 80083fc:	464b      	mov	r3, r9
 80083fe:	f7f7 ff53 	bl	80002a8 <__aeabi_dsub>
 8008402:	460b      	mov	r3, r1
 8008404:	4602      	mov	r2, r0
 8008406:	493b      	ldr	r1, [pc, #236]	@ (80084f4 <__ieee754_pow+0xa6c>)
 8008408:	2000      	movs	r0, #0
 800840a:	f7f7 ff4d 	bl	80002a8 <__aeabi_dsub>
 800840e:	ec41 0b10 	vmov	d0, r0, r1
 8008412:	ee10 3a90 	vmov	r3, s1
 8008416:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800841a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800841e:	da30      	bge.n	8008482 <__ieee754_pow+0x9fa>
 8008420:	4650      	mov	r0, sl
 8008422:	f000 f87d 	bl	8008520 <scalbn>
 8008426:	ec51 0b10 	vmov	r0, r1, d0
 800842a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800842e:	f7ff bbd2 	b.w	8007bd6 <__ieee754_pow+0x14e>
 8008432:	4c31      	ldr	r4, [pc, #196]	@ (80084f8 <__ieee754_pow+0xa70>)
 8008434:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008438:	42a3      	cmp	r3, r4
 800843a:	d91a      	bls.n	8008472 <__ieee754_pow+0x9ea>
 800843c:	4b2f      	ldr	r3, [pc, #188]	@ (80084fc <__ieee754_pow+0xa74>)
 800843e:	440b      	add	r3, r1
 8008440:	4303      	orrs	r3, r0
 8008442:	d009      	beq.n	8008458 <__ieee754_pow+0x9d0>
 8008444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008448:	2200      	movs	r2, #0
 800844a:	2300      	movs	r3, #0
 800844c:	f7f8 fb56 	bl	8000afc <__aeabi_dcmplt>
 8008450:	3800      	subs	r0, #0
 8008452:	bf18      	it	ne
 8008454:	2001      	movne	r0, #1
 8008456:	e42b      	b.n	8007cb0 <__ieee754_pow+0x228>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	f7f7 ff24 	bl	80002a8 <__aeabi_dsub>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f8 fb5e 	bl	8000b24 <__aeabi_dcmpge>
 8008468:	2800      	cmp	r0, #0
 800846a:	d1eb      	bne.n	8008444 <__ieee754_pow+0x9bc>
 800846c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800850c <__ieee754_pow+0xa84>
 8008470:	e6f7      	b.n	8008262 <__ieee754_pow+0x7da>
 8008472:	469a      	mov	sl, r3
 8008474:	4b22      	ldr	r3, [pc, #136]	@ (8008500 <__ieee754_pow+0xa78>)
 8008476:	459a      	cmp	sl, r3
 8008478:	f63f aef3 	bhi.w	8008262 <__ieee754_pow+0x7da>
 800847c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008480:	e715      	b.n	80082ae <__ieee754_pow+0x826>
 8008482:	ec51 0b10 	vmov	r0, r1, d0
 8008486:	4619      	mov	r1, r3
 8008488:	e7cf      	b.n	800842a <__ieee754_pow+0x9a2>
 800848a:	491a      	ldr	r1, [pc, #104]	@ (80084f4 <__ieee754_pow+0xa6c>)
 800848c:	2000      	movs	r0, #0
 800848e:	f7ff bb18 	b.w	8007ac2 <__ieee754_pow+0x3a>
 8008492:	2000      	movs	r0, #0
 8008494:	2100      	movs	r1, #0
 8008496:	f7ff bb14 	b.w	8007ac2 <__ieee754_pow+0x3a>
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7ff bb10 	b.w	8007ac2 <__ieee754_pow+0x3a>
 80084a2:	460c      	mov	r4, r1
 80084a4:	f7ff bb5e 	b.w	8007b64 <__ieee754_pow+0xdc>
 80084a8:	2400      	movs	r4, #0
 80084aa:	f7ff bb49 	b.w	8007b40 <__ieee754_pow+0xb8>
 80084ae:	bf00      	nop
 80084b0:	00000000 	.word	0x00000000
 80084b4:	3fe62e43 	.word	0x3fe62e43
 80084b8:	fefa39ef 	.word	0xfefa39ef
 80084bc:	3fe62e42 	.word	0x3fe62e42
 80084c0:	0ca86c39 	.word	0x0ca86c39
 80084c4:	be205c61 	.word	0xbe205c61
 80084c8:	72bea4d0 	.word	0x72bea4d0
 80084cc:	3e663769 	.word	0x3e663769
 80084d0:	c5d26bf1 	.word	0xc5d26bf1
 80084d4:	3ebbbd41 	.word	0x3ebbbd41
 80084d8:	af25de2c 	.word	0xaf25de2c
 80084dc:	3f11566a 	.word	0x3f11566a
 80084e0:	16bebd93 	.word	0x16bebd93
 80084e4:	3f66c16c 	.word	0x3f66c16c
 80084e8:	5555553e 	.word	0x5555553e
 80084ec:	3fc55555 	.word	0x3fc55555
 80084f0:	fff00000 	.word	0xfff00000
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	4090cbff 	.word	0x4090cbff
 80084fc:	3f6f3400 	.word	0x3f6f3400
 8008500:	3fe00000 	.word	0x3fe00000
 8008504:	652b82fe 	.word	0x652b82fe
 8008508:	3c971547 	.word	0x3c971547
 800850c:	4090cc00 	.word	0x4090cc00

08008510 <fabs>:
 8008510:	ec51 0b10 	vmov	r0, r1, d0
 8008514:	4602      	mov	r2, r0
 8008516:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800851a:	ec43 2b10 	vmov	d0, r2, r3
 800851e:	4770      	bx	lr

08008520 <scalbn>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	ec55 4b10 	vmov	r4, r5, d0
 8008526:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800852a:	4606      	mov	r6, r0
 800852c:	462b      	mov	r3, r5
 800852e:	b991      	cbnz	r1, 8008556 <scalbn+0x36>
 8008530:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008534:	4323      	orrs	r3, r4
 8008536:	d03d      	beq.n	80085b4 <scalbn+0x94>
 8008538:	4b35      	ldr	r3, [pc, #212]	@ (8008610 <scalbn+0xf0>)
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	2200      	movs	r2, #0
 8008540:	f7f8 f86a 	bl	8000618 <__aeabi_dmul>
 8008544:	4b33      	ldr	r3, [pc, #204]	@ (8008614 <scalbn+0xf4>)
 8008546:	429e      	cmp	r6, r3
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	da0f      	bge.n	800856e <scalbn+0x4e>
 800854e:	a328      	add	r3, pc, #160	@ (adr r3, 80085f0 <scalbn+0xd0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	e01e      	b.n	8008594 <scalbn+0x74>
 8008556:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800855a:	4291      	cmp	r1, r2
 800855c:	d10b      	bne.n	8008576 <scalbn+0x56>
 800855e:	4622      	mov	r2, r4
 8008560:	4620      	mov	r0, r4
 8008562:	4629      	mov	r1, r5
 8008564:	f7f7 fea2 	bl	80002ac <__adddf3>
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	e022      	b.n	80085b4 <scalbn+0x94>
 800856e:	460b      	mov	r3, r1
 8008570:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008574:	3936      	subs	r1, #54	@ 0x36
 8008576:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800857a:	4296      	cmp	r6, r2
 800857c:	dd0d      	ble.n	800859a <scalbn+0x7a>
 800857e:	2d00      	cmp	r5, #0
 8008580:	a11d      	add	r1, pc, #116	@ (adr r1, 80085f8 <scalbn+0xd8>)
 8008582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008586:	da02      	bge.n	800858e <scalbn+0x6e>
 8008588:	a11d      	add	r1, pc, #116	@ (adr r1, 8008600 <scalbn+0xe0>)
 800858a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858e:	a31a      	add	r3, pc, #104	@ (adr r3, 80085f8 <scalbn+0xd8>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f8 f840 	bl	8000618 <__aeabi_dmul>
 8008598:	e7e6      	b.n	8008568 <scalbn+0x48>
 800859a:	1872      	adds	r2, r6, r1
 800859c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80085a0:	428a      	cmp	r2, r1
 80085a2:	dcec      	bgt.n	800857e <scalbn+0x5e>
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	dd08      	ble.n	80085ba <scalbn+0x9a>
 80085a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085b4:	ec45 4b10 	vmov	d0, r4, r5
 80085b8:	bd70      	pop	{r4, r5, r6, pc}
 80085ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80085be:	da08      	bge.n	80085d2 <scalbn+0xb2>
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	a10b      	add	r1, pc, #44	@ (adr r1, 80085f0 <scalbn+0xd0>)
 80085c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c8:	dac1      	bge.n	800854e <scalbn+0x2e>
 80085ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8008608 <scalbn+0xe8>)
 80085cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d0:	e7bd      	b.n	800854e <scalbn+0x2e>
 80085d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085d6:	3236      	adds	r2, #54	@ 0x36
 80085d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085e0:	4620      	mov	r0, r4
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <scalbn+0xf8>)
 80085e4:	4629      	mov	r1, r5
 80085e6:	2200      	movs	r2, #0
 80085e8:	e7d4      	b.n	8008594 <scalbn+0x74>
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w
 80085f0:	c2f8f359 	.word	0xc2f8f359
 80085f4:	01a56e1f 	.word	0x01a56e1f
 80085f8:	8800759c 	.word	0x8800759c
 80085fc:	7e37e43c 	.word	0x7e37e43c
 8008600:	8800759c 	.word	0x8800759c
 8008604:	fe37e43c 	.word	0xfe37e43c
 8008608:	c2f8f359 	.word	0xc2f8f359
 800860c:	81a56e1f 	.word	0x81a56e1f
 8008610:	43500000 	.word	0x43500000
 8008614:	ffff3cb0 	.word	0xffff3cb0
 8008618:	3c900000 	.word	0x3c900000

0800861c <with_errno>:
 800861c:	b510      	push	{r4, lr}
 800861e:	ed2d 8b02 	vpush	{d8}
 8008622:	eeb0 8a40 	vmov.f32	s16, s0
 8008626:	eef0 8a60 	vmov.f32	s17, s1
 800862a:	4604      	mov	r4, r0
 800862c:	f7fe fd36 	bl	800709c <__errno>
 8008630:	eeb0 0a48 	vmov.f32	s0, s16
 8008634:	eef0 0a68 	vmov.f32	s1, s17
 8008638:	ecbd 8b02 	vpop	{d8}
 800863c:	6004      	str	r4, [r0, #0]
 800863e:	bd10      	pop	{r4, pc}

08008640 <xflow>:
 8008640:	4603      	mov	r3, r0
 8008642:	b507      	push	{r0, r1, r2, lr}
 8008644:	ec51 0b10 	vmov	r0, r1, d0
 8008648:	b183      	cbz	r3, 800866c <xflow+0x2c>
 800864a:	4602      	mov	r2, r0
 800864c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008650:	e9cd 2300 	strd	r2, r3, [sp]
 8008654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008658:	f7f7 ffde 	bl	8000618 <__aeabi_dmul>
 800865c:	ec41 0b10 	vmov	d0, r0, r1
 8008660:	2022      	movs	r0, #34	@ 0x22
 8008662:	b003      	add	sp, #12
 8008664:	f85d eb04 	ldr.w	lr, [sp], #4
 8008668:	f7ff bfd8 	b.w	800861c <with_errno>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	e7ee      	b.n	8008650 <xflow+0x10>
 8008672:	0000      	movs	r0, r0
 8008674:	0000      	movs	r0, r0
	...

08008678 <__math_uflow>:
 8008678:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008680 <__math_uflow+0x8>
 800867c:	f7ff bfe0 	b.w	8008640 <xflow>
 8008680:	00000000 	.word	0x00000000
 8008684:	10000000 	.word	0x10000000

08008688 <__math_oflow>:
 8008688:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008690 <__math_oflow+0x8>
 800868c:	f7ff bfd8 	b.w	8008640 <xflow>
 8008690:	00000000 	.word	0x00000000
 8008694:	70000000 	.word	0x70000000

08008698 <__ieee754_sqrt>:
 8008698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	4a68      	ldr	r2, [pc, #416]	@ (8008840 <__ieee754_sqrt+0x1a8>)
 800869e:	ec55 4b10 	vmov	r4, r5, d0
 80086a2:	43aa      	bics	r2, r5
 80086a4:	462b      	mov	r3, r5
 80086a6:	4621      	mov	r1, r4
 80086a8:	d110      	bne.n	80086cc <__ieee754_sqrt+0x34>
 80086aa:	4622      	mov	r2, r4
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f7 fdf6 	bl	80002ac <__adddf3>
 80086c0:	4604      	mov	r4, r0
 80086c2:	460d      	mov	r5, r1
 80086c4:	ec45 4b10 	vmov	d0, r4, r5
 80086c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	dc0e      	bgt.n	80086ee <__ieee754_sqrt+0x56>
 80086d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80086d4:	4322      	orrs	r2, r4
 80086d6:	d0f5      	beq.n	80086c4 <__ieee754_sqrt+0x2c>
 80086d8:	b19d      	cbz	r5, 8008702 <__ieee754_sqrt+0x6a>
 80086da:	4622      	mov	r2, r4
 80086dc:	4620      	mov	r0, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	f7f7 fde2 	bl	80002a8 <__aeabi_dsub>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	f7f8 f8c0 	bl	800086c <__aeabi_ddiv>
 80086ec:	e7e8      	b.n	80086c0 <__ieee754_sqrt+0x28>
 80086ee:	152a      	asrs	r2, r5, #20
 80086f0:	d115      	bne.n	800871e <__ieee754_sqrt+0x86>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e009      	b.n	800870a <__ieee754_sqrt+0x72>
 80086f6:	0acb      	lsrs	r3, r1, #11
 80086f8:	3a15      	subs	r2, #21
 80086fa:	0549      	lsls	r1, r1, #21
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0fa      	beq.n	80086f6 <__ieee754_sqrt+0x5e>
 8008700:	e7f7      	b.n	80086f2 <__ieee754_sqrt+0x5a>
 8008702:	462a      	mov	r2, r5
 8008704:	e7fa      	b.n	80086fc <__ieee754_sqrt+0x64>
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	3001      	adds	r0, #1
 800870a:	02dc      	lsls	r4, r3, #11
 800870c:	d5fb      	bpl.n	8008706 <__ieee754_sqrt+0x6e>
 800870e:	1e44      	subs	r4, r0, #1
 8008710:	1b12      	subs	r2, r2, r4
 8008712:	f1c0 0420 	rsb	r4, r0, #32
 8008716:	fa21 f404 	lsr.w	r4, r1, r4
 800871a:	4323      	orrs	r3, r4
 800871c:	4081      	lsls	r1, r0
 800871e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008722:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800872a:	07d2      	lsls	r2, r2, #31
 800872c:	bf5c      	itt	pl
 800872e:	005b      	lslpl	r3, r3, #1
 8008730:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008734:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008738:	bf58      	it	pl
 800873a:	0049      	lslpl	r1, r1, #1
 800873c:	2600      	movs	r6, #0
 800873e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008742:	106d      	asrs	r5, r5, #1
 8008744:	0049      	lsls	r1, r1, #1
 8008746:	2016      	movs	r0, #22
 8008748:	4632      	mov	r2, r6
 800874a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800874e:	1917      	adds	r7, r2, r4
 8008750:	429f      	cmp	r7, r3
 8008752:	bfde      	ittt	le
 8008754:	193a      	addle	r2, r7, r4
 8008756:	1bdb      	suble	r3, r3, r7
 8008758:	1936      	addle	r6, r6, r4
 800875a:	0fcf      	lsrs	r7, r1, #31
 800875c:	3801      	subs	r0, #1
 800875e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008762:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008766:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800876a:	d1f0      	bne.n	800874e <__ieee754_sqrt+0xb6>
 800876c:	4604      	mov	r4, r0
 800876e:	2720      	movs	r7, #32
 8008770:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008774:	429a      	cmp	r2, r3
 8008776:	eb00 0e0c 	add.w	lr, r0, ip
 800877a:	db02      	blt.n	8008782 <__ieee754_sqrt+0xea>
 800877c:	d113      	bne.n	80087a6 <__ieee754_sqrt+0x10e>
 800877e:	458e      	cmp	lr, r1
 8008780:	d811      	bhi.n	80087a6 <__ieee754_sqrt+0x10e>
 8008782:	f1be 0f00 	cmp.w	lr, #0
 8008786:	eb0e 000c 	add.w	r0, lr, ip
 800878a:	da42      	bge.n	8008812 <__ieee754_sqrt+0x17a>
 800878c:	2800      	cmp	r0, #0
 800878e:	db40      	blt.n	8008812 <__ieee754_sqrt+0x17a>
 8008790:	f102 0801 	add.w	r8, r2, #1
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	458e      	cmp	lr, r1
 8008798:	bf88      	it	hi
 800879a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800879e:	eba1 010e 	sub.w	r1, r1, lr
 80087a2:	4464      	add	r4, ip
 80087a4:	4642      	mov	r2, r8
 80087a6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80087aa:	3f01      	subs	r7, #1
 80087ac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80087b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80087b4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80087b8:	d1dc      	bne.n	8008774 <__ieee754_sqrt+0xdc>
 80087ba:	4319      	orrs	r1, r3
 80087bc:	d01b      	beq.n	80087f6 <__ieee754_sqrt+0x15e>
 80087be:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008844 <__ieee754_sqrt+0x1ac>
 80087c2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008848 <__ieee754_sqrt+0x1b0>
 80087c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80087ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80087ce:	f7f7 fd6b 	bl	80002a8 <__aeabi_dsub>
 80087d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f8 f997 	bl	8000b10 <__aeabi_dcmple>
 80087e2:	b140      	cbz	r0, 80087f6 <__ieee754_sqrt+0x15e>
 80087e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80087e8:	e9da 0100 	ldrd	r0, r1, [sl]
 80087ec:	e9db 2300 	ldrd	r2, r3, [fp]
 80087f0:	d111      	bne.n	8008816 <__ieee754_sqrt+0x17e>
 80087f2:	3601      	adds	r6, #1
 80087f4:	463c      	mov	r4, r7
 80087f6:	1072      	asrs	r2, r6, #1
 80087f8:	0863      	lsrs	r3, r4, #1
 80087fa:	07f1      	lsls	r1, r6, #31
 80087fc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008800:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008804:	bf48      	it	mi
 8008806:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800880a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800880e:	4618      	mov	r0, r3
 8008810:	e756      	b.n	80086c0 <__ieee754_sqrt+0x28>
 8008812:	4690      	mov	r8, r2
 8008814:	e7be      	b.n	8008794 <__ieee754_sqrt+0xfc>
 8008816:	f7f7 fd49 	bl	80002ac <__adddf3>
 800881a:	e9da 8900 	ldrd	r8, r9, [sl]
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4640      	mov	r0, r8
 8008824:	4649      	mov	r1, r9
 8008826:	f7f8 f969 	bl	8000afc <__aeabi_dcmplt>
 800882a:	b120      	cbz	r0, 8008836 <__ieee754_sqrt+0x19e>
 800882c:	1ca0      	adds	r0, r4, #2
 800882e:	bf08      	it	eq
 8008830:	3601      	addeq	r6, #1
 8008832:	3402      	adds	r4, #2
 8008834:	e7df      	b.n	80087f6 <__ieee754_sqrt+0x15e>
 8008836:	1c63      	adds	r3, r4, #1
 8008838:	f023 0401 	bic.w	r4, r3, #1
 800883c:	e7db      	b.n	80087f6 <__ieee754_sqrt+0x15e>
 800883e:	bf00      	nop
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	20000148 	.word	0x20000148
 8008848:	20000140 	.word	0x20000140

0800884c <_init>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr

08008858 <_fini>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr
